Literally the entirety of the discord.py directory

API Reference
The following section outlines the API of discord.py.


This module uses the Python logging module to log diagnostic and errors in an output independent way. If the logging module is not configured, these logs will not be output anywhere. See Setting Up Logging for more information on how to set up and use the logging module with discord.py.

Version Related Info
There are two main ways to query version information about the library. For guarantees, check Version Guarantees.

discord.version_info
A named tuple that is similar to sys.version_info.

Just like sys.version_info the valid values for releaselevel are ‘alpha’, ‘beta’, ‘candidate’ and ‘final’.

discord.__version__
A string representation of the version. e.g. '1.0.0rc1'. This is based off of PEP 440.

Clients
Client
class discord.Client(*, loop=None, **options)
Attributes
activity
allowed_mentions
cached_messages
emojis
guilds
intents
latency
loop
private_channels
user
users
voice_clients
ws
Methods
application_info
before_identify_hook
change_presence
clear
close
connect
create_guild
delete_invite
event
fetch_channel
fetch_guild
fetch_guilds
fetch_invite
fetch_template
fetch_user
fetch_user_profile
fetch_webhook
fetch_widget
get_all_channels
get_all_members
get_channel
get_emoji
get_guild
get_user
is_closed
is_ready
is_ws_ratelimited
login
logout
on_error
request_offline_members
run
start
wait_for
wait_until_ready
Represents a client connection that connects to Discord. This class is used to interact with the Discord WebSocket and API.

A number of options can be passed to the Client.

Parameters
max_messages (Optional[int]) –

The maximum number of messages to store in the internal message cache. This defaults to 1000. Passing in None disables the message cache.

Changed in version 1.3: Allow disabling the message cache and change the default size to 1000.

loop (Optional[asyncio.AbstractEventLoop]) – The asyncio.AbstractEventLoop to use for asynchronous operations. Defaults to None, in which case the default event loop is used via asyncio.get_event_loop().

connector (aiohttp.BaseConnector) – The connector to use for connection pooling.

proxy (Optional[str]) – Proxy URL.

proxy_auth (Optional[aiohttp.BasicAuth]) – An object that represents proxy HTTP Basic Authorization.

shard_id (Optional[int]) – Integer starting at 0 and less than shard_count.

shard_count (Optional[int]) – The total number of shards.

intents (Intents) –

The intents that you want to enable for the session. This is a way of disabling and enabling certain gateway events from triggering and being sent. If not given, defaults to a regularly constructed Intents class.

New in version 1.5.

member_cache_flags (MemberCacheFlags) –

Allows for finer control over how the library caches members. If not given, defaults to cache as much as possible with the currently selected intents.

New in version 1.5.

fetch_offline_members (bool) – A deprecated alias of chunk_guilds_at_startup.

chunk_guilds_at_startup (bool) –

Indicates if on_ready() should be delayed to chunk all guilds at start-up if necessary. This operation is incredibly slow for large amounts of guilds. The default is True if Intents.members is True.

New in version 1.5.

status (Optional[Status]) – A status to start your presence with upon logging on to Discord.

activity (Optional[BaseActivity]) – An activity to start your presence with upon logging on to Discord.

allowed_mentions (Optional[AllowedMentions]) –

Control how the client handles mentions by default on every message sent.

New in version 1.4.

heartbeat_timeout (float) – The maximum numbers of seconds before timing out and restarting the WebSocket in the case of not receiving a HEARTBEAT_ACK. Useful if processing the initial packets take too long to the point of disconnecting you. The default timeout is 60 seconds.

guild_ready_timeout (float) –

The maximum number of seconds to wait for the GUILD_CREATE stream to end before preparing the member cache and firing READY. The default timeout is 2 seconds.

New in version 1.4.

guild_subscriptions (bool) –

Whether to dispatch presence or typing events. Defaults to True.

New in version 1.3.


If this is set to False then the following features will be disabled:

No user related updates (on_user_update() will not dispatch)

All member related events will be disabled.
on_member_update()

on_member_join()

on_member_remove()

Typing events will be disabled (on_typing()).

If fetch_offline_members is set to False then the user cache will not exist. This makes it difficult or impossible to do many things, for example:

Computing permissions

Querying members in a voice channel via VoiceChannel.members will be empty.

Most forms of receiving Member will be receiving User instead, except for message events.

Guild.owner will usually resolve to None.

Guild.get_member() will usually be unavailable.

Anything that involves using Member.

users will not be as populated.

etc.

In short, this makes it so the only member you can reliably query is the message author. Useful for bots that do not require any state.

assume_unsync_clock (bool) –

Whether to assume the system clock is unsynced. This applies to the ratelimit handling code. If this is set to True, the default, then the library uses the time to reset a rate limit bucket given by Discord. If this is False then your system clock is used to calculate how long to sleep for. If this is set to False it is recommended to sync your system clock to Google’s NTP server.

New in version 1.3.

ws
The websocket gateway the client is currently connected to. Could be None.

loop
The event loop that the client uses for HTTP requests and websocket operations.

Type
asyncio.AbstractEventLoop

async for ... in fetch_guilds(*, limit=100, before=None, after=None)
Retrieves an AsyncIterator that enables receiving your guilds.


Using this, you will only receive Guild.owner, Guild.icon, Guild.id, and Guild.name per Guild.


This method is an API call. For general usage, consider guilds instead.

Examples

Usage

content_copy
async for guild in client.fetch_guilds(limit=150):
    print(guild.name)
Flattening into a list

content_copy
guilds = await client.fetch_guilds(limit=150).flatten()
# guilds is now a list of Guild...
All parameters are optional.

Parameters
limit (Optional[int]) – The number of guilds to retrieve. If None, it retrieves every guild you have access to. Note, however, that this would make it a slow operation. Defaults to 100.

before (Union[abc.Snowflake, datetime.datetime]) – Retrieves guilds before this date or object. If a date is provided it must be a timezone-naive datetime representing UTC time.

after (Union[abc.Snowflake, datetime.datetime]) – Retrieve guilds after this date or object. If a date is provided it must be a timezone-naive datetime representing UTC time.

Raises
HTTPException – Getting the guilds failed.

Yields
Guild – The guild with the guild data parsed.

latency
Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds.

This could be referred to as the Discord WebSocket protocol latency.

Type
float

is_ws_ratelimited()
bool: Whether the websocket is currently rate limited.

This can be useful to know when deciding whether you should query members using HTTP or via the gateway.

New in version 1.6.

user
Represents the connected client. None if not logged in.

Type
Optional[ClientUser]

guilds
The guilds that the connected client is a member of.

Type
List[Guild]

emojis
The emojis that the connected client has.

Type
List[Emoji]

cached_messages
Read-only list of messages the connected client has cached.

New in version 1.1.

Type
Sequence[Message]

private_channels
The private channels that the connected client is participating on.


This returns only up to 128 most recent private channels due to an internal working on how Discord deals with private channels.

Type
List[abc.PrivateChannel]

voice_clients
Represents a list of voice connections.

These are usually VoiceClient instances.

Type
List[VoiceProtocol]

is_ready()
bool: Specifies if the client’s internal cache is ready for use.

await on_error(event_method, *args, **kwargs)
This function is a coroutine.

The default error handler provided by the client.

By default this prints to sys.stderr however it could be overridden to have a different implementation. Check on_error() for more details.

await request_offline_members(*guilds)
This function is a coroutine.

Requests previously offline members from the guild to be filled up into the Guild.members cache. This function is usually not called. It should only be used if you have the fetch_offline_members parameter set to False.

When the client logs on and connects to the websocket, Discord does not provide the library with offline members if the number of members in the guild is larger than 250. You can check if a guild is large if Guild.large is True.


This method is deprecated. Use Guild.chunk() instead.

Parameters
*guilds (Guild) – An argument list of guilds to request offline members for.

Raises
InvalidArgument – If any guild is unavailable in the collection.

await before_identify_hook(shard_id, *, initial=False)
This function is a coroutine.

A hook that is called before IDENTIFYing a session. This is useful if you wish to have more control over the synchronization of multiple IDENTIFYing clients.

The default implementation sleeps for 5 seconds.

New in version 1.4.

Parameters
shard_id (int) – The shard ID that requested being IDENTIFY’d

initial (bool) – Whether this IDENTIFY is the first initial IDENTIFY.

await login(token, *, bot=True)
This function is a coroutine.

Logs in the client with the specified credentials.

This function can be used in two different ways.


Logging on with a user token is against the Discord Terms of Service and doing so might potentially get your account banned. Use this at your own risk.

Parameters
token (str) – The authentication token. Do not prefix this token with anything as the library will do it for you.

bot (bool) –

Keyword argument that specifies if the account logging on is a bot token or not.

Deprecated since version 1.7.

Raises
LoginFailure – The wrong credentials are passed.

HTTPException – An unknown HTTP related error occurred, usually when it isn’t 200 or the known incorrect credentials passing status code.

await logout()
This function is a coroutine.

Logs out of Discord and closes all connections.

Deprecated since version 1.7.


This is just an alias to close(). If you want to do extraneous cleanup when subclassing, it is suggested to override close() instead.

await connect(*, reconnect=True)
This function is a coroutine.

Creates a websocket connection and lets the websocket listen to messages from Discord. This is a loop that runs the entire event system and miscellaneous aspects of the library. Control is not resumed until the WebSocket connection is terminated.

Parameters
reconnect (bool) – If we should attempt reconnecting, either due to internet failure or a specific failure on Discord’s part. Certain disconnects that lead to bad state will not be handled (such as invalid sharding payloads or bad tokens).

Raises
GatewayNotFound – If the gateway to connect to Discord is not found. Usually if this is thrown then there is a Discord API outage.

ConnectionClosed – The websocket connection has been terminated.

await close()
This function is a coroutine.

Closes the connection to Discord.

clear()
Clears the internal state of the bot.

After this, the bot can be considered “re-opened”, i.e. is_closed() and is_ready() both return False along with the bot’s internal cache cleared.

await start(*args, **kwargs)
This function is a coroutine.

A shorthand coroutine for login() + connect().

Raises
TypeError – An unexpected keyword argument was received.

run(*args, **kwargs)
A blocking call that abstracts away the event loop initialisation from you.

If you want more control over the event loop then this function should not be used. Use start() coroutine or connect() + login().

Roughly Equivalent to:

content_copy
try:
    loop.run_until_complete(start(*args, **kwargs))
except KeyboardInterrupt:
    loop.run_until_complete(close())
    # cancel all tasks lingering
finally:
    loop.close()

This function must be the last function to call due to the fact that it is blocking. That means that registration of events or anything being called after this function call will not execute until it returns.

is_closed()
bool: Indicates if the websocket connection is closed.

activity
The activity being used upon logging in.

Type
Optional[BaseActivity]

allowed_mentions
The allowed mention configuration.

New in version 1.4.

Type
Optional[AllowedMentions]

intents
The intents configured for this connection.

New in version 1.5.

Type
Intents

users
Returns a list of all the users the bot can see.

Type
List[User]

get_channel(id)
Returns a channel with the given ID.

Parameters
id (int) – The ID to search for.

Returns
The returned channel or None if not found.

Return type
Optional[Union[abc.GuildChannel, abc.PrivateChannel]]

get_guild(id)
Returns a guild with the given ID.

Parameters
id (int) – The ID to search for.

Returns
The guild or None if not found.

Return type
Optional[Guild]

get_user(id)
Returns a user with the given ID.

Parameters
id (int) – The ID to search for.

Returns
The user or None if not found.

Return type
Optional[User]

get_emoji(id)
Returns an emoji with the given ID.

Parameters
id (int) – The ID to search for.

Returns
The custom emoji or None if not found.

Return type
Optional[Emoji]

for ... in get_all_channels()
A generator that retrieves every abc.GuildChannel the client can ‘access’.

This is equivalent to:

content_copy
for guild in client.guilds:
    for channel in guild.channels:
        yield channel

Just because you receive a abc.GuildChannel does not mean that you can communicate in said channel. abc.GuildChannel.permissions_for() should be used for that.

Yields
abc.GuildChannel – A channel the client can ‘access’.

for ... in get_all_members()
Returns a generator with every Member the client can see.

This is equivalent to:

content_copy
for guild in client.guilds:
    for member in guild.members:
        yield member
Yields
Member – A member the client can see.

await wait_until_ready()
This function is a coroutine.

Waits until the client’s internal cache is all ready.

wait_for(event, *, check=None, timeout=None)
This function is a coroutine.

Waits for a WebSocket event to be dispatched.

This could be used to wait for a user to reply to a message, or to react to a message, or to edit a message in a self-contained way.

The timeout parameter is passed onto asyncio.wait_for(). By default, it does not timeout. Note that this does propagate the asyncio.TimeoutError for you in case of timeout and is provided for ease of use.

In case the event returns multiple arguments, a tuple containing those arguments is returned instead. Please check the documentation for a list of events and their parameters.

This function returns the first event that meets the requirements.

Examples

Waiting for a user reply:

content_copy
@client.event
async def on_message(message):
    if message.content.startswith('$greet'):
        channel = message.channel
        await channel.send('Say hello!')

        def check(m):
            return m.content == 'hello' and m.channel == channel

        msg = await client.wait_for('message', check=check)
        await channel.send('Hello {.author}!'.format(msg))
Waiting for a thumbs up reaction from the message author:

content_copy
@client.event
async def on_message(message):
    if message.content.startswith('$thumb'):
        channel = message.channel
        await channel.send('Send me that 👍 reaction, mate')

        def check(reaction, user):
            return user == message.author and str(reaction.emoji) == '👍'

        try:
            reaction, user = await client.wait_for('reaction_add', timeout=60.0, check=check)
        except asyncio.TimeoutError:
            await channel.send('👎')
        else:
            await channel.send('👍')
Parameters
event (str) – The event name, similar to the event reference, but without the on_ prefix, to wait for.

check (Optional[Callable[…, bool]]) – A predicate to check what to wait for. The arguments must meet the parameters of the event being waited for.

timeout (Optional[float]) – The number of seconds to wait before timing out and raising asyncio.TimeoutError.

Raises
asyncio.TimeoutError – If a timeout is provided and it was reached.

Returns
Returns no arguments, a single argument, or a tuple of multiple arguments that mirrors the parameters passed in the event reference.

Return type
Any

event(coro)
A decorator that registers an event to listen to.

You can find more info about the events on the documentation below.

The events must be a coroutine, if not, TypeError is raised.

Example

content_copy
@client.event
async def on_ready():
    print('Ready!')
Raises
TypeError – The coroutine passed is not actually a coroutine.

await change_presence(*, activity=None, status=None, afk=False)
This function is a coroutine.

Changes the client’s presence.

Example

content_copy
game = discord.Game("with the API")
await client.change_presence(status=discord.Status.idle, activity=game)
Parameters
activity (Optional[BaseActivity]) – The activity being done. None if no currently active activity is done.

status (Optional[Status]) – Indicates what status to change to. If None, then Status.online is used.

afk (Optional[bool]) – Indicates if you are going AFK. This allows the discord client to know how to handle push notifications better for you in case you are actually idle and not lying.

Raises
InvalidArgument – If the activity parameter is not the proper type.

await fetch_template(code)
This function is a coroutine.

Gets a Template from a discord.new URL or code.

Parameters
code (Union[Template, str]) – The Discord Template Code or URL (must be a discord.new URL).

Raises
NotFound – The template is invalid.

HTTPException – Getting the template failed.

Returns
The template from the URL/code.

Return type
Template

await fetch_guild(guild_id)
This function is a coroutine.

Retrieves a Guild from an ID.


Using this, you will not receive Guild.channels, Guild.members, Member.activity and Member.voice per Member.


This method is an API call. For general usage, consider get_guild() instead.

Parameters
guild_id (int) – The guild’s ID to fetch from.

Raises
Forbidden – You do not have access to the guild.

HTTPException – Getting the guild failed.

Returns
The guild from the ID.

Return type
Guild

await create_guild(name, region=None, icon=None, *, code=None)
This function is a coroutine.

Creates a Guild.

Bot accounts in more than 10 guilds are not allowed to create guilds.

Parameters
name (str) – The name of the guild.

region (VoiceRegion) – The region for the voice communication server. Defaults to VoiceRegion.us_west.

icon (bytes) – The bytes-like object representing the icon. See ClientUser.edit() for more details on what is expected.

code (Optional[str]) –

The code for a template to create the guild with.

New in version 1.4.

Raises
HTTPException – Guild creation failed.

InvalidArgument – Invalid icon image format given. Must be PNG or JPG.

Returns
The guild created. This is not the same guild that is added to cache.

Return type
Guild

await fetch_invite(url, *, with_counts=True)
This function is a coroutine.

Gets an Invite from a discord.gg URL or ID.


If the invite is for a guild you have not joined, the guild and channel attributes of the returned Invite will be PartialInviteGuild and PartialInviteChannel respectively.

Parameters
url (Union[Invite, str]) – The Discord invite ID or URL (must be a discord.gg URL).

with_counts (bool) – Whether to include count information in the invite. This fills the Invite.approximate_member_count and Invite.approximate_presence_count fields.

Raises
NotFound – The invite has expired or is invalid.

HTTPException – Getting the invite failed.

Returns
The invite from the URL/ID.

Return type
Invite

await delete_invite(invite)
This function is a coroutine.

Revokes an Invite, URL, or ID to an invite.

You must have the manage_channels permission in the associated guild to do this.

Parameters
invite (Union[Invite, str]) – The invite to revoke.

Raises
Forbidden – You do not have permissions to revoke invites.

NotFound – The invite is invalid or expired.

HTTPException – Revoking the invite failed.

await fetch_widget(guild_id)
This function is a coroutine.

Gets a Widget from a guild ID.


The guild must have the widget enabled to get this information.

Parameters
guild_id (int) – The ID of the guild.

Raises
Forbidden – The widget for this guild is disabled.

HTTPException – Retrieving the widget failed.

Returns
The guild’s widget.

Return type
Widget

await application_info()
This function is a coroutine.

Retrieves the bot’s application information.

Raises
HTTPException – Retrieving the information failed somehow.

Returns
The bot’s application information.

Return type
AppInfo

await fetch_user(user_id)
This function is a coroutine.

Retrieves a User based on their ID. This can only be used by bot accounts. You do not have to share any guilds with the user to get this information, however many operations do require that you do.


This method is an API call. If you have Intents.members and member cache enabled, consider get_user() instead.

Parameters
user_id (int) – The user’s ID to fetch from.

Raises
NotFound – A user with this ID does not exist.

HTTPException – Fetching the user failed.

Returns
The user you requested.

Return type
User

await fetch_user_profile(user_id)
This function is a coroutine.

Gets an arbitrary user’s profile.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Parameters
user_id (int) – The ID of the user to fetch their profile for.

Raises
Forbidden – Not allowed to fetch profiles.

HTTPException – Fetching the profile failed.

Returns
The profile of the user.

Return type
Profile

await fetch_channel(channel_id)
This function is a coroutine.

Retrieves a abc.GuildChannel or abc.PrivateChannel with the specified ID.


This method is an API call. For general usage, consider get_channel() instead.

New in version 1.2.

Raises
InvalidData – An unknown channel type was received from Discord.

HTTPException – Retrieving the channel failed.

NotFound – Invalid Channel ID.

Forbidden – You do not have permission to fetch this channel.

Returns
The channel from the ID.

Return type
Union[abc.GuildChannel, abc.PrivateChannel]

await fetch_webhook(webhook_id)
This function is a coroutine.

Retrieves a Webhook with the specified ID.

Raises
HTTPException – Retrieving the webhook failed.

NotFound – Invalid webhook ID.

Forbidden – You do not have permission to fetch this webhook.

Returns
The webhook you requested.

Return type
Webhook

AutoShardedClient
class discord.AutoShardedClient(*args, loop=None, **kwargs)
Attributes
latencies
latency
shard_ids
shards
Methods
change_presence
close
connect
get_shard
is_ws_ratelimited
request_offline_members
A client similar to Client except it handles the complications of sharding for the user into a more manageable and transparent single process bot.

When using this client, you will be able to use it as-if it was a regular Client with a single shard when implementation wise internally it is split up into multiple shards. This allows you to not have to deal with IPC or other complicated infrastructure.

It is recommended to use this client only if you have surpassed at least 1000 guilds.

If no shard_count is provided, then the library will use the Bot Gateway endpoint call to figure out how many shards to use.

If a shard_ids parameter is given, then those shard IDs will be used to launch the internal shards. Note that shard_count must be provided if this is used. By default, when omitted, the client will launch shards from 0 to shard_count - 1.

shard_ids
An optional list of shard_ids to launch the shards with.

Type
Optional[List[int]]

latency
Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds.

This operates similarly to Client.latency() except it uses the average latency of every shard’s latency. To get a list of shard latency, check the latencies property. Returns nan if there are no shards ready.

Type
float

latencies
A list of latencies between a HEARTBEAT and a HEARTBEAT_ACK in seconds.

This returns a list of tuples with elements (shard_id, latency).

Type
List[Tuple[int, float]]

get_shard(shard_id)
Optional[ShardInfo]: Gets the shard information at a given shard ID or None if not found.

shards
Returns a mapping of shard IDs to their respective info object.

Type
Mapping[int, ShardInfo]

await request_offline_members(*guilds)
This function is a coroutine.

Requests previously offline members from the guild to be filled up into the Guild.members cache. This function is usually not called. It should only be used if you have the fetch_offline_members parameter set to False.

When the client logs on and connects to the websocket, Discord does not provide the library with offline members if the number of members in the guild is larger than 250. You can check if a guild is large if Guild.large is True.


This method is deprecated. Use Guild.chunk() instead.

Parameters
*guilds (Guild) – An argument list of guilds to request offline members for.

Raises
InvalidArgument – If any guild is unavailable in the collection.

await connect(*, reconnect=True)
This function is a coroutine.

Creates a websocket connection and lets the websocket listen to messages from Discord. This is a loop that runs the entire event system and miscellaneous aspects of the library. Control is not resumed until the WebSocket connection is terminated.

Parameters
reconnect (bool) – If we should attempt reconnecting, either due to internet failure or a specific failure on Discord’s part. Certain disconnects that lead to bad state will not be handled (such as invalid sharding payloads or bad tokens).

Raises
GatewayNotFound – If the gateway to connect to Discord is not found. Usually if this is thrown then there is a Discord API outage.

ConnectionClosed – The websocket connection has been terminated.

await close()
This function is a coroutine.

Closes the connection to Discord.

await change_presence(*, activity=None, status=None, afk=False, shard_id=None)
This function is a coroutine.

Changes the client’s presence.

Example:

content_copy
game = discord.Game("with the API")
await client.change_presence(status=discord.Status.idle, activity=game)
Parameters
activity (Optional[BaseActivity]) – The activity being done. None if no currently active activity is done.

status (Optional[Status]) – Indicates what status to change to. If None, then Status.online is used.

afk (bool) – Indicates if you are going AFK. This allows the discord client to know how to handle push notifications better for you in case you are actually idle and not lying.

shard_id (Optional[int]) – The shard_id to change the presence to. If not specified or None, then it will change the presence of every shard the bot can see.

Raises
InvalidArgument – If the activity parameter is not of proper type.

is_ws_ratelimited()
bool: Whether the websocket is currently rate limited.

This can be useful to know when deciding whether you should query members using HTTP or via the gateway.

This implementation checks if any of the shards are rate limited. For more granular control, consider ShardInfo.is_ws_ratelimited().

New in version 1.6.

Application Info
AppInfo
class discord.AppInfo
Attributes
bot_public
bot_require_code_grant
cover_image
cover_image_url
description
guild
guild_id
icon
icon_url
id
name
owner
primary_sku_id
rpc_origins
slug
summary
team
verify_key
Methods
cover_image_url_as
icon_url_as
Represents the application info for the bot provided by Discord.

id
The application ID.

Type
int

name
The application name.

Type
str

owner
The application owner.

Type
User

team
The application’s team.

New in version 1.3.

Type
Optional[Team]

icon
The icon hash, if it exists.

Type
Optional[str]

description
The application description.

Type
Optional[str]

bot_public
Whether the bot can be invited by anyone or if it is locked to the application owner.

Type
bool

bot_require_code_grant
Whether the bot requires the completion of the full oauth2 code grant flow to join.

Type
bool

rpc_origins
A list of RPC origin URLs, if RPC is enabled.

Type
Optional[List[str]]

summary
If this application is a game sold on Discord, this field will be the summary field for the store page of its primary SKU.

New in version 1.3.

Type
str

verify_key
The hex encoded key for verification in interactions and the GameSDK’s GetTicket.

New in version 1.3.

Type
str

guild_id
If this application is a game sold on Discord, this field will be the guild to which it has been linked to.

New in version 1.3.

Type
Optional[int]

primary_sku_id
If this application is a game sold on Discord, this field will be the id of the “Game SKU” that is created, if it exists.

New in version 1.3.

Type
Optional[int]

slug
If this application is a game sold on Discord, this field will be the URL slug that links to the store page.

New in version 1.3.

Type
Optional[str]

cover_image
If this application is a game sold on Discord, this field will be the hash of the image on store embeds

New in version 1.3.

Type
Optional[str]

icon_url
Retrieves the application’s icon asset.

This is equivalent to calling icon_url_as() with the default parameters (‘webp’ format and a size of 1024).

New in version 1.3.

Type
Asset

icon_url_as(*, format='webp', size=1024)
Returns an Asset for the icon the application has.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’ or ‘png’. The size must be a power of 2 between 16 and 4096.

New in version 1.6.

Parameters
format (str) – The format to attempt to convert the icon to. Defaults to ‘webp’.

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

cover_image_url
Retrieves the cover image on a store embed.

This is equivalent to calling cover_image_url_as() with the default parameters (‘webp’ format and a size of 1024).

New in version 1.3.

Type
Asset

cover_image_url_as(*, format='webp', size=1024)
Returns an Asset for the image on store embeds if this application is a game sold on Discord.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’ or ‘png’. The size must be a power of 2 between 16 and 4096.

New in version 1.6.

Parameters
format (str) – The format to attempt to convert the image to. Defaults to ‘webp’.

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

guild
If this application is a game sold on Discord, this field will be the guild to which it has been linked

New in version 1.3.

Type
Optional[Guild]

Team
class discord.Team
Attributes
icon
icon_url
id
members
name
owner
owner_id
Methods
icon_url_as
Represents an application team for a bot provided by Discord.

id
The team ID.

Type
int

name
The team name

Type
str

icon
The icon hash, if it exists.

Type
Optional[str]

owner_id
The team’s owner ID.

Type
int

members
A list of the members in the team

New in version 1.3.

Type
List[TeamMember]

icon_url
Retrieves the team’s icon asset.

This is equivalent to calling icon_url_as() with the default parameters (‘webp’ format and a size of 1024).

Type
Asset

icon_url_as(*, format='webp', size=1024)
Returns an Asset for the icon the team has.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’ or ‘png’. The size must be a power of 2 between 16 and 4096.

New in version 2.0.

Parameters
format (str) – The format to attempt to convert the icon to. Defaults to ‘webp’.

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

owner
The team’s owner.

Type
Optional[TeamMember]

TeamMember
class discord.TeamMember
Attributes
avatar
bot
discriminator
id
membership_state
name
team
Represents a team member in a team.

x == y
Checks if two team members are equal.

x != y
Checks if two team members are not equal.

hash(x)
Return the team member’s hash.

str(x)
Returns the team member’s name with discriminator.

New in version 1.3.

name
The team member’s username.

Type
str

id
The team member’s unique ID.

Type
int

discriminator
The team member’s discriminator. This is given when the username has conflicts.

Type
str

avatar
The avatar hash the team member has. Could be None.

Type
Optional[str]

bot
Specifies if the user is a bot account.

Type
bool

team
The team that the member is from.

Type
Team

membership_state
The membership state of the member (e.g. invited or accepted)

Type
TeamMembershipState

Voice Related
VoiceClient
class discord.VoiceClient
Attributes
average_latency
channel
endpoint
guild
latency
loop
session_id
source
token
user
Methods
connect
disconnect
is_connected
is_paused
is_playing
move_to
on_voice_server_update
on_voice_state_update
pause
play
resume
send_audio_packet
stop
Represents a Discord voice connection.

You do not create these, you typically get them from e.g. VoiceChannel.connect().


In order to use PCM based AudioSources, you must have the opus library installed on your system and loaded through opus.load_opus(). Otherwise, your AudioSources must be opus encoded (e.g. using FFmpegOpusAudio) or the library will not be able to transmit audio.

session_id
The voice connection session ID.

Type
str

token
The voice connection token.

Type
str

endpoint
The endpoint we are connecting to.

Type
str

channel
The voice channel connected to.

Type
abc.Connectable

loop
The event loop that the voice client is running on.

Type
asyncio.AbstractEventLoop

guild
The guild we’re connected to, if applicable.

Type
Optional[Guild]

user
The user connected to voice (i.e. ourselves).

Type
ClientUser

await on_voice_state_update(data)
This function is a coroutine.

An abstract method that is called when the client’s voice state has changed. This corresponds to VOICE_STATE_UPDATE.

Parameters
data (dict) –

The raw voice state payload.

await on_voice_server_update(data)
This function is a coroutine.

An abstract method that is called when initially connecting to voice. This corresponds to VOICE_SERVER_UPDATE.

Parameters
data (dict) –

The raw voice server update payload.

await connect(*, reconnect, timeout)
This function is a coroutine.

An abstract method called when the client initiates the connection request.

When a connection is requested initially, the library calls the constructor under __init__ and then calls connect(). If connect() fails at some point then disconnect() is called.

Within this method, to start the voice connection flow it is recommended to use Guild.change_voice_state() to start the flow. After which, on_voice_server_update() and on_voice_state_update() will be called. The order that these two are called is unspecified.

Parameters
timeout (float) – The timeout for the connection.

reconnect (bool) – Whether reconnection is expected.

latency
Latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds.

This could be referred to as the Discord Voice WebSocket latency and is an analogue of user’s voice latencies as seen in the Discord client.

New in version 1.4.

Type
float

average_latency
Average of most recent 20 HEARTBEAT latencies in seconds.

New in version 1.4.

Type
float

await disconnect(*, force=False)
This function is a coroutine.

Disconnects this voice client from voice.

await move_to(channel)
This function is a coroutine.

Moves you to a different voice channel.

Parameters
channel (abc.Snowflake) – The channel to move to. Must be a voice channel.

is_connected()
Indicates if the voice client is connected to voice.

play(source, *, after=None)
Plays an AudioSource.

The finalizer, after is called after the source has been exhausted or an error occurred.

If an error happens while the audio player is running, the exception is caught and the audio player is then stopped. If no after callback is passed, any caught exception will be displayed as if it were raised.

Parameters
source (AudioSource) – The audio source we’re reading from.

after (Callable[[Exception], Any]) – The finalizer that is called after the stream is exhausted. This function must have a single parameter, error, that denotes an optional exception that was raised during playing.

Raises
ClientException – Already playing audio or not connected.

TypeError – Source is not a AudioSource or after is not a callable.

OpusNotLoaded – Source is not opus encoded and opus is not loaded.

is_playing()
Indicates if we’re currently playing audio.

is_paused()
Indicates if we’re playing audio, but if we’re paused.

stop()
Stops playing audio.

pause()
Pauses the audio playing.

resume()
Resumes the audio playing.

source
The audio source being played, if playing.

This property can also be used to change the audio source currently being played.

Type
Optional[AudioSource]

send_audio_packet(data, *, encode=True)
Sends an audio packet composed of the data.

You must be connected to play audio.

Parameters
data (bytes) – The bytes-like object denoting PCM or Opus voice data.

encode (bool) – Indicates if data should be encoded into Opus.

Raises
ClientException – You are not connected.

opus.OpusError – Encoding the data failed.

VoiceProtocol
class discord.VoiceProtocol(client, channel)
Methods
cleanup
connect
disconnect
on_voice_server_update
on_voice_state_update
A class that represents the Discord voice protocol.

This is an abstract class. The library provides a concrete implementation under VoiceClient.

This class allows you to implement a protocol to allow for an external method of sending voice, such as Lavalink or a native library implementation.

These classes are passed to abc.Connectable.connect().

Parameters
client (Client) – The client (or its subclasses) that started the connection request.

channel (abc.Connectable) – The voice channel that is being connected to.

await on_voice_state_update(data)
This function is a coroutine.

An abstract method that is called when the client’s voice state has changed. This corresponds to VOICE_STATE_UPDATE.

Parameters
data (dict) –

The raw voice state payload.

await on_voice_server_update(data)
This function is a coroutine.

An abstract method that is called when initially connecting to voice. This corresponds to VOICE_SERVER_UPDATE.

Parameters
data (dict) –

The raw voice server update payload.

await connect(*, timeout, reconnect)
This function is a coroutine.

An abstract method called when the client initiates the connection request.

When a connection is requested initially, the library calls the constructor under __init__ and then calls connect(). If connect() fails at some point then disconnect() is called.

Within this method, to start the voice connection flow it is recommended to use Guild.change_voice_state() to start the flow. After which, on_voice_server_update() and on_voice_state_update() will be called. The order that these two are called is unspecified.

Parameters
timeout (float) – The timeout for the connection.

reconnect (bool) – Whether reconnection is expected.

await disconnect(*, force)
This function is a coroutine.

An abstract method called when the client terminates the connection.

See cleanup().

Parameters
force (bool) – Whether the disconnection was forced.

cleanup()
This method must be called to ensure proper clean-up during a disconnect.

It is advisable to call this from within disconnect() when you are completely done with the voice protocol instance.

This method removes it from the internal state cache that keeps track of currently alive voice clients. Failure to clean-up will cause subsequent connections to report that it’s still connected.

AudioSource
class discord.AudioSource
Methods
cleanup
is_opus
read
Represents an audio stream.

The audio stream can be Opus encoded or not, however if the audio stream is not Opus encoded then the audio format must be 16-bit 48KHz stereo PCM.


The audio source reads are done in a separate thread.

read()
Reads 20ms worth of audio.

Subclasses must implement this.

If the audio is complete, then returning an empty bytes-like object to signal this is the way to do so.

If is_opus() method returns True, then it must return 20ms worth of Opus encoded audio. Otherwise, it must be 20ms worth of 16-bit 48KHz stereo PCM, which is about 3,840 bytes per frame (20ms worth of audio).

Returns
A bytes like object that represents the PCM or Opus data.

Return type
bytes

is_opus()
Checks if the audio source is already encoded in Opus.

cleanup()
Called when clean-up is needed to be done.

Useful for clearing buffer data or processes after it is done playing audio.

PCMAudio
class discord.PCMAudio(stream)
Attributes
stream
Methods
read
Represents raw 16-bit 48KHz stereo PCM audio source.

stream
A file-like object that reads byte data representing raw PCM.

Type
file object

read()
Reads 20ms worth of audio.

Subclasses must implement this.

If the audio is complete, then returning an empty bytes-like object to signal this is the way to do so.

If is_opus() method returns True, then it must return 20ms worth of Opus encoded audio. Otherwise, it must be 20ms worth of 16-bit 48KHz stereo PCM, which is about 3,840 bytes per frame (20ms worth of audio).

Returns
A bytes like object that represents the PCM or Opus data.

Return type
bytes

FFmpegAudio
class discord.FFmpegAudio(source, *, executable='ffmpeg', args, **subprocess_kwargs)
Methods
cleanup
Represents an FFmpeg (or AVConv) based AudioSource.

User created AudioSources using FFmpeg differently from how FFmpegPCMAudio and FFmpegOpusAudio work should subclass this.

New in version 1.3.

cleanup()
Called when clean-up is needed to be done.

Useful for clearing buffer data or processes after it is done playing audio.

FFmpegPCMAudio
class discord.FFmpegPCMAudio(source, *, executable='ffmpeg', pipe=False, stderr=None, before_options=None, options=None)
Methods
is_opus
read
An audio source from FFmpeg (or AVConv).

This launches a sub-process to a specific input file given.


You must have the ffmpeg or avconv executable in your path environment variable in order for this to work.

Parameters
source (Union[str, io.BufferedIOBase]) – The input that ffmpeg will take and convert to PCM bytes. If pipe is True then this is a file-like object that is passed to the stdin of ffmpeg.

executable (str) – The executable name (and path) to use. Defaults to ffmpeg.

pipe (bool) – If True, denotes that source parameter will be passed to the stdin of ffmpeg. Defaults to False.

stderr (Optional[file object]) – A file-like object to pass to the Popen constructor. Could also be an instance of subprocess.PIPE.

before_options (Optional[str]) – Extra command line arguments to pass to ffmpeg before the -i flag.

options (Optional[str]) – Extra command line arguments to pass to ffmpeg after the -i flag.

Raises
ClientException – The subprocess failed to be created.

read()
Reads 20ms worth of audio.

Subclasses must implement this.

If the audio is complete, then returning an empty bytes-like object to signal this is the way to do so.

If is_opus() method returns True, then it must return 20ms worth of Opus encoded audio. Otherwise, it must be 20ms worth of 16-bit 48KHz stereo PCM, which is about 3,840 bytes per frame (20ms worth of audio).

Returns
A bytes like object that represents the PCM or Opus data.

Return type
bytes

is_opus()
Checks if the audio source is already encoded in Opus.

FFmpegOpusAudio
class discord.FFmpegOpusAudio(source, *, bitrate=128, codec=None, executable='ffmpeg', pipe=False, stderr=None, before_options=None, options=None)
Methods
FFmpegOpusAudio.from_probe
FFmpegOpusAudio.probe
is_opus
read
An audio source from FFmpeg (or AVConv).

This launches a sub-process to a specific input file given. However, rather than producing PCM packets like FFmpegPCMAudio does that need to be encoded to Opus, this class produces Opus packets, skipping the encoding step done by the library.

Alternatively, instead of instantiating this class directly, you can use FFmpegOpusAudio.from_probe() to probe for bitrate and codec information. This can be used to opportunistically skip pointless re-encoding of existing Opus audio data for a boost in performance at the cost of a short initial delay to gather the information. The same can be achieved by passing copy to the codec parameter, but only if you know that the input source is Opus encoded beforehand.

New in version 1.3.


You must have the ffmpeg or avconv executable in your path environment variable in order for this to work.

Parameters
source (Union[str, io.BufferedIOBase]) – The input that ffmpeg will take and convert to Opus bytes. If pipe is True then this is a file-like object that is passed to the stdin of ffmpeg.

bitrate (int) – The bitrate in kbps to encode the output to. Defaults to 128.

codec (Optional[str]) –

The codec to use to encode the audio data. Normally this would be just libopus, but is used by FFmpegOpusAudio.from_probe() to opportunistically skip pointlessly re-encoding Opus audio data by passing copy as the codec value. Any values other than copy, opus, or libopus will be considered libopus. Defaults to libopus.


Do not provide this parameter unless you are certain that the audio input is already Opus encoded. For typical use FFmpegOpusAudio.from_probe() should be used to determine the proper value for this parameter.

executable (str) – The executable name (and path) to use. Defaults to ffmpeg.

pipe (bool) – If True, denotes that source parameter will be passed to the stdin of ffmpeg. Defaults to False.

stderr (Optional[file object]) – A file-like object to pass to the Popen constructor. Could also be an instance of subprocess.PIPE.

before_options (Optional[str]) – Extra command line arguments to pass to ffmpeg before the -i flag.

options (Optional[str]) – Extra command line arguments to pass to ffmpeg after the -i flag.

Raises
ClientException – The subprocess failed to be created.

classmethod await from_probe(source, *, method=None, **kwargs)
This function is a coroutine.

A factory method that creates a FFmpegOpusAudio after probing the input source for audio codec and bitrate information.

Examples

Use this function to create an FFmpegOpusAudio instance instead of the constructor:

content_copy
source = await discord.FFmpegOpusAudio.from_probe("song.webm")
voice_client.play(source)
If you are on Windows and don’t have ffprobe installed, use the fallback method to probe using ffmpeg instead:

content_copy
source = await discord.FFmpegOpusAudio.from_probe("song.webm", method='fallback')
voice_client.play(source)
Using a custom method of determining codec and bitrate:

content_copy
def custom_probe(source, executable):
    # some analysis code here

    return codec, bitrate

source = await discord.FFmpegOpusAudio.from_probe("song.webm", method=custom_probe)
voice_client.play(source)
Parameters
source – Identical to the source parameter for the constructor.

method (Optional[Union[str, Callable[str, str]]]) – The probing method used to determine bitrate and codec information. As a string, valid values are native to use ffprobe (or avprobe) and fallback to use ffmpeg (or avconv). As a callable, it must take two string arguments, source and executable. Both parameters are the same values passed to this factory function. executable will default to ffmpeg if not provided as a keyword argument.

kwargs – The remaining parameters to be passed to the FFmpegOpusAudio constructor, excluding bitrate and codec.

Raises
AttributeError – Invalid probe method, must be 'native' or 'fallback'.

TypeError – Invalid value for probe parameter, must be str or a callable.

Returns
An instance of this class.

Return type
FFmpegOpusAudio

classmethod await probe(source, *, method=None, executable=None)
This function is a coroutine.

Probes the input source for bitrate and codec information.

Parameters
source – Identical to the source parameter for FFmpegOpusAudio.

method – Identical to the method parameter for FFmpegOpusAudio.from_probe().

executable (str) – Identical to the executable parameter for FFmpegOpusAudio.

Raises
AttributeError – Invalid probe method, must be 'native' or 'fallback'.

TypeError – Invalid value for probe parameter, must be str or a callable.

Returns
A 2-tuple with the codec and bitrate of the input source.

Return type
Tuple[Optional[str], Optional[int]]

read()
Reads 20ms worth of audio.

Subclasses must implement this.

If the audio is complete, then returning an empty bytes-like object to signal this is the way to do so.

If is_opus() method returns True, then it must return 20ms worth of Opus encoded audio. Otherwise, it must be 20ms worth of 16-bit 48KHz stereo PCM, which is about 3,840 bytes per frame (20ms worth of audio).

Returns
A bytes like object that represents the PCM or Opus data.

Return type
bytes

is_opus()
Checks if the audio source is already encoded in Opus.

PCMVolumeTransformer
class discord.PCMVolumeTransformer(original, volume=1.0)
Attributes
volume
Methods
cleanup
read
Transforms a previous AudioSource to have volume controls.

This does not work on audio sources that have AudioSource.is_opus() set to True.

Parameters
original (AudioSource) – The original AudioSource to transform.

volume (float) – The initial volume to set it to. See volume for more info.

Raises
TypeError – Not an audio source.

ClientException – The audio source is opus encoded.

volume
Retrieves or sets the volume as a floating point percentage (e.g. 1.0 for 100%).

cleanup()
Called when clean-up is needed to be done.

Useful for clearing buffer data or processes after it is done playing audio.

read()
Reads 20ms worth of audio.

Subclasses must implement this.

If the audio is complete, then returning an empty bytes-like object to signal this is the way to do so.

If is_opus() method returns True, then it must return 20ms worth of Opus encoded audio. Otherwise, it must be 20ms worth of 16-bit 48KHz stereo PCM, which is about 3,840 bytes per frame (20ms worth of audio).

Returns
A bytes like object that represents the PCM or Opus data.

Return type
bytes

Opus Library
discord.opus.load_opus(name)
Loads the libopus shared library for use with voice.

If this function is not called then the library uses the function ctypes.util.find_library() and then loads that one if available.

Not loading a library and attempting to use PCM based AudioSources will lead to voice not working.

This function propagates the exceptions thrown.


The bitness of the library must match the bitness of your python interpreter. If the library is 64-bit then your python interpreter must be 64-bit as well. Usually if there’s a mismatch in bitness then the load will throw an exception.


On Windows, this function should not need to be called as the binaries are automatically loaded.


On Windows, the .dll extension is not necessary. However, on Linux the full extension is required to load the library, e.g. libopus.so.1. On Linux however, ctypes.util.find_library() will usually find the library automatically without you having to call this.

Parameters
name (str) – The filename of the shared library.

discord.opus.is_loaded()
Function to check if opus lib is successfully loaded either via the ctypes.util.find_library() call of load_opus().

This must return True for voice to work.

Returns
Indicates if the opus library has been loaded.

Return type
bool

Event Reference
This section outlines the different types of events listened by Client.

There are two ways to register an event, the first way is through the use of Client.event(). The second way is through subclassing Client and overriding the specific events. For example:

content_copy
import discord

class MyClient(discord.Client):
    async def on_message(self, message):
        if message.author == self.user:
            return

        if message.content.startswith('$hello'):
            await message.channel.send('Hello World!')
If an event handler raises an exception, on_error() will be called to handle it, which defaults to print a traceback and ignoring the exception.


All the events must be a coroutine. If they aren’t, then you might get unexpected errors. In order to turn a function into a coroutine they must be async def functions.

discord.on_connect()
Called when the client has successfully connected to Discord. This is not the same as the client being fully prepared, see on_ready() for that.

The warnings on on_ready() also apply.

discord.on_shard_connect(shard_id)
Similar to on_connect() except used by AutoShardedClient to denote when a particular shard ID has connected to Discord.

New in version 1.4.

Parameters
shard_id (int) – The shard ID that has connected.

discord.on_disconnect()
Called when the client has disconnected from Discord, or a connection attempt to Discord has failed. This could happen either through the internet being disconnected, explicit calls to close, or Discord terminating the connection one way or the other.

This function can be called many times without a corresponding on_connect() call.

discord.on_shard_disconnect(shard_id)
Similar to on_disconnect() except used by AutoShardedClient to denote when a particular shard ID has disconnected from Discord.

New in version 1.4.

Parameters
shard_id (int) – The shard ID that has disconnected.

discord.on_ready()
Called when the client is done preparing the data received from Discord. Usually after login is successful and the Client.guilds and co. are filled up.


This function is not guaranteed to be the first event called. Likewise, this function is not guaranteed to only be called once. This library implements reconnection logic and thus will end up calling this event whenever a RESUME request fails.

discord.on_shard_ready(shard_id)
Similar to on_ready() except used by AutoShardedClient to denote when a particular shard ID has become ready.

Parameters
shard_id (int) – The shard ID that is ready.

discord.on_resumed()
Called when the client has resumed a session.

discord.on_shard_resumed(shard_id)
Similar to on_resumed() except used by AutoShardedClient to denote when a particular shard ID has resumed a session.

New in version 1.4.

Parameters
shard_id (int) – The shard ID that has resumed.

discord.on_error(event, *args, **kwargs)
Usually when an event raises an uncaught exception, a traceback is printed to stderr and the exception is ignored. If you want to change this behaviour and handle the exception for whatever reason yourself, this event can be overridden. Which, when done, will suppress the default action of printing the traceback.

The information of the exception raised and the exception itself can be retrieved with a standard call to sys.exc_info().

If you want exception to propagate out of the Client class you can define an on_error handler consisting of a single empty raise statement. Exceptions raised by on_error will not be handled in any way by Client.


on_error will only be dispatched to Client.event().

It will not be received by Client.wait_for(), or, if used, Bots listeners such as listen() or listener().

Parameters
event (str) – The name of the event that raised the exception.

args – The positional arguments for the event that raised the exception.

kwargs – The keyword arguments for the event that raised the exception.

discord.on_socket_raw_receive(msg)
Called whenever a message is received from the WebSocket, before it’s processed. This event is always dispatched when a message is received and the passed data is not processed in any way.

This is only really useful for grabbing the WebSocket stream and debugging purposes.


This is only for the messages received from the client WebSocket. The voice WebSocket will not trigger this event.

Parameters
msg (Union[bytes, str]) – The message passed in from the WebSocket library. Could be bytes for a binary message or str for a regular message.

discord.on_socket_raw_send(payload)
Called whenever a send operation is done on the WebSocket before the message is sent. The passed parameter is the message that is being sent to the WebSocket.

This is only really useful for grabbing the WebSocket stream and debugging purposes.


This is only for the messages sent from the client WebSocket. The voice WebSocket will not trigger this event.

Parameters
payload – The message that is about to be passed on to the WebSocket library. It can be bytes to denote a binary message or str to denote a regular text message.

discord.on_typing(channel, user, when)
Called when someone begins typing a message.

The channel parameter can be a abc.Messageable instance. Which could either be TextChannel, GroupChannel, or DMChannel.

If the channel is a TextChannel then the user parameter is a Member, otherwise it is a User.

This requires Intents.typing to be enabled.

Parameters
channel (abc.Messageable) – The location where the typing originated from.

user (Union[User, Member]) – The user that started typing.

when (datetime.datetime) – When the typing started as a naive datetime in UTC.

discord.on_message(message)
Called when a Message is created and sent.

This requires Intents.messages to be enabled.


Your bot’s own messages and private messages are sent through this event. This can lead cases of ‘recursion’ depending on how your bot was programmed. If you want the bot to not reply to itself, consider checking the user IDs. Note that Bot does not have this problem.

Parameters
message (Message) – The current message.

discord.on_message_delete(message)
Called when a message is deleted. If the message is not found in the internal message cache, then this event will not be called. Messages might not be in cache if the message is too old or the client is participating in high traffic guilds.

If this occurs increase the Client.max_messages attribute or use the on_raw_message_delete() event instead.

This requires Intents.messages to be enabled.

Parameters
message (Message) – The deleted message.

discord.on_bulk_message_delete(messages)
Called when messages are bulk deleted. If none of the messages deleted are found in the internal message cache, then this event will not be called. If individual messages were not found in the internal message cache, this event will still be called, but the messages not found will not be included in the messages list. Messages might not be in cache if the message is too old or the client is participating in high traffic guilds.

If this occurs increase the Client.max_messages attribute or use the on_raw_bulk_message_delete() event instead.

This requires Intents.messages to be enabled.

Parameters
messages (List[Message]) – The messages that have been deleted.

discord.on_raw_message_delete(payload)
Called when a message is deleted. Unlike on_message_delete(), this is called regardless of the message being in the internal message cache or not.

If the message is found in the message cache, it can be accessed via RawMessageDeleteEvent.cached_message

This requires Intents.messages to be enabled.

Parameters
payload (RawMessageDeleteEvent) – The raw event payload data.

discord.on_raw_bulk_message_delete(payload)
Called when a bulk delete is triggered. Unlike on_bulk_message_delete(), this is called regardless of the messages being in the internal message cache or not.

If the messages are found in the message cache, they can be accessed via RawBulkMessageDeleteEvent.cached_messages

This requires Intents.messages to be enabled.

Parameters
payload (RawBulkMessageDeleteEvent) – The raw event payload data.

discord.on_message_edit(before, after)
Called when a Message receives an update event. If the message is not found in the internal message cache, then these events will not be called. Messages might not be in cache if the message is too old or the client is participating in high traffic guilds.

If this occurs increase the Client.max_messages attribute or use the on_raw_message_edit() event instead.

The following non-exhaustive cases trigger this event:

A message has been pinned or unpinned.

The message content has been changed.

The message has received an embed.

For performance reasons, the embed server does not do this in a “consistent” manner.

The message’s embeds were suppressed or unsuppressed.

A call message has received an update to its participants or ending time.

This requires Intents.messages to be enabled.

Parameters
before (Message) – The previous version of the message.

after (Message) – The current version of the message.

discord.on_raw_message_edit(payload)
Called when a message is edited. Unlike on_message_edit(), this is called regardless of the state of the internal message cache.

If the message is found in the message cache, it can be accessed via RawMessageUpdateEvent.cached_message. The cached message represents the message before it has been edited. For example, if the content of a message is modified and triggers the on_raw_message_edit() coroutine, the RawMessageUpdateEvent.cached_message will return a Message object that represents the message before the content was modified.

Due to the inherently raw nature of this event, the data parameter coincides with the raw data given by the gateway.

Since the data payload can be partial, care must be taken when accessing stuff in the dictionary. One example of a common case of partial data is when the 'content' key is inaccessible. This denotes an “embed” only edit, which is an edit in which only the embeds are updated by the Discord embed server.

This requires Intents.messages to be enabled.

Parameters
payload (RawMessageUpdateEvent) – The raw event payload data.

discord.on_reaction_add(reaction, user)
Called when a message has a reaction added to it. Similar to on_message_edit(), if the message is not found in the internal message cache, then this event will not be called. Consider using on_raw_reaction_add() instead.


To get the Message being reacted, access it via Reaction.message.

This requires Intents.reactions to be enabled.


This doesn’t require Intents.members within a guild context, but due to Discord not providing updated user information in a direct message it’s required for direct messages to receive this event. Consider using on_raw_reaction_add() if you need this and do not otherwise want to enable the members intent.

Parameters
reaction (Reaction) – The current state of the reaction.

user (Union[Member, User]) – The user who added the reaction.

discord.on_raw_reaction_add(payload)
Called when a message has a reaction added. Unlike on_reaction_add(), this is called regardless of the state of the internal message cache.

This requires Intents.reactions to be enabled.

Parameters
payload (RawReactionActionEvent) – The raw event payload data.

discord.on_reaction_remove(reaction, user)
Called when a message has a reaction removed from it. Similar to on_message_edit, if the message is not found in the internal message cache, then this event will not be called.


To get the message being reacted, access it via Reaction.message.

This requires both Intents.reactions and Intents.members to be enabled.


Consider using on_raw_reaction_remove() if you need this and do not want to enable the members intent.

Parameters
reaction (Reaction) – The current state of the reaction.

user (Union[Member, User]) – The user who added the reaction.

discord.on_raw_reaction_remove(payload)
Called when a message has a reaction removed. Unlike on_reaction_remove(), this is called regardless of the state of the internal message cache.

This requires Intents.reactions to be enabled.

Parameters
payload (RawReactionActionEvent) – The raw event payload data.

discord.on_reaction_clear(message, reactions)
Called when a message has all its reactions removed from it. Similar to on_message_edit(), if the message is not found in the internal message cache, then this event will not be called. Consider using on_raw_reaction_clear() instead.

This requires Intents.reactions to be enabled.

Parameters
message (Message) – The message that had its reactions cleared.

reactions (List[Reaction]) – The reactions that were removed.

discord.on_raw_reaction_clear(payload)
Called when a message has all its reactions removed. Unlike on_reaction_clear(), this is called regardless of the state of the internal message cache.

This requires Intents.reactions to be enabled.

Parameters
payload (RawReactionClearEvent) – The raw event payload data.

discord.on_reaction_clear_emoji(reaction)
Called when a message has a specific reaction removed from it. Similar to on_message_edit(), if the message is not found in the internal message cache, then this event will not be called. Consider using on_raw_reaction_clear_emoji() instead.

This requires Intents.reactions to be enabled.

New in version 1.3.

Parameters
reaction (Reaction) – The reaction that got cleared.

discord.on_raw_reaction_clear_emoji(payload)
Called when a message has a specific reaction removed from it. Unlike on_reaction_clear_emoji() this is called regardless of the state of the internal message cache.

This requires Intents.reactions to be enabled.

New in version 1.3.

Parameters
payload (RawReactionClearEmojiEvent) – The raw event payload data.

discord.on_private_channel_delete(channel)
discord.on_private_channel_create(channel)
Called whenever a private channel is deleted or created.

This requires Intents.messages to be enabled.

Parameters
channel (abc.PrivateChannel) – The private channel that got created or deleted.

discord.on_private_channel_update(before, after)
Called whenever a private group DM is updated. e.g. changed name or topic.

This requires Intents.messages to be enabled.

Parameters
before (GroupChannel) – The updated group channel’s old info.

after (GroupChannel) – The updated group channel’s new info.

discord.on_private_channel_pins_update(channel, last_pin)
Called whenever a message is pinned or unpinned from a private channel.

Parameters
channel (abc.PrivateChannel) – The private channel that had its pins updated.

last_pin (Optional[datetime.datetime]) – The latest message that was pinned as a naive datetime in UTC. Could be None.

discord.on_guild_channel_delete(channel)
discord.on_guild_channel_create(channel)
Called whenever a guild channel is deleted or created.

Note that you can get the guild from guild.

This requires Intents.guilds to be enabled.

Parameters
channel (abc.GuildChannel) – The guild channel that got created or deleted.

discord.on_guild_channel_update(before, after)
Called whenever a guild channel is updated. e.g. changed name, topic, permissions.

This requires Intents.guilds to be enabled.

Parameters
before (abc.GuildChannel) – The updated guild channel’s old info.

after (abc.GuildChannel) – The updated guild channel’s new info.

discord.on_guild_channel_pins_update(channel, last_pin)
Called whenever a message is pinned or unpinned from a guild channel.

This requires Intents.guilds to be enabled.

Parameters
channel (abc.GuildChannel) – The guild channel that had its pins updated.

last_pin (Optional[datetime.datetime]) – The latest message that was pinned as a naive datetime in UTC. Could be None.

discord.on_guild_integrations_update(guild)
New in version 1.4.

Called whenever an integration is created, modified, or removed from a guild.

This requires Intents.integrations to be enabled.

Parameters
guild (Guild) – The guild that had its integrations updated.

discord.on_webhooks_update(channel)
Called whenever a webhook is created, modified, or removed from a guild channel.

This requires Intents.webhooks to be enabled.

Parameters
channel (abc.GuildChannel) – The channel that had its webhooks updated.

discord.on_member_join(member)
discord.on_member_remove(member)
Called when a Member leaves or joins a Guild.

This requires Intents.members to be enabled.

Parameters
member (Member) – The member who joined or left.

discord.on_member_update(before, after)
Called when a Member updates their profile.

This is called when one or more of the following things change:

status

activity

nickname

roles

pending

This requires Intents.members to be enabled.

Parameters
before (Member) – The updated member’s old info.

after (Member) – The updated member’s updated info.

discord.on_user_update(before, after)
Called when a User updates their profile.

This is called when one or more of the following things change:

avatar

username

discriminator

This requires Intents.members to be enabled.

Parameters
before (User) – The updated user’s old info.

after (User) – The updated user’s updated info.

discord.on_guild_join(guild)
Called when a Guild is either created by the Client or when the Client joins a guild.

This requires Intents.guilds to be enabled.

Parameters
guild (Guild) – The guild that was joined.

discord.on_guild_remove(guild)
Called when a Guild is removed from the Client.

This happens through, but not limited to, these circumstances:

The client got banned.

The client got kicked.

The client left the guild.

The client or the guild owner deleted the guild.

In order for this event to be invoked then the Client must have been part of the guild to begin with. (i.e. it is part of Client.guilds)

This requires Intents.guilds to be enabled.

Parameters
guild (Guild) – The guild that got removed.

discord.on_guild_update(before, after)
Called when a Guild updates, for example:

Changed name

Changed AFK channel

Changed AFK timeout

etc

This requires Intents.guilds to be enabled.

Parameters
before (Guild) – The guild prior to being updated.

after (Guild) – The guild after being updated.

discord.on_guild_role_create(role)
discord.on_guild_role_delete(role)
Called when a Guild creates or deletes a new Role.

To get the guild it belongs to, use Role.guild.

This requires Intents.guilds to be enabled.

Parameters
role (Role) – The role that was created or deleted.

discord.on_guild_role_update(before, after)
Called when a Role is changed guild-wide.

This requires Intents.guilds to be enabled.

Parameters
before (Role) – The updated role’s old info.

after (Role) – The updated role’s updated info.

discord.on_guild_emojis_update(guild, before, after)
Called when a Guild adds or removes Emoji.

This requires Intents.emojis to be enabled.

Parameters
guild (Guild) – The guild who got their emojis updated.

before (Sequence[Emoji]) – A list of emojis before the update.

after (Sequence[Emoji]) – A list of emojis after the update.

discord.on_guild_available(guild)
discord.on_guild_unavailable(guild)
Called when a guild becomes available or unavailable. The guild must have existed in the Client.guilds cache.

This requires Intents.guilds to be enabled.

Parameters
guild – The Guild that has changed availability.

discord.on_voice_state_update(member, before, after)
Called when a Member changes their VoiceState.

The following, but not limited to, examples illustrate when this event is called:

A member joins a voice channel.

A member leaves a voice channel.

A member is muted or deafened by their own accord.

A member is muted or deafened by a guild administrator.

This requires Intents.voice_states to be enabled.

Parameters
member (Member) – The member whose voice states changed.

before (VoiceState) – The voice state prior to the changes.

after (VoiceState) – The voice state after the changes.

discord.on_member_ban(guild, user)
Called when user gets banned from a Guild.

This requires Intents.bans to be enabled.

Parameters
guild (Guild) – The guild the user got banned from.

user (Union[User, Member]) – The user that got banned. Can be either User or Member depending if the user was in the guild or not at the time of removal.

discord.on_member_unban(guild, user)
Called when a User gets unbanned from a Guild.

This requires Intents.bans to be enabled.

Parameters
guild (Guild) – The guild the user got unbanned from.

user (User) – The user that got unbanned.

discord.on_invite_create(invite)
Called when an Invite is created. You must have the manage_channels permission to receive this.

New in version 1.3.


There is a rare possibility that the Invite.guild and Invite.channel attributes will be of Object rather than the respective models.

This requires Intents.invites to be enabled.

Parameters
invite (Invite) – The invite that was created.

discord.on_invite_delete(invite)
Called when an Invite is deleted. You must have the manage_channels permission to receive this.

New in version 1.3.


There is a rare possibility that the Invite.guild and Invite.channel attributes will be of Object rather than the respective models.

Outside of those two attributes, the only other attribute guaranteed to be filled by the Discord gateway for this event is Invite.code.

This requires Intents.invites to be enabled.

Parameters
invite (Invite) – The invite that was deleted.

discord.on_group_join(channel, user)
discord.on_group_remove(channel, user)
Called when someone joins or leaves a GroupChannel.

Parameters
channel (GroupChannel) – The group that the user joined or left.

user (User) – The user that joined or left.

discord.on_relationship_add(relationship)
discord.on_relationship_remove(relationship)
Called when a Relationship is added or removed from the ClientUser.

Deprecated since version 1.7.

Parameters
relationship (Relationship) – The relationship that was added or removed.

discord.on_relationship_update(before, after)
Called when a Relationship is updated, e.g. when you block a friend or a friendship is accepted.

Deprecated since version 1.7.

Parameters
before (Relationship) – The previous relationship status.

after (Relationship) – The updated relationship status.

Utility Functions
discord.utils.find(predicate, seq)
A helper to return the first element found in the sequence that meets the predicate. For example:

content_copy
member = discord.utils.find(lambda m: m.name == 'Mighty', channel.guild.members)
would find the first Member whose name is ‘Mighty’ and return it. If an entry is not found, then None is returned.

This is different from filter() due to the fact it stops the moment it finds a valid entry.

Parameters
predicate – A function that returns a boolean-like result.

seq (iterable) – The iterable to search through.

discord.utils.get(iterable, **attrs)
A helper that returns the first element in the iterable that meets all the traits passed in attrs. This is an alternative for find().

When multiple attributes are specified, they are checked using logical AND, not logical OR. Meaning they have to meet every attribute passed in and not one of them.

To have a nested attribute search (i.e. search by x.y) then pass in x__y as the keyword argument.

If nothing is found that matches the attributes passed, then None is returned.

Examples

Basic usage:

content_copy
member = discord.utils.get(message.guild.members, name='Foo')
Multiple attribute matching:

content_copy
channel = discord.utils.get(guild.voice_channels, name='Foo', bitrate=64000)
Nested attribute matching:

content_copy
channel = discord.utils.get(client.get_all_channels(), guild__name='Cool', name='general')
Parameters
iterable – An iterable to search through.

**attrs – Keyword arguments that denote attributes to search with.

discord.utils.snowflake_time(id)
Parameters
id (int) – The snowflake ID.

Returns
The creation date in UTC of a Discord snowflake ID.

Return type
datetime.datetime

discord.utils.oauth_url(client_id, permissions=None, guild=None, redirect_uri=None, scopes=None)
A helper function that returns the OAuth2 URL for inviting the bot into guilds.

Parameters
client_id (str) – The client ID for your bot.

permissions (Permissions) – The permissions you’re requesting. If not given then you won’t be requesting any permissions.

guild (Guild) – The guild to pre-select in the authorization screen, if available.

redirect_uri (str) – An optional valid redirect URI.

scopes (Iterable[str]) –

An optional valid list of scopes. Defaults to ('bot',).

New in version 1.7.

Returns
The OAuth2 URL for inviting the bot into guilds.

Return type
str

discord.utils.remove_markdown(text, *, ignore_links=True)
A helper function that removes markdown characters.

New in version 1.7.


This function is not markdown aware and may remove meaning from the original text. For example, if the input contains 10 * 5 then it will be converted into 10  5.

Parameters
text (str) – The text to remove markdown from.

ignore_links (bool) – Whether to leave links alone when removing markdown. For example, if a URL in the text contains characters such as _ then it will be left alone. Defaults to True.

Returns
The text with the markdown special characters removed.

Return type
str

discord.utils.escape_markdown(text, *, as_needed=False, ignore_links=True)
A helper function that escapes Discord’s markdown.

Parameters
text (str) – The text to escape markdown from.

as_needed (bool) – Whether to escape the markdown characters as needed. This means that it does not escape extraneous characters if it’s not necessary, e.g. **hello** is escaped into \*\*hello** instead of \*\*hello\*\*. Note however that this can open you up to some clever syntax abuse. Defaults to False.

ignore_links (bool) – Whether to leave links alone when escaping markdown. For example, if a URL in the text contains characters such as _ then it will be left alone. This option is not supported with as_needed. Defaults to True.

Returns
The text with the markdown special characters escaped with a slash.

Return type
str

discord.utils.escape_mentions(text)
A helper function that escapes everyone, here, role, and user mentions.


This does not include channel mentions.


For more granular control over what mentions should be escaped within messages, refer to the AllowedMentions class.

Parameters
text (str) – The text to escape mentions from.

Returns
The text with the mentions removed.

Return type
str

discord.utils.resolve_invite(invite)
Resolves an invite from a Invite, URL or code.

Parameters
invite (Union[Invite, str]) – The invite.

Returns
The invite code.

Return type
str

discord.utils.resolve_template(code)
Resolves a template code from a Template, URL or code.

New in version 1.4.

Parameters
code (Union[Template, str]) – The code.

Returns
The template code.

Return type
str

await discord.utils.sleep_until(when, result=None)
This function is a coroutine.

Sleep until a specified time.

If the time supplied is in the past this function will yield instantly.

New in version 1.3.

Parameters
when (datetime.datetime) – The timestamp in which to sleep until. If the datetime is naive then it is assumed to be in UTC.

result (Any) – If provided is returned to the caller when the coroutine completes.

Profile
class discord.Profile
A namedtuple representing a user’s Discord public profile.

Deprecated since version 1.7.

user
The User the profile belongs to.

Type
User

premium
A boolean indicating if the user has premium (i.e. Discord Nitro).

Type
bool

nitro
An alias for premium.

premium_since
A naive UTC datetime indicating how long the user has been premium since. This could be None if not applicable.

Type
datetime.datetime

staff
A boolean indicating if the user is Discord Staff.

Type
bool

partner
A boolean indicating if the user is a Discord Partner.

Type
bool

bug_hunter
A boolean indicating if the user is a Bug Hunter.

Type
bool

early_supporter
A boolean indicating if the user has had premium before 10 October, 2018.

Type
bool

hypesquad
A boolean indicating if the user is in Discord HypeSquad.

Type
bool

hypesquad_houses
A list of HypeSquadHouse that the user is in.

Type
List[HypeSquadHouse]

team_user
A boolean indicating if the user is in part of a team.

New in version 1.3.

Type
bool

system
A boolean indicating if the user is officially part of the Discord urgent message system.

New in version 1.3.

Type
bool

mutual_guilds
A list of Guild that the ClientUser shares with this user.

Type
List[Guild]

connected_accounts
A list of dict objects indicating the accounts the user has connected.

An example entry can be seen below:

content_copy
{"type": "twitch", "id": "92473777", "name": "discordapp"}
Type
List[Dict[str, str]]

Enumerations
The API provides some enumerations for certain types of strings to avoid the API from being stringly typed in case the strings change in the future.

All enumerations are subclasses of an internal class which mimics the behaviour of enum.Enum.

class discord.ChannelType
Specifies the type of channel.

text
A text channel.

voice
A voice channel.

private
A private text channel. Also called a direct message.

group
A private group text channel.

category
A category channel.

news
A guild news channel.

store
A guild store channel.

stage_voice
A guild stage voice channel.

New in version 1.7.

class discord.MessageType
Specifies the type of Message. This is used to denote if a message is to be interpreted as a system message or a regular message.

x == y
Checks if two messages are equal.

x != y
Checks if two messages are not equal.

default
The default message type. This is the same as regular messages.

recipient_add
The system message when a recipient is added to a group private message, i.e. a private channel of type ChannelType.group.

recipient_remove
The system message when a recipient is removed from a group private message, i.e. a private channel of type ChannelType.group.

call
The system message denoting call state, e.g. missed call, started call, etc.

channel_name_change
The system message denoting that a channel’s name has been changed.

channel_icon_change
The system message denoting that a channel’s icon has been changed.

pins_add
The system message denoting that a pinned message has been added to a channel.

new_member
The system message denoting that a new member has joined a Guild.

premium_guild_subscription
The system message denoting that a member has “nitro boosted” a guild.

premium_guild_tier_1
The system message denoting that a member has “nitro boosted” a guild and it achieved level 1.

premium_guild_tier_2
The system message denoting that a member has “nitro boosted” a guild and it achieved level 2.

premium_guild_tier_3
The system message denoting that a member has “nitro boosted” a guild and it achieved level 3.

channel_follow_add
The system message denoting that an announcement channel has been followed.

New in version 1.3.

guild_stream
The system message denoting that a member is streaming in the guild.

New in version 1.7.

guild_discovery_disqualified
The system message denoting that the guild is no longer eligible for Server Discovery.

New in version 1.7.

guild_discovery_requalified
The system message denoting that the guild has become eligible again for Server Discovery.

New in version 1.7.

guild_discovery_grace_period_initial_warning
The system message denoting that the guild has failed to meet the Server Discovery requirements for one week.

New in version 1.7.

guild_discovery_grace_period_final_warning
The system message denoting that the guild has failed to meet the Server Discovery requirements for 3 weeks in a row.

New in version 1.7.

class discord.ActivityType
Specifies the type of Activity. This is used to check how to interpret the activity itself.

unknown
An unknown activity type. This should generally not happen.

playing
A “Playing” activity type.

streaming
A “Streaming” activity type.

listening
A “Listening” activity type.

watching
A “Watching” activity type.

custom
A custom activity type.

competing
A competing activity type.

New in version 1.5.

class discord.HypeSquadHouse
Specifies the HypeSquad house a user belongs to.

bravery
The “Bravery” house.

brilliance
The “Brilliance” house.

balance
The “Balance” house.

class discord.VoiceRegion
Specifies the region a voice server belongs to.

amsterdam
The Amsterdam region.

brazil
The Brazil region.

dubai
The Dubai region.

New in version 1.3.

eu_central
The EU Central region.

eu_west
The EU West region.

europe
The Europe region.

New in version 1.3.

frankfurt
The Frankfurt region.

hongkong
The Hong Kong region.

india
The India region.

New in version 1.2.

japan
The Japan region.

london
The London region.

russia
The Russia region.

singapore
The Singapore region.

southafrica
The South Africa region.

south_korea
The South Korea region.

sydney
The Sydney region.

us_central
The US Central region.

us_east
The US East region.

us_south
The US South region.

us_west
The US West region.

vip_amsterdam
The Amsterdam region for VIP guilds.

vip_us_east
The US East region for VIP guilds.

vip_us_west
The US West region for VIP guilds.

class discord.VerificationLevel
Specifies a Guild’s verification level, which is the criteria in which a member must meet before being able to send messages to the guild.

x == y
Checks if two verification levels are equal.

x != y
Checks if two verification levels are not equal.

x > y
Checks if a verification level is higher than another.

x < y
Checks if a verification level is lower than another.

x >= y
Checks if a verification level is higher or equal to another.

x <= y
Checks if a verification level is lower or equal to another.

none
No criteria set.

low
Member must have a verified email on their Discord account.

medium
Member must have a verified email and be registered on Discord for more than five minutes.

high
Member must have a verified email, be registered on Discord for more than five minutes, and be a member of the guild itself for more than ten minutes.

table_flip
An alias for high.

extreme
Member must have a verified phone on their Discord account.

double_table_flip
An alias for extreme.

very_high
An alias for extreme.

New in version 1.4.

class discord.NotificationLevel
Specifies whether a Guild has notifications on for all messages or mentions only by default.

all_messages
Members receive notifications for every message regardless of them being mentioned.

only_mentions
Members receive notifications for messages they are mentioned in.

class discord.ContentFilter
Specifies a Guild’s explicit content filter, which is the machine learning algorithms that Discord uses to detect if an image contains pornography or otherwise explicit content.

x == y
Checks if two content filter levels are equal.

x != y
Checks if two content filter levels are not equal.

x > y
Checks if a content filter level is higher than another.

x < y
Checks if a content filter level is lower than another.

x >= y
Checks if a content filter level is higher or equal to another.

x <= y
Checks if a content filter level is lower or equal to another.

disabled
The guild does not have the content filter enabled.

no_role
The guild has the content filter enabled for members without a role.

all_members
The guild has the content filter enabled for every member.

class discord.Status
Specifies a Member ‘s status.

online
The member is online.

offline
The member is offline.

idle
The member is idle.

dnd
The member is “Do Not Disturb”.

do_not_disturb
An alias for dnd.

invisible
The member is “invisible”. In reality, this is only used in sending a presence a la Client.change_presence(). When you receive a user’s presence this will be offline instead.

class discord.AuditLogAction
Represents the type of action being done for a AuditLogEntry, which is retrievable via Guild.audit_logs().

guild_update
The guild has updated. Things that trigger this include:

Changing the guild vanity URL

Changing the guild invite splash

Changing the guild AFK channel or timeout

Changing the guild voice server region

Changing the guild icon

Changing the guild moderation settings

Changing things related to the guild widget

When this is the action, the type of target is the Guild.

Possible attributes for AuditLogDiff:

afk_channel

system_channel

afk_timeout

default_message_notifications

explicit_content_filter

mfa_level

name

owner

splash

vanity_url_code

channel_create
A new channel was created.

When this is the action, the type of target is either a abc.GuildChannel or Object with an ID.

A more filled out object in the Object case can be found by using after.

Possible attributes for AuditLogDiff:

name

type

overwrites

channel_update
A channel was updated. Things that trigger this include:

The channel name or topic was changed

The channel bitrate was changed

When this is the action, the type of target is the abc.GuildChannel or Object with an ID.

A more filled out object in the Object case can be found by using after or before.

Possible attributes for AuditLogDiff:

name

type

position

overwrites

topic

bitrate

channel_delete
A channel was deleted.

When this is the action, the type of target is an Object with an ID.

A more filled out object can be found by using the before object.

Possible attributes for AuditLogDiff:

name

type

overwrites

overwrite_create
A channel permission overwrite was created.

When this is the action, the type of target is the abc.GuildChannel or Object with an ID.

When this is the action, the type of extra is either a Role or Member. If the object is not found then it is a Object with an ID being filled, a name, and a type attribute set to either 'role' or 'member' to help dictate what type of ID it is.

Possible attributes for AuditLogDiff:

deny

allow

id

type

overwrite_update
A channel permission overwrite was changed, this is typically when the permission values change.

See overwrite_create for more information on how the target and extra fields are set.

Possible attributes for AuditLogDiff:

deny

allow

id

type

overwrite_delete
A channel permission overwrite was deleted.

See overwrite_create for more information on how the target and extra fields are set.

Possible attributes for AuditLogDiff:

deny

allow

id

type

kick
A member was kicked.

When this is the action, the type of target is the User who got kicked.

When this is the action, changes is empty.

member_prune
A member prune was triggered.

When this is the action, the type of target is set to None.

When this is the action, the type of extra is set to an unspecified proxy object with two attributes:

delete_members_days: An integer specifying how far the prune was.

members_removed: An integer specifying how many members were removed.

When this is the action, changes is empty.

ban
A member was banned.

When this is the action, the type of target is the User who got banned.

When this is the action, changes is empty.

unban
A member was unbanned.

When this is the action, the type of target is the User who got unbanned.

When this is the action, changes is empty.

member_update
A member has updated. This triggers in the following situations:

A nickname was changed

They were server muted or deafened (or it was undo’d)

When this is the action, the type of target is the Member or User who got updated.

Possible attributes for AuditLogDiff:

nick

mute

deaf

member_role_update
A member’s role has been updated. This triggers when a member either gains a role or losses a role.

When this is the action, the type of target is the Member or User who got the role.

Possible attributes for AuditLogDiff:

roles

member_move
A member’s voice channel has been updated. This triggers when a member is moved to a different voice channel.

When this is the action, the type of extra is set to an unspecified proxy object with two attributes:

channel: A TextChannel or Object with the channel ID where the members were moved.

count: An integer specifying how many members were moved.

New in version 1.3.

member_disconnect
A member’s voice state has changed. This triggers when a member is force disconnected from voice.

When this is the action, the type of extra is set to an unspecified proxy object with one attribute:

count: An integer specifying how many members were disconnected.

New in version 1.3.

bot_add
A bot was added to the guild.

When this is the action, the type of target is the Member or User which was added to the guild.

New in version 1.3.

role_create
A new role was created.

When this is the action, the type of target is the Role or a Object with the ID.

Possible attributes for AuditLogDiff:

colour

mentionable

hoist

name

permissions

role_update
A role was updated. This triggers in the following situations:

The name has changed

The permissions have changed

The colour has changed

Its hoist/mentionable state has changed

When this is the action, the type of target is the Role or a Object with the ID.

Possible attributes for AuditLogDiff:

colour

mentionable

hoist

name

permissions

role_delete
A role was deleted.

When this is the action, the type of target is the Role or a Object with the ID.

Possible attributes for AuditLogDiff:

colour

mentionable

hoist

name

permissions

invite_create
An invite was created.

When this is the action, the type of target is the Invite that was created.

Possible attributes for AuditLogDiff:

max_age

code

temporary

inviter

channel

uses

max_uses

invite_update
An invite was updated.

When this is the action, the type of target is the Invite that was updated.

invite_delete
An invite was deleted.

When this is the action, the type of target is the Invite that was deleted.

Possible attributes for AuditLogDiff:

max_age

code

temporary

inviter

channel

uses

max_uses

webhook_create
A webhook was created.

When this is the action, the type of target is the Object with the webhook ID.

Possible attributes for AuditLogDiff:

channel

name

type (always set to 1 if so)

webhook_update
A webhook was updated. This trigger in the following situations:

The webhook name changed

The webhook channel changed

When this is the action, the type of target is the Object with the webhook ID.

Possible attributes for AuditLogDiff:

channel

name

webhook_delete
A webhook was deleted.

When this is the action, the type of target is the Object with the webhook ID.

Possible attributes for AuditLogDiff:

channel

name

type (always set to 1 if so)

emoji_create
An emoji was created.

When this is the action, the type of target is the Emoji or Object with the emoji ID.

Possible attributes for AuditLogDiff:

name

emoji_update
An emoji was updated. This triggers when the name has changed.

When this is the action, the type of target is the Emoji or Object with the emoji ID.

Possible attributes for AuditLogDiff:

name

emoji_delete
An emoji was deleted.

When this is the action, the type of target is the Object with the emoji ID.

Possible attributes for AuditLogDiff:

name

message_delete
A message was deleted by a moderator. Note that this only triggers if the message was deleted by someone other than the author.

When this is the action, the type of target is the Member or User who had their message deleted.

When this is the action, the type of extra is set to an unspecified proxy object with two attributes:

count: An integer specifying how many messages were deleted.

channel: A TextChannel or Object with the channel ID where the message got deleted.

message_bulk_delete
Messages were bulk deleted by a moderator.

When this is the action, the type of target is the TextChannel or Object with the ID of the channel that was purged.

When this is the action, the type of extra is set to an unspecified proxy object with one attribute:

count: An integer specifying how many messages were deleted.

New in version 1.3.

message_pin
A message was pinned in a channel.

When this is the action, the type of target is the Member or User who had their message pinned.

When this is the action, the type of extra is set to an unspecified proxy object with two attributes:

channel: A TextChannel or Object with the channel ID where the message was pinned.

message_id: the ID of the message which was pinned.

New in version 1.3.

message_unpin
A message was unpinned in a channel.

When this is the action, the type of target is the Member or User who had their message unpinned.

When this is the action, the type of extra is set to an unspecified proxy object with two attributes:

channel: A TextChannel or Object with the channel ID where the message was unpinned.

message_id: the ID of the message which was unpinned.

New in version 1.3.

integration_create
A guild integration was created.

When this is the action, the type of target is the Object with the integration ID of the integration which was created.

New in version 1.3.

integration_update
A guild integration was updated.

When this is the action, the type of target is the Object with the integration ID of the integration which was updated.

New in version 1.3.

integration_delete
A guild integration was deleted.

When this is the action, the type of target is the Object with the integration ID of the integration which was deleted.

New in version 1.3.

class discord.AuditLogActionCategory
Represents the category that the AuditLogAction belongs to.

This can be retrieved via AuditLogEntry.category.

create
The action is the creation of something.

delete
The action is the deletion of something.

update
The action is the update of something.

class discord.RelationshipType
Specifies the type of Relationship.

Deprecated since version 1.7.


This only applies to users, not bots.

friend
You are friends with this user.

blocked
You have blocked this user.

incoming_request
The user has sent you a friend request.

outgoing_request
You have sent a friend request to this user.

class discord.UserContentFilter
Represents the options found in Settings > Privacy & Safety > Safe Direct Messaging in the Discord client.

Deprecated since version 1.7.


This only applies to users, not bots.

all_messages
Scan all direct messages from everyone.

friends
Scan all direct messages that aren’t from friends.

disabled
Don’t scan any direct messages.

class discord.FriendFlags
Represents the options found in Settings > Privacy & Safety > Who Can Add You As A Friend in the Discord client.

Deprecated since version 1.7.


This only applies to users, not bots.

noone
This allows no-one to add you as a friend.

mutual_guilds
This allows guild members to add you as a friend.

mutual_friends
This allows friends of friends to add you as a friend.

guild_and_friends
This is a superset of mutual_guilds and mutual_friends.

everyone
This allows everyone to add you as a friend.

class discord.PremiumType
Represents the user’s Discord Nitro subscription type.

Deprecated since version 1.7.


This only applies to users, not bots.

nitro
Represents the Discord Nitro with Nitro-exclusive games.

nitro_classic
Represents the Discord Nitro with no Nitro-exclusive games.

class discord.Theme
Represents the theme synced across all Discord clients.

Deprecated since version 1.7.


This only applies to users, not bots.

light
Represents the Light theme on Discord.

dark
Represents the Dark theme on Discord.

class discord.TeamMembershipState
Represents the membership state of a team member retrieved through Bot.application_info().

New in version 1.3.

invited
Represents an invited member.

accepted
Represents a member currently in the team.

class discord.WebhookType
Represents the type of webhook that can be received.

New in version 1.3.

incoming
Represents a webhook that can post messages to channels with a token.

channel_follower
Represents a webhook that is internally managed by Discord, used for following channels.

class discord.ExpireBehaviour
Represents the behaviour the Integration should perform when a user’s subscription has finished.

There is an alias for this called ExpireBehavior.

New in version 1.4.

remove_role
This will remove the Integration.role from the user when their subscription is finished.

kick
This will kick the user when their subscription is finished.

class discord.DefaultAvatar
Represents the default avatar of a Discord User

blurple
Represents the default avatar with the color blurple. See also Colour.blurple

grey
Represents the default avatar with the color grey. See also Colour.greyple

gray
An alias for grey.

green
Represents the default avatar with the color green. See also Colour.green

orange
Represents the default avatar with the color orange. See also Colour.orange

red
Represents the default avatar with the color red. See also Colour.red

class discord.StickerType
Represents the type of sticker images.

New in version 1.6.

png
Represents a sticker with a png image.

apng
Represents a sticker with an apng image.

lottie
Represents a sticker with a lottie image.

Async Iterator
Some API functions return an “async iterator”. An async iterator is something that is capable of being used in an async for statement.

These async iterators can be used as follows:

content_copy
async for elem in channel.history():
    # do stuff with elem here
Certain utilities make working with async iterators easier, detailed below.

class discord.AsyncIterator
Represents the “AsyncIterator” concept. Note that no such class exists, it is purely abstract.

async for x in y
Iterates over the contents of the async iterator.

await next()
This function is a coroutine.

Advances the iterator by one, if possible. If no more items are found then this raises NoMoreItems.

await get(**attrs)
This function is a coroutine.

Similar to utils.get() except run over the async iterator.

Getting the last message by a user named ‘Dave’ or None:

content_copy
msg = await channel.history().get(author__name='Dave')
await find(predicate)
This function is a coroutine.

Similar to utils.find() except run over the async iterator.

Unlike utils.find(), the predicate provided can be a coroutine.

Getting the last audit log with a reason or None:

content_copy
def predicate(event):
    return event.reason is not None

event = await guild.audit_logs().find(predicate)
Parameters
predicate – The predicate to use. Could be a coroutine.

Returns
The first element that returns True for the predicate or None.

await flatten()
This function is a coroutine.

Flattens the async iterator into a list with all the elements.

Returns
A list of every element in the async iterator.

Return type
list

chunk(max_size)
Collects items into chunks of up to a given maximum size. Another AsyncIterator is returned which collects items into lists of a given size. The maximum chunk size must be a positive integer.

New in version 1.6.

Collecting groups of users:

content_copy
async for leader, *users in reaction.users().chunk(3):
    ...

The last chunk collected may not be as large as max_size.

Parameters
max_size – The size of individual chunks.

Return type
AsyncIterator

map(func)
This is similar to the built-in map function. Another AsyncIterator is returned that executes the function on every element it is iterating over. This function can either be a regular function or a coroutine.

Creating a content iterator:

content_copy
def transform(message):
    return message.content

async for content in channel.history().map(transform):
    message_length = len(content)
Parameters
func – The function to call on every element. Could be a coroutine.

Return type
AsyncIterator

filter(predicate)
This is similar to the built-in filter function. Another AsyncIterator is returned that filters over the original async iterator. This predicate can be a regular function or a coroutine.

Getting messages by non-bot accounts:

content_copy
def predicate(message):
    return not message.author.bot

async for elem in channel.history().filter(predicate):
    ...
Parameters
predicate – The predicate to call on every element. Could be a coroutine.

Return type
AsyncIterator

Audit Log Data
Working with Guild.audit_logs() is a complicated process with a lot of machinery involved. The library attempts to make it easy to use and friendly. In order to accomplish this goal, it must make use of a couple of data classes that aid in this goal.

AuditLogEntry
class discord.AuditLogEntry(*, users, data, guild)
Attributes
action
after
before
category
changes
created_at
extra
id
reason
target
user
Represents an Audit Log entry.

You retrieve these via Guild.audit_logs().

x == y
Checks if two entries are equal.

x != y
Checks if two entries are not equal.

hash(x)
Returns the entry’s hash.

Changed in version 1.7: Audit log entries are now comparable and hashable.

action
The action that was done.

Type
AuditLogAction

user
The user who initiated this action. Usually a Member, unless gone then it’s a User.

Type
abc.User

id
The entry ID.

Type
int

target
The target that got changed. The exact type of this depends on the action being done.

Type
Any

reason
The reason this action was done.

Type
Optional[str]

extra
Extra information that this entry has that might be useful. For most actions, this is None. However in some cases it contains extra information. See AuditLogAction for which actions have this field filled out.

Type
Any

created_at
Returns the entry’s creation time in UTC.

Type
datetime.datetime

category
The category of the action, if applicable.

Type
Optional[AuditLogActionCategory]

changes
The list of changes this entry has.

Type
AuditLogChanges

before
The target’s prior state.

Type
AuditLogDiff

after
The target’s subsequent state.

Type
AuditLogDiff

AuditLogChanges
class discord.AuditLogChanges
Attributes
after
before
An audit log change set.

before
The old value. The attribute has the type of AuditLogDiff.

Depending on the AuditLogActionCategory retrieved by category, the data retrieved by this attribute differs:

Category

Description

create

All attributes are set to None.

delete

All attributes are set the value before deletion.

update

All attributes are set the value before updating.

None

No attributes are set.

after
The new value. The attribute has the type of AuditLogDiff.

Depending on the AuditLogActionCategory retrieved by category, the data retrieved by this attribute differs:

Category

Description

create

All attributes are set to the created value

delete

All attributes are set to None

update

All attributes are set the value after updating.

None

No attributes are set.

AuditLogDiff
class discord.AuditLogDiff
Attributes
afk_channel
afk_timeout
allow
avatar
bitrate
channel
code
color
colour
deaf
default_message_notifications
default_notifications
deny
explicit_content_filter
hoist
icon
id
inviter
max_age
max_uses
mentionable
mfa_level
mute
name
nick
overwrites
owner
permissions
position
region
roles
slowmode_delay
splash
system_channel
temporary
topic
type
uses
vanity_url_code
verification_level
widget_channel
widget_enabled
Represents an audit log “change” object. A change object has dynamic attributes that depend on the type of action being done. Certain actions map to certain attributes being set.

Note that accessing an attribute that does not match the specified action will lead to an attribute error.

To get a list of attributes that have been set, you can iterate over them. To see a list of all possible attributes that could be set based on the action being done, check the documentation for AuditLogAction, otherwise check the documentation below for all attributes that are possible.

iter(diff)
Returns an iterator over (attribute, value) tuple of this diff.

name
A name of something.

Type
str

icon
A guild’s icon hash. See also Guild.icon.

Type
str

splash
The guild’s invite splash hash. See also Guild.splash.

Type
str

owner
The guild’s owner. See also Guild.owner

Type
Union[Member, User]

region
The guild’s voice region. See also Guild.region.

Type
VoiceRegion

afk_channel
The guild’s AFK channel.

If this could not be found, then it falls back to a Object with the ID being set.

See Guild.afk_channel.

Type
Union[VoiceChannel, Object]

system_channel
The guild’s system channel.

If this could not be found, then it falls back to a Object with the ID being set.

See Guild.system_channel.

Type
Union[TextChannel, Object]

afk_timeout
The guild’s AFK timeout. See Guild.afk_timeout.

Type
int

mfa_level
The guild’s MFA level. See Guild.mfa_level.

Type
int

widget_enabled
The guild’s widget has been enabled or disabled.

Type
bool

widget_channel
The widget’s channel.

If this could not be found then it falls back to a Object with the ID being set.

Type
Union[TextChannel, Object]

verification_level
The guild’s verification level.

See also Guild.verification_level.

Type
VerificationLevel

default_notifications
The guild’s default notification level.

See also Guild.default_notifications.

Type
NotificationLevel

explicit_content_filter
The guild’s content filter.

See also Guild.explicit_content_filter.

Type
ContentFilter

default_message_notifications
The guild’s default message notification setting.

Type
int

vanity_url_code
The guild’s vanity URL.

See also Guild.vanity_invite() and Guild.edit().

Type
str

position
The position of a Role or abc.GuildChannel.

Type
int

type
The type of channel or channel permission overwrite.

If the type is an int, then it is a type of channel which can be either 0 to indicate a text channel or 1 to indicate a voice channel.

If the type is a str, then it is a type of permission overwrite which can be either 'role' or 'member'.

Type
Union[int, str]

topic
The topic of a TextChannel.

See also TextChannel.topic.

Type
str

bitrate
The bitrate of a VoiceChannel.

See also VoiceChannel.bitrate.

Type
int

overwrites
A list of permission overwrite tuples that represents a target and a PermissionOverwrite for said target.

The first element is the object being targeted, which can either be a Member or User or Role. If this object is not found then it is a Object with an ID being filled and a type attribute set to either 'role' or 'member' to help decide what type of ID it is.

Type
List[Tuple[target, PermissionOverwrite]]

roles
A list of roles being added or removed from a member.

If a role is not found then it is a Object with the ID and name being filled in.

Type
List[Union[Role, Object]]

nick
The nickname of a member.

See also Member.nick

Type
Optional[str]

deaf
Whether the member is being server deafened.

See also VoiceState.deaf.

Type
bool

mute
Whether the member is being server muted.

See also VoiceState.mute.

Type
bool

permissions
The permissions of a role.

See also Role.permissions.

Type
Permissions

colour
color
The colour of a role.

See also Role.colour

Type
Colour

hoist
Whether the role is being hoisted or not.

See also Role.hoist

Type
bool

mentionable
Whether the role is mentionable or not.

See also Role.mentionable

Type
bool

code
The invite’s code.

See also Invite.code

Type
str

channel
A guild channel.

If the channel is not found then it is a Object with the ID being set. In some cases the channel name is also set.

Type
Union[abc.GuildChannel, Object]

inviter
The user who created the invite.

See also Invite.inviter.

Type
User

max_uses
The invite’s max uses.

See also Invite.max_uses.

Type
int

uses
The invite’s current uses.

See also Invite.uses.

Type
int

max_age
The invite’s max age in seconds.

See also Invite.max_age.

Type
int

temporary
If the invite is a temporary invite.

See also Invite.temporary.

Type
bool

allow
deny
The permissions being allowed or denied.

Type
Permissions

id
The ID of the object being changed.

Type
int

avatar
The avatar hash of a member.

See also User.avatar.

Type
str

slowmode_delay
The number of seconds members have to wait before sending another message in the channel.

See also TextChannel.slowmode_delay.

Type
int

Webhook Support
discord.py offers support for creating, editing, and executing webhooks through the Webhook class.

Webhook
class discord.Webhook(data, *, adapter, state=None)
Attributes
avatar
avatar_url
channel
channel_id
created_at
guild
guild_id
id
name
token
type
url
user
Methods
Webhook.from_url
Webhook.partial
avatar_url_as
delete
delete_message
edit
edit_message
execute
send
Represents a Discord webhook.

Webhooks are a form to send messages to channels in Discord without a bot user or authentication.

There are two main ways to use Webhooks. The first is through the ones received by the library such as Guild.webhooks() and TextChannel.webhooks(). The ones received by the library will automatically have an adapter bound using the library’s HTTP session. Those webhooks will have send(), delete() and edit() as coroutines.

The second form involves creating a webhook object manually without having it bound to a websocket connection using the from_url() or partial() classmethods. This form allows finer grained control over how requests are done, allowing you to mix async and sync code using either aiohttp or requests.

For example, creating a webhook from a URL and using aiohttp:

content_copy
from discord import Webhook, AsyncWebhookAdapter
import aiohttp

async def foo():
    async with aiohttp.ClientSession() as session:
        webhook = Webhook.from_url('url-here', adapter=AsyncWebhookAdapter(session))
        await webhook.send('Hello World', username='Foo')
Or creating a webhook from an ID and token and using requests:

content_copy
import requests
from discord import Webhook, RequestsWebhookAdapter

webhook = Webhook.partial(123456, 'abcdefg', adapter=RequestsWebhookAdapter())
webhook.send('Hello World', username='Foo')
x == y
Checks if two webhooks are equal.

x != y
Checks if two webhooks are not equal.

hash(x)
Returns the webhooks’s hash.

Changed in version 1.4: Webhooks are now comparable and hashable.

id
The webhook’s ID

Type
int

type
The type of the webhook.

New in version 1.3.

Type
WebhookType

token
The authentication token of the webhook. If this is None then the webhook cannot be used to make requests.

Type
Optional[str]

guild_id
The guild ID this webhook is for.

Type
Optional[int]

channel_id
The channel ID this webhook is for.

Type
Optional[int]

user
The user this webhook was created by. If the webhook was received without authentication then this will be None.

Type
Optional[abc.User]

name
The default name of the webhook.

Type
Optional[str]

avatar
The default avatar of the webhook.

Type
Optional[str]

url
Returns the webhook’s url.

Type
str

classmethod partial(id, token, *, adapter)
Creates a partial Webhook.

Parameters
id (int) – The ID of the webhook.

token (str) – The authentication token of the webhook.

adapter (WebhookAdapter) – The webhook adapter to use when sending requests. This is typically AsyncWebhookAdapter for aiohttp or RequestsWebhookAdapter for requests.

Returns
A partial Webhook. A partial webhook is just a webhook object with an ID and a token.

Return type
Webhook

classmethod from_url(url, *, adapter)
Creates a partial Webhook from a webhook URL.

Parameters
url (str) – The URL of the webhook.

adapter (WebhookAdapter) – The webhook adapter to use when sending requests. This is typically AsyncWebhookAdapter for aiohttp or RequestsWebhookAdapter for requests.

Raises
InvalidArgument – The URL is invalid.

Returns
A partial Webhook. A partial webhook is just a webhook object with an ID and a token.

Return type
Webhook

guild
The guild this webhook belongs to.

If this is a partial webhook, then this will always return None.

Type
Optional[Guild]

channel
The text channel this webhook belongs to.

If this is a partial webhook, then this will always return None.

Type
Optional[TextChannel]

created_at
Returns the webhook’s creation time in UTC.

Type
datetime.datetime

avatar_url
Returns an Asset for the avatar the webhook has.

If the webhook does not have a traditional avatar, an asset for the default avatar is returned instead.

This is equivalent to calling avatar_url_as() with the default parameters.

Type
Asset

avatar_url_as(*, format=None, size=1024)
Returns an Asset for the avatar the webhook has.

If the webhook does not have a traditional avatar, an asset for the default avatar is returned instead.

The format must be one of ‘jpeg’, ‘jpg’, or ‘png’. The size must be a power of 2 between 16 and 1024.

Parameters
format (Optional[str]) – The format to attempt to convert the avatar to. If the format is None, then it is equivalent to png.

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

delete(*, reason=None)
This function could be a coroutine.

Deletes this Webhook.

If the webhook is constructed with a RequestsWebhookAdapter then this is not a coroutine.

Parameters
reason (Optional[str]) –

The reason for deleting this webhook. Shows up on the audit log.

New in version 1.4.

Raises
HTTPException – Deleting the webhook failed.

NotFound – This webhook does not exist.

Forbidden – You do not have permissions to delete this webhook.

InvalidArgument – This webhook does not have a token associated with it.

edit(*, reason=None, **kwargs)
This function could be a coroutine.

Edits this Webhook.

If the webhook is constructed with a RequestsWebhookAdapter then this is not a coroutine.

Parameters
name (Optional[str]) – The webhook’s new default name.

avatar (Optional[bytes]) – A bytes-like object representing the webhook’s new default avatar.

reason (Optional[str]) –

The reason for editing this webhook. Shows up on the audit log.

New in version 1.4.

Raises
HTTPException – Editing the webhook failed.

NotFound – This webhook does not exist.

InvalidArgument – This webhook does not have a token associated with it.

send(content=None, *, wait=False, username=None, avatar_url=None, tts=False, file=None, files=None, embed=None, embeds=None, allowed_mentions=None)
This function could be a coroutine.

Sends a message using the webhook.

If the webhook is constructed with a RequestsWebhookAdapter then this is not a coroutine.

The content must be a type that can convert to a string through str(content).

To upload a single file, the file parameter should be used with a single File object.

If the embed parameter is provided, it must be of type Embed and it must be a rich embed type. You cannot mix the embed parameter with the embeds parameter, which must be a list of Embed objects to send.

Parameters
content (str) – The content of the message to send.

wait (bool) – Whether the server should wait before sending a response. This essentially means that the return type of this function changes from None to a WebhookMessage if set to True.

username (str) – The username to send with this message. If no username is provided then the default username for the webhook is used.

avatar_url (Union[str, Asset]) – The avatar URL to send with this message. If no avatar URL is provided then the default avatar for the webhook is used.

tts (bool) – Indicates if the message should be sent using text-to-speech.

file (File) – The file to upload. This cannot be mixed with files parameter.

files (List[File]) – A list of files to send with the content. This cannot be mixed with the file parameter.

embed (Embed) – The rich embed for the content to send. This cannot be mixed with embeds parameter.

embeds (List[Embed]) – A list of embeds to send with the content. Maximum of 10. This cannot be mixed with the embed parameter.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message.

New in version 1.4.

Raises
HTTPException – Sending the message failed.

NotFound – This webhook was not found.

Forbidden – The authorization token for the webhook is incorrect.

InvalidArgument – You specified both embed and embeds or the length of embeds was invalid or there was no token associated with this webhook.

Returns
The message that was sent.

Return type
Optional[WebhookMessage]

execute(*args, **kwargs)
An alias for send().

edit_message(message_id, **fields)
This function could be a coroutine.

Edits a message owned by this webhook.

This is a lower level interface to WebhookMessage.edit() in case you only have an ID.

New in version 1.6.

Parameters
message_id (int) – The message ID to edit.

content (Optional[str]) – The content to edit the message with or None to clear it.

embeds (List[Embed]) – A list of embeds to edit the message with.

embed (Optional[Embed]) – The embed to edit the message with. None suppresses the embeds. This should not be mixed with the embeds parameter.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

Raises
HTTPException – Editing the message failed.

Forbidden – Edited a message that is not yours.

InvalidArgument – You specified both embed and embeds or the length of embeds was invalid or there was no token associated with this webhook.

delete_message(message_id)
This function could be a coroutine.

Deletes a message owned by this webhook.

This is a lower level interface to WebhookMessage.delete() in case you only have an ID.

New in version 1.6.

Parameters
message_id (int) – The message ID to delete.

Raises
HTTPException – Deleting the message failed.

Forbidden – Deleted a message that is not yours.

WebhookMessage
class discord.WebhookMessage(*, state, channel, data)
Methods
delete
edit
Represents a message sent from your webhook.

This allows you to edit or delete a message sent by your webhook.

This inherits from discord.Message with changes to edit() and delete() to work.

New in version 1.6.

edit(**fields)
This function could be a coroutine.

Edits the message.

The content must be able to be transformed into a string via str(content).

New in version 1.6.

Parameters
content (Optional[str]) – The content to edit the message with or None to clear it.

embeds (List[Embed]) – A list of embeds to edit the message with.

embed (Optional[Embed]) – The embed to edit the message with. None suppresses the embeds. This should not be mixed with the embeds parameter.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

Raises
HTTPException – Editing the message failed.

Forbidden – Edited a message that is not yours.

InvalidArgument – You specified both embed and embeds or the length of embeds was invalid or there was no token associated with this webhook.

delete(*, delay=None)
This function is a coroutine.

Deletes the message.

Parameters
delay (Optional[float]) – If provided, the number of seconds to wait before deleting the message. If this is a coroutine, the waiting is done in the background and deletion failures are ignored. If this is not a coroutine then the delay blocks the thread.

Raises
Forbidden – You do not have proper permissions to delete the message.

NotFound – The message was deleted already.

HTTPException – Deleting the message failed.

Adapters
Adapters allow you to change how the request should be handled. They all build on a single interface, WebhookAdapter.request().

class discord.WebhookAdapter
Base class for all webhook adapters.

webhook
The webhook that owns this adapter.

Type
Webhook

request(verb, url, payload=None, multipart=None)
Actually does the request.

Subclasses must implement this.

Parameters
verb (str) – The HTTP verb to use for the request.

url (str) – The URL to send the request to. This will have the query parameters already added to it, if any.

multipart (Optional[dict]) – A dict containing multipart form data to send with the request. If a filename is being uploaded, then it will be under a file key which will have a 3-element tuple denoting (filename, file, content_type).

payload (Optional[dict]) – The JSON to send with the request, if any.

handle_execution_response(data, *, wait)
Transforms the webhook execution response into something more meaningful.

This is mainly used to convert the data into a Message if necessary.

Subclasses must implement this.

Parameters
data – The data that was returned from the request.

wait (bool) – Whether the webhook execution was asked to wait or not.

class discord.AsyncWebhookAdapter(session)
A webhook adapter suited for use with aiohttp.


You are responsible for cleaning up the client session.

Parameters
session (aiohttp.ClientSession) – The session to use to send requests.

await request(verb, url, payload=None, multipart=None, *, files=None, reason=None)
Actually does the request.

Subclasses must implement this.

Parameters
verb (str) – The HTTP verb to use for the request.

url (str) – The URL to send the request to. This will have the query parameters already added to it, if any.

multipart (Optional[dict]) – A dict containing multipart form data to send with the request. If a filename is being uploaded, then it will be under a file key which will have a 3-element tuple denoting (filename, file, content_type).

payload (Optional[dict]) – The JSON to send with the request, if any.

await handle_execution_response(response, *, wait)
Transforms the webhook execution response into something more meaningful.

This is mainly used to convert the data into a Message if necessary.

Subclasses must implement this.

Parameters
data – The data that was returned from the request.

wait (bool) – Whether the webhook execution was asked to wait or not.

class discord.RequestsWebhookAdapter(session=None, *, sleep=True)
A webhook adapter suited for use with requests.

Only versions of requests higher than 2.13.0 are supported.

Parameters
session (Optional[requests.Session]) – The requests session to use for sending requests. If not given then each request will create a new session. Note if a session is given, the webhook adapter will not clean it up for you. You must close the session yourself.

sleep (bool) – Whether to sleep the thread when encountering a 429 or pre-emptive rate limit or a 5xx status code. Defaults to True. If set to False then this will raise an HTTPException instead.

request(verb, url, payload=None, multipart=None, *, files=None, reason=None)
Actually does the request.

Subclasses must implement this.

Parameters
verb (str) – The HTTP verb to use for the request.

url (str) – The URL to send the request to. This will have the query parameters already added to it, if any.

multipart (Optional[dict]) – A dict containing multipart form data to send with the request. If a filename is being uploaded, then it will be under a file key which will have a 3-element tuple denoting (filename, file, content_type).

payload (Optional[dict]) – The JSON to send with the request, if any.

handle_execution_response(response, *, wait)
Transforms the webhook execution response into something more meaningful.

This is mainly used to convert the data into a Message if necessary.

Subclasses must implement this.

Parameters
data – The data that was returned from the request.

wait (bool) – Whether the webhook execution was asked to wait or not.

Abstract Base Classes
An abstract base class (also known as an abc) is a class that models can inherit to get their behaviour. The Python implementation of an abc is slightly different in that you can register them at run-time. Abstract base classes cannot be instantiated. They are mainly there for usage with isinstance() and issubclass().

This library has a module related to abstract base classes, some of which are actually from the abc standard module, others which are not.

Snowflake
class discord.abc.Snowflake
Attributes
created_at
id
An ABC that details the common operations on a Discord model.

Almost all Discord models meet this abstract base class.

If you want to create a snowflake on your own, consider using Object.

id
The model’s unique ID.

Type
int

abstractmethod created_at
Returns the model’s creation time as a naive datetime in UTC.

Type
datetime.datetime

User
class discord.abc.User
Attributes
avatar
bot
discriminator
display_name
mention
name
An ABC that details the common operations on a Discord user.

The following implement this ABC:

User

ClientUser

Member

This ABC must also implement Snowflake.

name
The user’s username.

Type
str

discriminator
The user’s discriminator.

Type
str

avatar
The avatar hash the user has.

Type
Optional[str]

bot
If the user is a bot account.

Type
bool

abstractmethod display_name
Returns the user’s display name.

Type
str

abstractmethod mention
Returns a string that allows you to mention the given user.

Type
str

PrivateChannel
class discord.abc.PrivateChannel
Attributes
me
An ABC that details the common operations on a private Discord channel.

The following implement this ABC:

DMChannel

GroupChannel

This ABC must also implement Snowflake.

me
The user presenting yourself.

Type
ClientUser

GuildChannel
class discord.abc.GuildChannel
Attributes
category
changed_roles
created_at
guild
mention
name
overwrites
permissions_synced
position
Methods
clone
create_invite
delete
invites
move
overwrites_for
permissions_for
set_permissions
An ABC that details the common operations on a Discord guild channel.

The following implement this ABC:

TextChannel

VoiceChannel

CategoryChannel

StageChannel

This ABC must also implement Snowflake.

name
The channel name.

Type
str

guild
The guild the channel belongs to.

Type
Guild

position
The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0.

Type
int

changed_roles
Returns a list of roles that have been overridden from their default values in the roles attribute.

Type
List[Role]

mention
The string that allows you to mention the channel.

Type
str

created_at
Returns the channel’s creation time in UTC.

Type
datetime.datetime

overwrites_for(obj)
Returns the channel-specific overwrites for a member or a role.

Parameters
obj (Union[Role, User]) – The role or user denoting whose overwrite to get.

Returns
The permission overwrites for this object.

Return type
PermissionOverwrite

overwrites
Returns all of the channel’s overwrites.

This is returned as a dictionary where the key contains the target which can be either a Role or a Member and the value is the overwrite as a PermissionOverwrite.

Returns
The channel’s permission overwrites.

Return type
Mapping[Union[Role, Member], PermissionOverwrite]

category
The category this channel belongs to.

If there is no category then this is None.

Type
Optional[CategoryChannel]

permissions_synced
Whether or not the permissions for this channel are synced with the category it belongs to.

If there is no category then this is False.

New in version 1.3.

Type
bool

permissions_for(member)
Handles permission resolution for the current Member.

This function takes into consideration the following cases:

Guild owner

Guild roles

Channel overrides

Member overrides

Parameters
member (Member) – The member to resolve permissions for.

Returns
The resolved permissions for the member.

Return type
Permissions

await delete(*, reason=None)
This function is a coroutine.

Deletes the channel.

You must have manage_channels permission to use this.

Parameters
reason (Optional[str]) – The reason for deleting this channel. Shows up on the audit log.

Raises
Forbidden – You do not have proper permissions to delete the channel.

NotFound – The channel was not found or was already deleted.

HTTPException – Deleting the channel failed.

await set_permissions(target, *, overwrite=see - below, reason=None, **permissions)
This function is a coroutine.

Sets the channel specific permission overwrites for a target in the channel.

The target parameter should either be a Member or a Role that belongs to guild.

The overwrite parameter, if given, must either be None or PermissionOverwrite. For convenience, you can pass in keyword arguments denoting Permissions attributes. If this is done, then you cannot mix the keyword arguments with the overwrite parameter.

If the overwrite parameter is None, then the permission overwrites are deleted.

You must have the manage_roles permission to use this.

Examples

Setting allow and deny:

content_copy
await message.channel.set_permissions(message.author, read_messages=True,
                                                      send_messages=False)
Deleting overwrites

content_copy
await channel.set_permissions(member, overwrite=None)
Using PermissionOverwrite

content_copy
overwrite = discord.PermissionOverwrite()
overwrite.send_messages = False
overwrite.read_messages = True
await channel.set_permissions(member, overwrite=overwrite)
Parameters
target (Union[Member, Role]) – The member or role to overwrite permissions for.

overwrite (Optional[PermissionOverwrite]) – The permissions to allow and deny to the target, or None to delete the overwrite.

**permissions – A keyword argument list of permissions to set for ease of use. Cannot be mixed with overwrite.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

Raises
Forbidden – You do not have permissions to edit channel specific permissions.

HTTPException – Editing channel specific permissions failed.

NotFound – The role or member being edited is not part of the guild.

InvalidArgument – The overwrite parameter invalid or the target type was not Role or Member.

await clone(*, name=None, reason=None)
This function is a coroutine.

Clones this channel. This creates a channel with the same properties as this channel.

You must have the manage_channels permission to do this.

New in version 1.1.

Parameters
name (Optional[str]) – The name of the new channel. If not provided, defaults to this channel name.

reason (Optional[str]) – The reason for cloning this channel. Shows up on the audit log.

Raises
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

Returns
The channel that was created.

Return type
abc.GuildChannel

await move(**kwargs)
This function is a coroutine.

A rich interface to help move a channel relative to other channels.

If exact position movement is required, edit() should be used instead.

You must have the manage_channels permission to do this.


Voice channels will always be sorted below text channels. This is a Discord limitation.

New in version 1.7.

Parameters
beginning (bool) – Whether to move the channel to the beginning of the channel list (or category if given). This is mutually exclusive with end, before, and after.

end (bool) – Whether to move the channel to the end of the channel list (or category if given). This is mutually exclusive with beginning, before, and after.

before (Snowflake) – The channel that should be before our current channel. This is mutually exclusive with beginning, end, and after.

after (Snowflake) – The channel that should be after our current channel. This is mutually exclusive with beginning, end, and before.

offset (int) – The number of channels to offset the move by. For example, an offset of 2 with beginning=True would move it 2 after the beginning. A positive number moves it below while a negative number moves it above. Note that this number is relative and computed after the beginning, end, before, and after parameters.

category (Optional[Snowflake]) – The category to move this channel under. If None is given then it moves it out of the category. This parameter is ignored if moving a category channel.

sync_permissions (bool) – Whether to sync the permissions with the category (if given).

reason (str) – The reason for the move.

Raises
InvalidArgument – An invalid position was given or a bad mix of arguments were passed.

Forbidden – You do not have permissions to move the channel.

HTTPException – Moving the channel failed.

await create_invite(*, reason=None, **fields)
This function is a coroutine.

Creates an instant invite from a text or voice channel.

You must have the create_instant_invite permission to do this.

Parameters
max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

Raises
HTTPException – Invite creation failed.

NotFound – The channel that was passed is a category or an invalid channel.

Returns
The invite that was created.

Return type
Invite

await invites()
This function is a coroutine.

Returns a list of all active instant invites from this channel.

You must have manage_channels to get this information.

Raises
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

Returns
The list of invites that are currently active.

Return type
List[Invite]

Messageable
class discord.abc.Messageable
Methods
fetch_message
history
pins
send
trigger_typing
typing
An ABC that details the common operations on a model that can send messages.

The following implement this ABC:

TextChannel

DMChannel

GroupChannel

User

Member

Context

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

Examples

Usage

content_copy
counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

content_copy
messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

Parameters
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time. When using this argument, the maximum limit is 101. Note that if the limit is an even number then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

Raises
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

Yields
Message – The message with the message data parsed.

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.


This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

content_copy
async with channel.typing():
    # do expensive stuff here
    await channel.send('done!')
await send(content=None, *, tts=False, embed=None, file=None, files=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

If the embed parameter is provided, it must be of type Embed and it must be a rich embed type.

Parameters
content (str) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

Raises
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or the reference object is not a Message or MessageReference.

Returns
The message that was sent.

Return type
Message

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

await fetch_message(id)
This function is a coroutine.

Retrieves a single Message from the destination.

This can only be used by bot accounts.

Parameters
id (int) – The message ID to look for.

Raises
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

Returns
The message asked for.

Return type
Message

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.


Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

Raises
HTTPException – Retrieving the pinned messages failed.

Returns
The messages that are currently pinned.

Return type
List[Message]

Connectable
class discord.abc.Connectable
An ABC that details the common operations on a channel that can connect to a voice server.

The following implement this ABC:

VoiceChannel

Discord Models
Models are classes that are received from Discord and are not meant to be created by the user of the library.


The classes listed below are not intended to be created by users and are also read-only.

For example, this means that you should not make your own User instances nor should you modify the User instance yourself.

If you want to get one of these model classes instances they’d have to be through the cache, and a common way of doing so is through the utils.find() function or attributes of model classes that you receive from the events specified in the Event Reference.


Nearly all classes here have __slots__ defined which means that it is impossible to have dynamic attributes to the data classes.

ClientUser
class discord.ClientUser
Attributes
avatar
avatar_url
blocked
bot
color
colour
created_at
default_avatar
default_avatar_url
discriminator
display_name
email
friends
id
locale
mention
mfa_enabled
name
premium
premium_type
public_flags
relationships
system
verified
Methods
avatar_url_as
create_group
edit
edit_settings
get_relationship
is_avatar_animated
mentioned_in
permissions_in
Represents your Discord user.

x == y
Checks if two users are equal.

x != y
Checks if two users are not equal.

hash(x)
Return the user’s hash.

str(x)
Returns the user’s name with discriminator.

name
The user’s username.

Type
str

id
The user’s unique ID.

Type
int

discriminator
The user’s discriminator. This is given when the username has conflicts.

Type
str

avatar
The avatar hash the user has. Could be None.

Type
Optional[str]

bot
Specifies if the user is a bot account.

Type
bool

system
Specifies if the user is a system user (i.e. represents Discord officially).

New in version 1.3.

Type
bool

verified
Specifies if the user’s email is verified.

Type
bool

email
The email the user used when registering.

Deprecated since version 1.7.

Type
Optional[str]

locale
The IETF language tag used to identify the language the user is using.

Type
Optional[str]

mfa_enabled
Specifies if the user has MFA turned on and working.

Type
bool

premium
Specifies if the user is a premium user (e.g. has Discord Nitro).

Deprecated since version 1.7.

Type
bool

premium_type
Specifies the type of premium a user has (e.g. Nitro or Nitro Classic). Could be None if the user is not premium.

Deprecated since version 1.7.

Type
Optional[PremiumType]

get_relationship(user_id)
Retrieves the Relationship if applicable.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Parameters
user_id (int) – The user ID to check if we have a relationship with them.

Returns
The relationship if available or None.

Return type
Optional[Relationship]

relationships
Returns all the relationships that the user has.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Type
List[User]

friends
Returns all the users that the user is friends with.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Type
List[User]

blocked
Returns all the users that the user has blocked.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Type
List[User]

await edit(**fields)
This function is a coroutine.

Edits the current profile of the client.

If a bot account is used then a password field is optional, otherwise it is required.


The user account-only fields are deprecated.


To upload an avatar, a bytes-like object must be passed in that represents the image being uploaded. If this is done through a file then the file must be opened via open('some_filename', 'rb') and the bytes-like object is given through the use of fp.read().

The only image formats supported for uploading is JPEG and PNG.

Parameters
password (str) – The current password for the client’s account. Only applicable to user accounts.

new_password (str) – The new password you wish to change to. Only applicable to user accounts.

email (str) – The new email you wish to change to. Only applicable to user accounts.

house (Optional[HypeSquadHouse]) – The hypesquad house you wish to change to. Could be None to leave the current house. Only applicable to user accounts.

username (str) – The new username you wish to change to.

avatar (bytes) – A bytes-like object representing the image to upload. Could be None to denote no avatar.

Raises
HTTPException – Editing your profile failed.

InvalidArgument – Wrong image format passed for avatar.

ClientException – Password is required for non-bot accounts. House field was not a HypeSquadHouse.

await create_group(*recipients)
This function is a coroutine.

Creates a group direct message with the recipients provided. These recipients must be have a relationship of type RelationshipType.friend.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Parameters
*recipients (User) – An argument list of User to have in your group.

Raises
HTTPException – Failed to create the group direct message.

ClientException – Attempted to create a group with only one recipient. This does not include yourself.

Returns
The new group channel.

Return type
GroupChannel

await edit_settings(**kwargs)
This function is a coroutine.

Edits the client user’s settings.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Parameters
afk_timeout (int) – How long (in seconds) the user needs to be AFK until Discord sends push notifications to your mobile device.

animate_emojis (bool) – Whether or not to animate emojis in the chat.

convert_emoticons (bool) – Whether or not to automatically convert emoticons into emojis. e.g. :-) -> 😃

default_guilds_restricted (bool) – Whether or not to automatically disable DMs between you and members of new guilds you join.

detect_platform_accounts (bool) – Whether or not to automatically detect accounts from services like Steam and Blizzard when you open the Discord client.

developer_mode (bool) – Whether or not to enable developer mode.

disable_games_tab (bool) – Whether or not to disable the showing of the Games tab.

enable_tts_command (bool) – Whether or not to allow tts messages to be played/sent.

explicit_content_filter (UserContentFilter) – The filter for explicit content in all messages.

friend_source_flags (FriendFlags) – Who can add you as a friend.

gif_auto_play (bool) – Whether or not to automatically play gifs that are in the chat.

guild_positions (List[abc.Snowflake]) – A list of guilds in order of the guild/guild icons that are on the left hand side of the UI.

inline_attachment_media (bool) – Whether or not to display attachments when they are uploaded in chat.

inline_embed_media (bool) – Whether or not to display videos and images from links posted in chat.

locale (str) – The RFC 3066 language identifier of the locale to use for the language of the Discord client.

message_display_compact (bool) – Whether or not to use the compact Discord display mode.

render_embeds (bool) – Whether or not to render embeds that are sent in the chat.

render_reactions (bool) – Whether or not to render reactions that are added to messages.

restricted_guilds (List[abc.Snowflake]) – A list of guilds that you will not receive DMs from.

show_current_game (bool) – Whether or not to display the game that you are currently playing.

status (Status) – The clients status that is shown to others.

theme (Theme) – The theme of the Discord UI.

timezone_offset (int) – The timezone offset to use.

Raises
HTTPException – Editing the settings failed.

Forbidden – The client is a bot user and not a user account.

Returns
The client user’s updated settings.

Return type
dict

avatar_url
Returns an Asset for the avatar the user has.

If the user does not have a traditional avatar, an asset for the default avatar is returned instead.

This is equivalent to calling avatar_url_as() with the default parameters (i.e. webp/gif detection and a size of 1024).

Type
Asset

avatar_url_as(*, format=None, static_format='webp', size=1024)
Returns an Asset for the avatar the user has.

If the user does not have a traditional avatar, an asset for the default avatar is returned instead.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’, ‘png’ or ‘gif’, and ‘gif’ is only valid for animated avatars. The size must be a power of 2 between 16 and 4096.

Parameters
format (Optional[str]) – The format to attempt to convert the avatar to. If the format is None, then it is automatically detected into either ‘gif’ or static_format depending on the avatar being animated or not.

static_format (Optional[str]) – Format to attempt to convert only non-animated avatars to. Defaults to ‘webp’

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or static_format, or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

color
A property that returns a color denoting the rendered color for the user. This always returns Colour.default().

There is an alias for this named colour.

Type
Colour

colour
A property that returns a colour denoting the rendered colour for the user. This always returns Colour.default().

There is an alias for this named color.

Type
Colour

created_at
Returns the user’s creation time in UTC.

This is when the user’s Discord account was created.

Type
datetime.datetime

default_avatar
Returns the default avatar for a given user. This is calculated by the user’s discriminator.

Type
DefaultAvatar

default_avatar_url
Returns a URL for a user’s default avatar.

Type
Asset

display_name
Returns the user’s display name.

For regular users this is just their username, but if they have a guild specific nickname then that is returned instead.

Type
str

is_avatar_animated()
bool: Indicates if the user has an animated avatar.

mention
Returns a string that allows you to mention the given user.

Type
str

mentioned_in(message)
Checks if the user is mentioned in the specified message.

Parameters
message (Message) – The message to check if you’re mentioned in.

Returns
Indicates if the user is mentioned in the message.

Return type
bool

permissions_in(channel)
An alias for abc.GuildChannel.permissions_for().

Basically equivalent to:

content_copy
channel.permissions_for(self)
Parameters
channel (abc.GuildChannel) – The channel to check your permissions for.

public_flags
The publicly available flags the user has.

Type
PublicUserFlags

Relationship
class discord.Relationship
Attributes
type
user
Methods
accept
delete
Represents a relationship in Discord.

A relationship is like a friendship, a person who is blocked, etc. Only non-bot accounts can have relationships.

Deprecated since version 1.7.

user
The user you have the relationship with.

Type
User

type
The type of relationship you have.

Type
RelationshipType

await delete()
This function is a coroutine.

Deletes the relationship.

Deprecated since version 1.7.

Raises
HTTPException – Deleting the relationship failed.

await accept()
This function is a coroutine.

Accepts the relationship request. e.g. accepting a friend request.

Deprecated since version 1.7.

Raises
HTTPException – Accepting the relationship failed.

User
class discord.User
Attributes
avatar
avatar_url
bot
color
colour
created_at
default_avatar
default_avatar_url
discriminator
display_name
dm_channel
id
mention
mutual_guilds
name
public_flags
relationship
system
Methods
avatar_url_as
block
create_dm
fetch_message
history
is_avatar_animated
is_blocked
is_friend
mentioned_in
mutual_friends
permissions_in
pins
profile
remove_friend
send
send_friend_request
trigger_typing
typing
unblock
Represents a Discord user.

x == y
Checks if two users are equal.

x != y
Checks if two users are not equal.

hash(x)
Return the user’s hash.

str(x)
Returns the user’s name with discriminator.

name
The user’s username.

Type
str

id
The user’s unique ID.

Type
int

discriminator
The user’s discriminator. This is given when the username has conflicts.

Type
str

avatar
The avatar hash the user has. Could be None.

Type
Optional[str]

bot
Specifies if the user is a bot account.

Type
bool

system
Specifies if the user is a system user (i.e. represents Discord officially).

Type
bool

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

Examples

Usage

content_copy
counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

content_copy
messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

Parameters
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time. When using this argument, the maximum limit is 101. Note that if the limit is an even number then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

Raises
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

Yields
Message – The message with the message data parsed.

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.


This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

content_copy
async with channel.typing():
    # do expensive stuff here
    await channel.send('done!')
dm_channel
Returns the channel associated with this user if it exists.

If this returns None, you can create a DM channel by calling the create_dm() coroutine function.

Type
Optional[DMChannel]

mutual_guilds
The guilds that the user shares with the client.


This will only return mutual guilds within the client’s internal cache.

New in version 1.7.

Type
List[Guild]

await create_dm()
This function is a coroutine.

Creates a DMChannel with this user.

This should be rarely called, as this is done transparently for most people.

Returns
The channel that was created.

Return type
DMChannel

relationship
Returns the Relationship with this user if applicable, None otherwise.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Type
Optional[Relationship]

await mutual_friends()
This function is a coroutine.

Gets all mutual friends of this user.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Raises
Forbidden – Not allowed to get mutual friends of this user.

HTTPException – Getting mutual friends failed.

Returns
The users that are mutual friends.

Return type
List[User]

is_friend()
bool: Checks if the user is your friend.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

is_blocked()
bool: Checks if the user is blocked.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

await block()
This function is a coroutine.

Blocks the user.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Raises
Forbidden – Not allowed to block this user.

HTTPException – Blocking the user failed.

await unblock()
This function is a coroutine.

Unblocks the user.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Raises
Forbidden – Not allowed to unblock this user.

HTTPException – Unblocking the user failed.

await remove_friend()
This function is a coroutine.

Removes the user as a friend.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Raises
Forbidden – Not allowed to remove this user as a friend.

HTTPException – Removing the user as a friend failed.

await send_friend_request()
This function is a coroutine.

Sends the user a friend request.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Raises
Forbidden – Not allowed to send a friend request to the user.

HTTPException – Sending the friend request failed.

await profile()
This function is a coroutine.

Gets the user’s profile.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Raises
Forbidden – Not allowed to fetch profiles.

HTTPException – Fetching the profile failed.

Returns
The profile of the user.

Return type
Profile

avatar_url
Returns an Asset for the avatar the user has.

If the user does not have a traditional avatar, an asset for the default avatar is returned instead.

This is equivalent to calling avatar_url_as() with the default parameters (i.e. webp/gif detection and a size of 1024).

Type
Asset

avatar_url_as(*, format=None, static_format='webp', size=1024)
Returns an Asset for the avatar the user has.

If the user does not have a traditional avatar, an asset for the default avatar is returned instead.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’, ‘png’ or ‘gif’, and ‘gif’ is only valid for animated avatars. The size must be a power of 2 between 16 and 4096.

Parameters
format (Optional[str]) – The format to attempt to convert the avatar to. If the format is None, then it is automatically detected into either ‘gif’ or static_format depending on the avatar being animated or not.

static_format (Optional[str]) – Format to attempt to convert only non-animated avatars to. Defaults to ‘webp’

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or static_format, or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

color
A property that returns a color denoting the rendered color for the user. This always returns Colour.default().

There is an alias for this named colour.

Type
Colour

colour
A property that returns a colour denoting the rendered colour for the user. This always returns Colour.default().

There is an alias for this named color.

Type
Colour

created_at
Returns the user’s creation time in UTC.

This is when the user’s Discord account was created.

Type
datetime.datetime

default_avatar
Returns the default avatar for a given user. This is calculated by the user’s discriminator.

Type
DefaultAvatar

default_avatar_url
Returns a URL for a user’s default avatar.

Type
Asset

display_name
Returns the user’s display name.

For regular users this is just their username, but if they have a guild specific nickname then that is returned instead.

Type
str

await fetch_message(id)
This function is a coroutine.

Retrieves a single Message from the destination.

This can only be used by bot accounts.

Parameters
id (int) – The message ID to look for.

Raises
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

Returns
The message asked for.

Return type
Message

is_avatar_animated()
bool: Indicates if the user has an animated avatar.

mention
Returns a string that allows you to mention the given user.

Type
str

mentioned_in(message)
Checks if the user is mentioned in the specified message.

Parameters
message (Message) – The message to check if you’re mentioned in.

Returns
Indicates if the user is mentioned in the message.

Return type
bool

permissions_in(channel)
An alias for abc.GuildChannel.permissions_for().

Basically equivalent to:

content_copy
channel.permissions_for(self)
Parameters
channel (abc.GuildChannel) – The channel to check your permissions for.

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.


Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

Raises
HTTPException – Retrieving the pinned messages failed.

Returns
The messages that are currently pinned.

Return type
List[Message]

public_flags
The publicly available flags the user has.

Type
PublicUserFlags

await send(content=None, *, tts=False, embed=None, file=None, files=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

If the embed parameter is provided, it must be of type Embed and it must be a rich embed type.

Parameters
content (str) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

Raises
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or the reference object is not a Message or MessageReference.

Returns
The message that was sent.

Return type
Message

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

Attachment
class discord.Attachment
Attributes
content_type
filename
height
id
proxy_url
size
url
width
Methods
is_spoiler
read
save
to_file
Represents an attachment from Discord.

str(x)
Returns the URL of the attachment.

x == y
Checks if the attachment is equal to another attachment.

x != y
Checks if the attachment is not equal to another attachment.

hash(x)
Returns the hash of the attachment.

Changed in version 1.7: Attachment can now be casted to str and is hashable.

id
The attachment ID.

Type
int

size
The attachment size in bytes.

Type
int

height
The attachment’s height, in pixels. Only applicable to images and videos.

Type
Optional[int]

width
The attachment’s width, in pixels. Only applicable to images and videos.

Type
Optional[int]

filename
The attachment’s filename.

Type
str

url
The attachment URL. If the message this attachment was attached to is deleted, then this will 404.

Type
str

proxy_url
The proxy URL. This is a cached version of the url in the case of images. When the message is deleted, this URL might be valid for a few minutes or not valid at all.

Type
str

content_type
The attachment’s media type

New in version 1.7.

Type
Optional[str]

is_spoiler()
bool: Whether this attachment contains a spoiler.

await save(fp, *, seek_begin=True, use_cached=False)
This function is a coroutine.

Saves this attachment into a file-like object.

Parameters
fp (Union[io.BufferedIOBase, os.PathLike]) – The file-like object to save this attachment to or the filename to use. If a filename is passed then a file is created with that filename and used instead.

seek_begin (bool) – Whether to seek to the beginning of the file after saving is successfully done.

use_cached (bool) – Whether to use proxy_url rather than url when downloading the attachment. This will allow attachments to be saved after deletion more often, compared to the regular URL which is generally deleted right after the message is deleted. Note that this can still fail to download deleted attachments if too much time has passed and it does not work on some types of attachments.

Raises
HTTPException – Saving the attachment failed.

NotFound – The attachment was deleted.

Returns
The number of bytes written.

Return type
int

await read(*, use_cached=False)
This function is a coroutine.

Retrieves the content of this attachment as a bytes object.

New in version 1.1.

Parameters
use_cached (bool) – Whether to use proxy_url rather than url when downloading the attachment. This will allow attachments to be saved after deletion more often, compared to the regular URL which is generally deleted right after the message is deleted. Note that this can still fail to download deleted attachments if too much time has passed and it does not work on some types of attachments.

Raises
HTTPException – Downloading the attachment failed.

Forbidden – You do not have permissions to access this attachment

NotFound – The attachment was deleted.

Returns
The contents of the attachment.

Return type
bytes

await to_file(*, use_cached=False, spoiler=False)
This function is a coroutine.

Converts the attachment into a File suitable for sending via abc.Messageable.send().

New in version 1.3.

Parameters
use_cached (bool) –

Whether to use proxy_url rather than url when downloading the attachment. This will allow attachments to be saved after deletion more often, compared to the regular URL which is generally deleted right after the message is deleted. Note that this can still fail to download deleted attachments if too much time has passed and it does not work on some types of attachments.

New in version 1.4.

spoiler (bool) –

Whether the file is a spoiler.

New in version 1.4.

Raises
HTTPException – Downloading the attachment failed.

Forbidden – You do not have permissions to access this attachment

NotFound – The attachment was deleted.

Returns
The attachment as a file suitable for sending.

Return type
File

Asset
class discord.Asset
Methods
read
save
Represents a CDN asset on Discord.

str(x)
Returns the URL of the CDN asset.

len(x)
Returns the length of the CDN asset’s URL.

bool(x)
Checks if the Asset has a URL.

x == y
Checks if the asset is equal to another asset.

x != y
Checks if the asset is not equal to another asset.

hash(x)
Returns the hash of the asset.

await read()
This function is a coroutine.

Retrieves the content of this asset as a bytes object.


PartialEmoji won’t have a connection state if user created, and a URL won’t be present if a custom image isn’t associated with the asset, e.g. a guild with no custom icon.

New in version 1.1.

Raises
DiscordException – There was no valid URL or internal connection state.

HTTPException – Downloading the asset failed.

NotFound – The asset was deleted.

Returns
The content of the asset.

Return type
bytes

await save(fp, *, seek_begin=True)
This function is a coroutine.

Saves this asset into a file-like object.

Parameters
fp (Union[BinaryIO, os.PathLike]) – Same as in Attachment.save().

seek_begin (bool) – Same as in Attachment.save().

Raises
DiscordException – There was no valid URL or internal connection state.

HTTPException – Downloading the asset failed.

NotFound – The asset was deleted.

Returns
The number of bytes written.

Return type
int

Message
class discord.Message
Attributes
activity
application
attachments
author
call
channel
channel_mentions
clean_content
content
created_at
edited_at
embeds
flags
guild
id
jump_url
mention_everyone
mentions
nonce
pinned
raw_channel_mentions
raw_mentions
raw_role_mentions
reactions
reference
role_mentions
stickers
system_content
tts
type
webhook_id
Methods
ack
add_reaction
clear_reaction
clear_reactions
delete
edit
is_system
pin
publish
remove_reaction
reply
to_reference
unpin
Represents a message from Discord.

x == y
Checks if two messages are equal.

x != y
Checks if two messages are not equal.

hash(x)
Returns the message’s hash.

tts
Specifies if the message was done with text-to-speech. This can only be accurately received in on_message() due to a discord limitation.

Type
bool

type
The type of message. In most cases this should not be checked, but it is helpful in cases where it might be a system message for system_content.

Type
MessageType

author
A Member that sent the message. If channel is a private channel or the user has the left the guild, then it is a User instead.

Type
abc.User

content
The actual contents of the message.

Type
str

nonce
The value used by the discord guild and the client to verify that the message is successfully sent. This is not stored long term within Discord’s servers and is only used ephemerally.

embeds
A list of embeds the message has.

Type
List[Embed]

channel
The TextChannel that the message was sent from. Could be a DMChannel or GroupChannel if it’s a private message.

Type
Union[abc.Messageable]

call
The call that the message refers to. This is only applicable to messages of type MessageType.call.

Deprecated since version 1.7.

Type
Optional[CallMessage]

reference
The message that this message references. This is only applicable to messages of type MessageType.pins_add, crossposted messages created by a followed channel integration, or message replies.

New in version 1.5.

Type
Optional[MessageReference]

mention_everyone
Specifies if the message mentions everyone.


This does not check if the @everyone or the @here text is in the message itself. Rather this boolean indicates if either the @everyone or the @here text is in the message and it did end up mentioning.

Type
bool

mentions
A list of Member that were mentioned. If the message is in a private message then the list will be of User instead. For messages that are not of type MessageType.default, this array can be used to aid in system messages. For more information, see system_content.


The order of the mentions list is not in any particular order so you should not rely on it. This is a Discord limitation, not one with the library.

Type
List[abc.User]

channel_mentions
A list of abc.GuildChannel that were mentioned. If the message is in a private message then the list is always empty.

Type
List[abc.GuildChannel]

role_mentions
A list of Role that were mentioned. If the message is in a private message then the list is always empty.

Type
List[Role]

id
The message ID.

Type
int

webhook_id
If this message was sent by a webhook, then this is the webhook ID’s that sent this message.

Type
Optional[int]

attachments
A list of attachments given to a message.

Type
List[Attachment]

pinned
Specifies if the message is currently pinned.

Type
bool

flags
Extra features of the message.

New in version 1.3.

Type
MessageFlags

reactions
Reactions to a message. Reactions can be either custom emoji or standard unicode emoji.

Type
List[Reaction]

activity
The activity associated with this message. Sent with Rich-Presence related messages that for example, request joining, spectating, or listening to or with another member.

It is a dictionary with the following optional keys:

type: An integer denoting the type of message activity being requested.

party_id: The party ID associated with the party.

Type
Optional[dict]

application
The rich presence enabled application associated with this message.

It is a dictionary with the following keys:

id: A string representing the application’s ID.

name: A string representing the application’s name.

description: A string representing the application’s description.

icon: A string representing the icon ID of the application.

cover_image: A string representing the embed’s image asset ID.

Type
Optional[dict]

stickers
A list of stickers given to the message.

New in version 1.6.

Type
List[Sticker]

guild
The guild that the message belongs to, if applicable.

Type
Optional[Guild]

raw_mentions
A property that returns an array of user IDs matched with the syntax of <@user_id> in the message content.

This allows you to receive the user IDs of mentioned users even in a private message context.

Type
List[int]

raw_channel_mentions
A property that returns an array of channel IDs matched with the syntax of <#channel_id> in the message content.

Type
List[int]

raw_role_mentions
A property that returns an array of role IDs matched with the syntax of <@&role_id> in the message content.

Type
List[int]

clean_content
A property that returns the content in a “cleaned up” manner. This basically means that mentions are transformed into the way the client shows it. e.g. <#id> will transform into #name.

This will also transform @everyone and @here mentions into non-mentions.


This does not affect markdown. If you want to escape or remove markdown then use utils.escape_markdown() or utils.remove_markdown() respectively, along with this function.

Type
str

created_at
The message’s creation time in UTC.

Type
datetime.datetime

edited_at
A naive UTC datetime object containing the edited time of the message.

Type
Optional[datetime.datetime]

jump_url
Returns a URL that allows the client to jump to this message.

Type
str

is_system()
bool: Whether the message is a system message.

New in version 1.3.

system_content
A property that returns the content that is rendered regardless of the Message.type.

In the case of MessageType.default, this just returns the regular Message.content. Otherwise this returns an English message denoting the contents of the system message.

Type
str

await delete(*, delay=None)
This function is a coroutine.

Deletes the message.

Your own messages could be deleted without any proper permissions. However to delete other people’s messages, you need the manage_messages permission.

Changed in version 1.1: Added the new delay keyword-only parameter.

Parameters
delay (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message. If the deletion fails then it is silently ignored.

Raises
Forbidden – You do not have proper permissions to delete the message.

NotFound – The message was deleted already

HTTPException – Deleting the message failed.

await edit(**fields)
This function is a coroutine.

Edits the message.

The content must be able to be transformed into a string via str(content).

Changed in version 1.3: The suppress keyword-only parameter was added.

Parameters
content (Optional[str]) – The new content to replace the message with. Could be None to remove the content.

embed (Optional[Embed]) – The new embed to replace the original with. Could be None to remove the embed.

suppress (bool) – Whether to suppress embeds for the message. This removes all the embeds if set to True. If set to False this brings the embeds back if they were suppressed. Using this parameter requires manage_messages.

delete_after (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message we just edited. If the deletion fails, then it is silently ignored.

allowed_mentions (Optional[AllowedMentions]) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

Raises
HTTPException – Editing the message failed.

Forbidden – Tried to suppress a message without permissions or edited a message’s content or embed that isn’t yours.

await publish()
This function is a coroutine.

Publishes this message to your announcement channel.

You must have the send_messages permission to do this.

If the message is not your own then the manage_messages permission is also needed.

Raises
Forbidden – You do not have the proper permissions to publish this message.

HTTPException – Publishing the message failed.

await pin(*, reason=None)
This function is a coroutine.

Pins the message.

You must have the manage_messages permission to do this in a non-private channel context.

Parameters
reason (Optional[str]) –

The reason for pinning the message. Shows up on the audit log.

New in version 1.4.

Raises
Forbidden – You do not have permissions to pin the message.

NotFound – The message or channel was not found or deleted.

HTTPException – Pinning the message failed, probably due to the channel having more than 50 pinned messages.

await unpin(*, reason=None)
This function is a coroutine.

Unpins the message.

You must have the manage_messages permission to do this in a non-private channel context.

Parameters
reason (Optional[str]) –

The reason for unpinning the message. Shows up on the audit log.

New in version 1.4.

Raises
Forbidden – You do not have permissions to unpin the message.

NotFound – The message or channel was not found or deleted.

HTTPException – Unpinning the message failed.

await add_reaction(emoji)
This function is a coroutine.

Add a reaction to the message.

The emoji may be a unicode emoji or a custom guild Emoji.

You must have the read_message_history permission to use this. If nobody else has reacted to the message using this emoji, the add_reactions permission is required.

Parameters
emoji (Union[Emoji, Reaction, PartialEmoji, str]) – The emoji to react with.

Raises
HTTPException – Adding the reaction failed.

Forbidden – You do not have the proper permissions to react to the message.

NotFound – The emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

await remove_reaction(emoji, member)
This function is a coroutine.

Remove a reaction by the member from the message.

The emoji may be a unicode emoji or a custom guild Emoji.

If the reaction is not your own (i.e. member parameter is not you) then the manage_messages permission is needed.

The member parameter must represent a member and meet the abc.Snowflake abc.

Parameters
emoji (Union[Emoji, Reaction, PartialEmoji, str]) – The emoji to remove.

member (abc.Snowflake) – The member for which to remove the reaction.

Raises
HTTPException – Removing the reaction failed.

Forbidden – You do not have the proper permissions to remove the reaction.

NotFound – The member or emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

await clear_reaction(emoji)
This function is a coroutine.

Clears a specific reaction from the message.

The emoji may be a unicode emoji or a custom guild Emoji.

You need the manage_messages permission to use this.

New in version 1.3.

Parameters
emoji (Union[Emoji, Reaction, PartialEmoji, str]) – The emoji to clear.

Raises
HTTPException – Clearing the reaction failed.

Forbidden – You do not have the proper permissions to clear the reaction.

NotFound – The emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

await clear_reactions()
This function is a coroutine.

Removes all the reactions from the message.

You need the manage_messages permission to use this.

Raises
HTTPException – Removing the reactions failed.

Forbidden – You do not have the proper permissions to remove all the reactions.

await ack()
This function is a coroutine.

Marks this message as read.

The user must not be a bot user.

Deprecated since version 1.7.

Raises
HTTPException – Acking failed.

ClientException – You must not be a bot user.

await reply(content=None, **kwargs)
This function is a coroutine.

A shortcut method to abc.Messageable.send() to reply to the Message.

New in version 1.6.

Raises
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size or you specified both file and files.

Returns
The message that was sent.

Return type
Message

to_reference(*, fail_if_not_exists=True)
Creates a MessageReference from the current message.

New in version 1.6.

Parameters
fail_if_not_exists (bool) –

Whether replying using the message reference should raise HTTPException if the message no longer exists or Discord could not fetch the message.

New in version 1.7.

Returns
The reference to this message.

Return type
MessageReference

DeletedReferencedMessage
class discord.DeletedReferencedMessage
Attributes
channel_id
guild_id
id
A special sentinel type that denotes whether the resolved message referenced message had since been deleted.

The purpose of this class is to separate referenced messages that could not be fetched and those that were previously fetched but have since been deleted.

New in version 1.6.

id
The message ID of the deleted referenced message.

Type
int

channel_id
The channel ID of the deleted referenced message.

Type
int

guild_id
The guild ID of the deleted referenced message.

Type
Optional[int]

Reaction
class discord.Reaction
Attributes
count
custom_emoji
emoji
me
message
Methods
clear
remove
users
Represents a reaction to a message.

Depending on the way this object was created, some of the attributes can have a value of None.

x == y
Checks if two reactions are equal. This works by checking if the emoji is the same. So two messages with the same reaction will be considered “equal”.

x != y
Checks if two reactions are not equal.

hash(x)
Returns the reaction’s hash.

str(x)
Returns the string form of the reaction’s emoji.

emoji
The reaction emoji. May be a custom emoji, or a unicode emoji.

Type
Union[Emoji, PartialEmoji, str]

count
Number of times this reaction was made

Type
int

me
If the user sent this reaction.

Type
bool

message
Message this reaction is for.

Type
Message

async for ... in users(limit=None, after=None)
Returns an AsyncIterator representing the users that have reacted to the message.

The after parameter must represent a member and meet the abc.Snowflake abc.

Examples

Usage

content_copy
# I do not actually recommend doing this.
async for user in reaction.users():
    await channel.send('{0} has reacted with {1.emoji}!'.format(user, reaction))
Flattening into a list:

content_copy
users = await reaction.users().flatten()
# users is now a list of User...
winner = random.choice(users)
await channel.send('{} has won the raffle.'.format(winner))
Parameters
limit (int) – The maximum number of results to return. If not provided, returns all the users who reacted to the message.

after (abc.Snowflake) – For pagination, reactions are sorted by member.

Raises
HTTPException – Getting the users for the reaction failed.

Yields
Union[User, Member] – The member (if retrievable) or the user that has reacted to this message. The case where it can be a Member is in a guild message context. Sometimes it can be a User if the member has left the guild.

custom_emoji
If this is a custom emoji.

Type
bool

await remove(user)
This function is a coroutine.

Remove the reaction by the provided User from the message.

If the reaction is not your own (i.e. user parameter is not you) then the manage_messages permission is needed.

The user parameter must represent a user or member and meet the abc.Snowflake abc.

Parameters
user (abc.Snowflake) – The user or member from which to remove the reaction.

Raises
HTTPException – Removing the reaction failed.

Forbidden – You do not have the proper permissions to remove the reaction.

NotFound – The user you specified, or the reaction’s message was not found.

await clear()
This function is a coroutine.

Clears this reaction from the message.

You need the manage_messages permission to use this.

New in version 1.3.

Raises
HTTPException – Clearing the reaction failed.

Forbidden – You do not have the proper permissions to clear the reaction.

NotFound – The emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

CallMessage
class discord.CallMessage
Attributes
call_ended
channel
duration
ended_timestamp
message
participants
Represents a group call message from Discord.

This is only received in cases where the message type is equivalent to MessageType.call.

Deprecated since version 1.7.

ended_timestamp
A naive UTC datetime object that represents the time that the call has ended.

Type
Optional[datetime.datetime]

participants
The list of users that are participating in this call.

Type
List[User]

message
The message associated with this call message.

Type
Message

call_ended
Indicates if the call has ended.

Deprecated since version 1.7.

Type
bool

channel
The private channel associated with this message.

Deprecated since version 1.7.

Type
GroupChannel

duration
Queries the duration of the call.

If the call has not ended then the current duration will be returned.

Deprecated since version 1.7.

Returns
The timedelta object representing the duration.

Return type
datetime.timedelta

GroupCall
class discord.GroupCall
Attributes
call
channel
connected
region
ringing
unavailable
Methods
voice_state_for
Represents the actual group call from Discord.

This is accompanied with a CallMessage denoting the information.

Deprecated since version 1.7.

call
The call message associated with this group call.

Type
CallMessage

unavailable
Denotes if this group call is unavailable.

Type
bool

ringing
A list of users that are currently being rung to join the call.

Type
List[User]

region
The guild region the group call is being hosted on.

Type
VoiceRegion

connected
A property that returns all users that are currently in this call.

Deprecated since version 1.7.

Type
List[User]

channel
Returns the channel the group call is in.

Deprecated since version 1.7.

Type
GroupChannel

voice_state_for(user)
Retrieves the VoiceState for a specified User.

If the User has no voice state then this function returns None.

Deprecated since version 1.7.

Parameters
user (User) – The user to retrieve the voice state for.

Returns
The voice state associated with this user.

Return type
Optional[VoiceState]

Guild
class discord.Guild
Attributes
afk_channel
afk_timeout
banner
banner_url
bitrate_limit
categories
channels
chunked
created_at
default_notifications
default_role
description
discovery_splash
discovery_splash_url
emoji_limit
emojis
explicit_content_filter
features
filesize_limit
icon
icon_url
id
large
max_members
max_presences
max_video_channel_users
me
member_count
members
mfa_level
name
owner
owner_id
preferred_locale
premium_subscriber_role
premium_subscribers
premium_subscription_count
premium_tier
public_updates_channel
region
roles
rules_channel
self_role
shard_id
splash
splash_url
stage_channels
system_channel
system_channel_flags
text_channels
unavailable
verification_level
voice_channels
voice_client
Methods
ack
audit_logs
ban
banner_url_as
bans
by_category
change_voice_state
chunk
create_category
create_category_channel
create_custom_emoji
create_integration
create_role
create_stage_channel
create_template
create_text_channel
create_voice_channel
delete
discovery_splash_url_as
edit
edit_role_positions
estimate_pruned_members
fetch_ban
fetch_channels
fetch_emoji
fetch_emojis
fetch_member
fetch_members
fetch_roles
get_channel
get_member
get_member_named
get_role
icon_url_as
integrations
invites
is_icon_animated
kick
leave
prune_members
query_members
splash_url_as
templates
unban
vanity_invite
webhooks
widget
Represents a Discord guild.

This is referred to as a “server” in the official Discord UI.

x == y
Checks if two guilds are equal.

x != y
Checks if two guilds are not equal.

hash(x)
Returns the guild’s hash.

str(x)
Returns the guild’s name.

name
The guild name.

Type
str

emojis
All emojis that the guild owns.

Type
Tuple[Emoji, …]

region
The region the guild belongs on. There is a chance that the region will be a str if the value is not recognised by the enumerator.

Type
VoiceRegion

afk_timeout
The timeout to get sent to the AFK channel.

Type
int

afk_channel
The channel that denotes the AFK channel. None if it doesn’t exist.

Type
Optional[VoiceChannel]

icon
The guild’s icon.

Type
Optional[str]

id
The guild’s ID.

Type
int

owner_id
The guild owner’s ID. Use Guild.owner instead.

Type
int

unavailable
Indicates if the guild is unavailable. If this is True then the reliability of other attributes outside of Guild.id is slim and they might all be None. It is best to not do anything with the guild if it is unavailable.

Check the on_guild_unavailable() and on_guild_available() events.

Type
bool

max_presences
The maximum amount of presences for the guild.

Type
Optional[int]

max_members
The maximum amount of members for the guild.


This attribute is only available via Client.fetch_guild().

Type
Optional[int]

max_video_channel_users
The maximum amount of users in a video channel.

New in version 1.4.

Type
Optional[int]

banner
The guild’s banner.

Type
Optional[str]

description
The guild’s description.

Type
Optional[str]

mfa_level
Indicates the guild’s two factor authorisation level. If this value is 0 then the guild does not require 2FA for their administrative members. If the value is 1 then they do.

Type
int

verification_level
The guild’s verification level.

Type
VerificationLevel

explicit_content_filter
The guild’s explicit content filter.

Type
ContentFilter

default_notifications
The guild’s notification settings.

Type
NotificationLevel

features
A list of features that the guild has. They are currently as follows:

VIP_REGIONS: Guild has VIP voice regions

VANITY_URL: Guild can have a vanity invite URL (e.g. discord.gg/discord-api)

INVITE_SPLASH: Guild’s invite page can have a special splash.

VERIFIED: Guild is a verified server.

PARTNERED: Guild is a partnered server.

MORE_EMOJI: Guild is allowed to have more than 50 custom emoji.

DISCOVERABLE: Guild shows up in Server Discovery.

FEATURABLE: Guild is able to be featured in Server Discovery.

COMMUNITY: Guild is a community server.

COMMERCE: Guild can sell things using store channels.

PUBLIC: Guild is a public guild.

NEWS: Guild can create news channels.

BANNER: Guild can upload and use a banner (i.e. banner_url()).

ANIMATED_ICON: Guild can upload an animated icon.

PUBLIC_DISABLED: Guild cannot be public.

WELCOME_SCREEN_ENABLED: Guild has enabled the welcome screen

MEMBER_VERIFICATION_GATE_ENABLED: Guild has Membership Screening enabled.

PREVIEW_ENABLED: Guild can be viewed before being accepted via Membership Screening.

Type
List[str]

splash
The guild’s invite splash.

Type
Optional[str]

premium_tier
The premium tier for this guild. Corresponds to “Nitro Server” in the official UI. The number goes from 0 to 3 inclusive.

Type
int

premium_subscription_count
The number of “boosts” this guild currently has.

Type
int

preferred_locale
The preferred locale for the guild. Used when filtering Server Discovery results to a specific language.

Type
Optional[str]

discovery_splash
The guild’s discovery splash.

New in version 1.3.

Type
str

async for ... in fetch_members(*, limit=1000, after=None)
Retrieves an AsyncIterator that enables receiving the guild’s members. In order to use this, Intents.members() must be enabled.


This method is an API call. For general usage, consider members instead.

New in version 1.3.

All parameters are optional.

Parameters
limit (Optional[int]) – The number of members to retrieve. Defaults to 1000. Pass None to fetch all members. Note that this is potentially slow.

after (Optional[Union[abc.Snowflake, datetime.datetime]]) – Retrieve members after this date or object. If a date is provided it must be a timezone-naive datetime representing UTC time.

Raises
ClientException – The members intent is not enabled.

HTTPException – Getting the members failed.

Yields
Member – The member with the member data parsed.

Examples

Usage

content_copy
async for member in guild.fetch_members(limit=150):
    print(member.name)
Flattening into a list

content_copy
members = await guild.fetch_members(limit=150).flatten()
# members is now a list of Member...
async for ... in audit_logs(*, limit=100, before=None, after=None, oldest_first=None, user=None, action=None)
Returns an AsyncIterator that enables receiving the guild’s audit logs.

You must have the view_audit_log permission to use this.

Examples

Getting the first 100 entries:

content_copy
async for entry in guild.audit_logs(limit=100):
    print('{0.user} did {0.action} to {0.target}'.format(entry))
Getting entries for a specific action:

content_copy
async for entry in guild.audit_logs(action=discord.AuditLogAction.ban):
    print('{0.user} banned {0.target}'.format(entry))
Getting entries made by a specific user:

content_copy
entries = await guild.audit_logs(limit=None, user=guild.me).flatten()
await channel.send('I made {} moderation actions.'.format(len(entries)))
Parameters
limit (Optional[int]) – The number of entries to retrieve. If None retrieve all entries.

before (Union[abc.Snowflake, datetime.datetime]) – Retrieve entries before this date or entry. If a date is provided it must be a timezone-naive datetime representing UTC time.

after (Union[abc.Snowflake, datetime.datetime]) – Retrieve entries after this date or entry. If a date is provided it must be a timezone-naive datetime representing UTC time.

oldest_first (bool) – If set to True, return entries in oldest->newest order. Defaults to True if after is specified, otherwise False.

user (abc.Snowflake) – The moderator to filter entries from.

action (AuditLogAction) – The action to filter with.

Raises
Forbidden – You are not allowed to fetch audit logs

HTTPException – An error occurred while fetching the audit logs.

Yields
AuditLogEntry – The audit log entry.

channels
A list of channels that belongs to this guild.

Type
List[abc.GuildChannel]

large
Indicates if the guild is a ‘large’ guild.

A large guild is defined as having more than large_threshold count members, which for this library is set to the maximum of 250.

Type
bool

voice_channels
A list of voice channels that belongs to this guild.

This is sorted by the position and are in UI order from top to bottom.

Type
List[VoiceChannel]

stage_channels
A list of voice channels that belongs to this guild.

New in version 1.7.

This is sorted by the position and are in UI order from top to bottom.

Type
List[StageChannel]

me
Similar to Client.user except an instance of Member. This is essentially used to get the member version of yourself.

Type
Member

voice_client
Returns the VoiceProtocol associated with this guild, if any.

Type
Optional[VoiceProtocol]

text_channels
A list of text channels that belongs to this guild.

This is sorted by the position and are in UI order from top to bottom.

Type
List[TextChannel]

categories
A list of categories that belongs to this guild.

This is sorted by the position and are in UI order from top to bottom.

Type
List[CategoryChannel]

by_category()
Returns every CategoryChannel and their associated channels.

These channels and categories are sorted in the official Discord UI order.

If the channels do not have a category, then the first element of the tuple is None.

Returns
The categories and their associated channels.

Return type
List[Tuple[Optional[CategoryChannel], List[abc.GuildChannel]]]

get_channel(channel_id)
Returns a channel with the given ID.

Parameters
channel_id (int) – The ID to search for.

Returns
The returned channel or None if not found.

Return type
Optional[abc.GuildChannel]

system_channel
Returns the guild’s channel used for system messages.

If no channel is set, then this returns None.

Type
Optional[TextChannel]

system_channel_flags
Returns the guild’s system channel settings.

Type
SystemChannelFlags

rules_channel
Return’s the guild’s channel used for the rules. The guild must be a Community guild.

If no channel is set, then this returns None.

New in version 1.3.

Type
Optional[TextChannel]

public_updates_channel
Return’s the guild’s channel where admins and moderators of the guilds receive notices from Discord. The guild must be a Community guild.

If no channel is set, then this returns None.

New in version 1.4.

Type
Optional[TextChannel]

emoji_limit
The maximum number of emoji slots this guild has.

Type
int

bitrate_limit
The maximum bitrate for voice channels this guild can have.

Type
float

filesize_limit
The maximum number of bytes files can have when uploaded to this guild.

Type
int

members
A list of members that belong to this guild.

Type
List[Member]

get_member(user_id)
Returns a member with the given ID.

Parameters
user_id (int) – The ID to search for.

Returns
The member or None if not found.

Return type
Optional[Member]

premium_subscribers
A list of members who have “boosted” this guild.

Type
List[Member]

roles
Returns a list of the guild’s roles in hierarchy order.

The first element of this list will be the lowest role in the hierarchy.

Type
List[Role]

get_role(role_id)
Returns a role with the given ID.

Parameters
role_id (int) – The ID to search for.

Returns
The role or None if not found.

Return type
Optional[Role]

default_role
Gets the @everyone role that all members have by default.

Type
Role

premium_subscriber_role
Gets the premium subscriber role, AKA “boost” role, in this guild.

New in version 1.6.

Type
Optional[Role]

self_role
Gets the role associated with this client’s user, if any.

New in version 1.6.

Type
Optional[Role]

owner
The member that owns the guild.

Type
Optional[Member]

icon_url
Returns the guild’s icon asset.

Type
Asset

is_icon_animated()
bool: Returns True if the guild has an animated icon.

icon_url_as(*, format=None, static_format='webp', size=1024)
Returns an Asset for the guild’s icon.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’, ‘png’ or ‘gif’, and ‘gif’ is only valid for animated avatars. The size must be a power of 2 between 16 and 4096.

Parameters
format (Optional[str]) – The format to attempt to convert the icon to. If the format is None, then it is automatically detected into either ‘gif’ or static_format depending on the icon being animated or not.

static_format (Optional[str]) – Format to attempt to convert only non-animated icons to.

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

banner_url
Returns the guild’s banner asset.

Type
Asset

banner_url_as(*, format='webp', size=2048)
Returns an Asset for the guild’s banner.

The format must be one of ‘webp’, ‘jpeg’, or ‘png’. The size must be a power of 2 between 16 and 4096.

Parameters
format (str) – The format to attempt to convert the banner to.

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

splash_url
Returns the guild’s invite splash asset.

Type
Asset

splash_url_as(*, format='webp', size=2048)
Returns an Asset for the guild’s invite splash.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’, or ‘png’. The size must be a power of 2 between 16 and 4096.

Parameters
format (str) – The format to attempt to convert the splash to.

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

discovery_splash_url
Returns the guild’s discovery splash asset.

New in version 1.3.

Type
Asset

discovery_splash_url_as(*, format='webp', size=2048)
Returns an Asset for the guild’s discovery splash.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’, or ‘png’. The size must be a power of 2 between 16 and 4096.

New in version 1.3.

Parameters
format (str) – The format to attempt to convert the splash to.

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

member_count
Returns the true member count regardless of it being loaded fully or not.


Due to a Discord limitation, in order for this attribute to remain up-to-date and accurate, it requires Intents.members to be specified.

Type
int

chunked
Returns a boolean indicating if the guild is “chunked”.

A chunked guild means that member_count is equal to the number of members stored in the internal members cache.

If this value returns False, then you should request for offline members.

Type
bool

shard_id
Returns the shard ID for this guild if applicable.

Type
int

created_at
Returns the guild’s creation time in UTC.

Type
datetime.datetime

get_member_named(name)
Returns the first member found that matches the name provided.

The name can have an optional discriminator argument, e.g. “Jake#0001” or “Jake” will both do the lookup. However the former will give a more precise result. Note that the discriminator must have all 4 digits for this to work.

If a nickname is passed, then it is looked up via the nickname. Note however, that a nickname + discriminator combo will not lookup the nickname but rather the username + discriminator combo due to nickname + discriminator not being unique.

If no member is found, None is returned.

Parameters
name (str) – The name of the member to lookup with an optional discriminator.

Returns
The member in this guild with the associated name. If not found then None is returned.

Return type
Optional[Member]

await create_text_channel(name, *, overwrites=None, category=None, reason=None, **options)
This function is a coroutine.

Creates a TextChannel for the guild.

Note that you need the manage_channels permission to create the channel.

The overwrites parameter can be used to create a ‘secret’ channel upon creation. This parameter expects a dict of overwrites with the target (either a Member or a Role) as the key and a PermissionOverwrite as the value.


Creating a channel of a specified position will not update the position of other channels to follow suit. A follow-up call to edit() will be required to update the position of the channel in the channel list.

Examples

Creating a basic channel:

content_copy
channel = await guild.create_text_channel('cool-channel')
Creating a “secret” channel:

content_copy
overwrites = {
    guild.default_role: discord.PermissionOverwrite(read_messages=False),
    guild.me: discord.PermissionOverwrite(read_messages=True)
}

channel = await guild.create_text_channel('secret', overwrites=overwrites)
Parameters
name (str) – The channel’s name.

overwrites – A dict of target (either a role or a member) to PermissionOverwrite to apply upon creation of a channel. Useful for creating secret channels.

category (Optional[CategoryChannel]) – The category to place the newly created channel under. The permissions will be automatically synced to category if no overwrites are provided.

position (int) – The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0.

topic (Optional[str]) – The new channel’s topic.

slowmode_delay (int) – Specifies the slowmode rate limit for user in this channel, in seconds. The maximum value possible is 21600.

nsfw (bool) – To mark the channel as NSFW or not.

reason (Optional[str]) – The reason for creating this channel. Shows up on the audit log.

Raises
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

InvalidArgument – The permission overwrite information is not in proper form.

Returns
The channel that was just created.

Return type
TextChannel

await create_voice_channel(name, *, overwrites=None, category=None, reason=None, **options)
This function is a coroutine.

This is similar to create_text_channel() except makes a VoiceChannel instead, in addition to having the following new parameters.

Parameters
bitrate (int) – The channel’s preferred audio bitrate in bits per second.

user_limit (int) – The channel’s limit for number of members that can be in a voice channel.

rtc_region (Optional[VoiceRegion]) –

The region for the voice channel’s voice communication. A value of None indicates automatic voice region detection.

New in version 1.7.

Raises
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

InvalidArgument – The permission overwrite information is not in proper form.

Returns
The channel that was just created.

Return type
VoiceChannel

await create_stage_channel(name, *, topic=None, category=None, overwrites=None, reason=None, position=None)
This function is a coroutine.

This is similar to create_text_channel() except makes a StageChannel instead.


The slowmode_delay and nsfw parameters are not supported in this function.

New in version 1.7.

Raises
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

InvalidArgument – The permission overwrite information is not in proper form.

Returns
The channel that was just created.

Return type
StageChannel

await create_category(name, *, overwrites=None, reason=None, position=None)
This function is a coroutine.

Same as create_text_channel() except makes a CategoryChannel instead.


The category parameter is not supported in this function since categories cannot have categories.

Raises
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

InvalidArgument – The permission overwrite information is not in proper form.

Returns
The channel that was just created.

Return type
CategoryChannel

await create_category_channel(name, *, overwrites=None, reason=None, position=None)
This function is a coroutine.

Same as create_text_channel() except makes a CategoryChannel instead.


The category parameter is not supported in this function since categories cannot have categories.

Raises
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

InvalidArgument – The permission overwrite information is not in proper form.

Returns
The channel that was just created.

Return type
CategoryChannel

await leave()
This function is a coroutine.

Leaves the guild.


You cannot leave the guild that you own, you must delete it instead via delete().

Raises
HTTPException – Leaving the guild failed.

await delete()
This function is a coroutine.

Deletes the guild. You must be the guild owner to delete the guild.

Raises
HTTPException – Deleting the guild failed.

Forbidden – You do not have permissions to delete the guild.

await edit(*, reason=None, **fields)
This function is a coroutine.

Edits the guild.

You must have the manage_guild permission to edit the guild.

Changed in version 1.4: The rules_channel and public_updates_channel keyword-only parameters were added.

Parameters
name (str) – The new name of the guild.

description (str) – The new description of the guild. This is only available to guilds that contain PUBLIC in Guild.features.

icon (bytes) – A bytes-like object representing the icon. Only PNG/JPEG is supported. GIF is only available to guilds that contain ANIMATED_ICON in Guild.features. Could be None to denote removal of the icon.

banner (bytes) – A bytes-like object representing the banner. Could be None to denote removal of the banner.

splash (bytes) – A bytes-like object representing the invite splash. Only PNG/JPEG supported. Could be None to denote removing the splash. This is only available to guilds that contain INVITE_SPLASH in Guild.features.

region (VoiceRegion) – The new region for the guild’s voice communication.

afk_channel (Optional[VoiceChannel]) – The new channel that is the AFK channel. Could be None for no AFK channel.

afk_timeout (int) – The number of seconds until someone is moved to the AFK channel.

owner (Member) – The new owner of the guild to transfer ownership to. Note that you must be owner of the guild to do this.

verification_level (VerificationLevel) – The new verification level for the guild.

default_notifications (NotificationLevel) – The new default notification level for the guild.

explicit_content_filter (ContentFilter) – The new explicit content filter for the guild.

vanity_code (str) – The new vanity code for the guild.

system_channel (Optional[TextChannel]) – The new channel that is used for the system channel. Could be None for no system channel.

system_channel_flags (SystemChannelFlags) – The new system channel settings to use with the new system channel.

preferred_locale (str) – The new preferred locale for the guild. Used as the primary language in the guild. If set, this must be an ISO 639 code, e.g. en-US or ja or zh-CN.

rules_channel (Optional[TextChannel]) – The new channel that is used for rules. This is only available to guilds that contain PUBLIC in Guild.features. Could be None for no rules channel.

public_updates_channel (Optional[TextChannel]) – The new channel that is used for public updates from Discord. This is only available to guilds that contain PUBLIC in Guild.features. Could be None for no public updates channel.

reason (Optional[str]) – The reason for editing this guild. Shows up on the audit log.

Raises
Forbidden – You do not have permissions to edit the guild.

HTTPException – Editing the guild failed.

InvalidArgument – The image format passed in to icon is invalid. It must be PNG or JPG. This is also raised if you are not the owner of the guild and request an ownership transfer.

await fetch_channels()
This function is a coroutine.

Retrieves all abc.GuildChannel that the guild has.


This method is an API call. For general usage, consider channels instead.

New in version 1.2.

Raises
InvalidData – An unknown channel type was received from Discord.

HTTPException – Retrieving the channels failed.

Returns
All channels in the guild.

Return type
List[abc.GuildChannel]

await fetch_member(member_id)
This function is a coroutine.

Retrieves a Member from a guild ID, and a member ID.


This method is an API call. If you have Intents.members and member cache enabled, consider get_member() instead.

Parameters
member_id (int) – The member’s ID to fetch from.

Raises
Forbidden – You do not have access to the guild.

HTTPException – Fetching the member failed.

Returns
The member from the member ID.

Return type
Member

await fetch_ban(user)
This function is a coroutine.

Retrieves the BanEntry for a user.

You must have the ban_members permission to get this information.

Parameters
user (abc.Snowflake) – The user to get ban information from.

Raises
Forbidden – You do not have proper permissions to get the information.

NotFound – This user is not banned.

HTTPException – An error occurred while fetching the information.

Returns
The BanEntry object for the specified user.

Return type
BanEntry

await bans()
This function is a coroutine.

Retrieves all the users that are banned from the guild as a list of BanEntry.

You must have the ban_members permission to get this information.

Raises
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

Returns
A list of BanEntry objects.

Return type
List[BanEntry]

await prune_members(*, days, compute_prune_count=True, roles=None, reason=None)
This function is a coroutine.

Prunes the guild from its inactive members.

The inactive members are denoted if they have not logged on in days number of days and they have no roles.

You must have the kick_members permission to use this.

To check how many members you would prune without actually pruning, see the estimate_pruned_members() function.

To prune members that have specific roles see the roles parameter.

Changed in version 1.4: The roles keyword-only parameter was added.

Parameters
days (int) – The number of days before counting as inactive.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

compute_prune_count (bool) – Whether to compute the prune count. This defaults to True which makes it prone to timeouts in very large guilds. In order to prevent timeouts, you must set this to False. If this is set to False, then this function will always return None.

roles (Optional[List[abc.Snowflake]]) – A list of abc.Snowflake that represent roles to include in the pruning process. If a member has a role that is not specified, they’ll be excluded.

Raises
Forbidden – You do not have permissions to prune members.

HTTPException – An error occurred while pruning members.

InvalidArgument – An integer was not passed for days.

Returns
The number of members pruned. If compute_prune_count is False then this returns None.

Return type
Optional[int]

await templates()
This function is a coroutine.

Gets the list of templates from this guild.

Requires manage_guild permissions.

New in version 1.7.

Raises
Forbidden – You don’t have permissions to get the templates.

Returns
The templates for this guild.

Return type
List[Template]

await webhooks()
This function is a coroutine.

Gets the list of webhooks from this guild.

Requires manage_webhooks permissions.

Raises
Forbidden – You don’t have permissions to get the webhooks.

Returns
The webhooks for this guild.

Return type
List[Webhook]

await estimate_pruned_members(*, days, roles=None)
This function is a coroutine.

Similar to prune_members() except instead of actually pruning members, it returns how many members it would prune from the guild had it been called.

Parameters
days (int) – The number of days before counting as inactive.

roles (Optional[List[abc.Snowflake]]) –

A list of abc.Snowflake that represent roles to include in the estimate. If a member has a role that is not specified, they’ll be excluded.

New in version 1.7.

Raises
Forbidden – You do not have permissions to prune members.

HTTPException – An error occurred while fetching the prune members estimate.

InvalidArgument – An integer was not passed for days.

Returns
The number of members estimated to be pruned.

Return type
int

await invites()
This function is a coroutine.

Returns a list of all active instant invites from the guild.

You must have the manage_guild permission to get this information.

Raises
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

Returns
The list of invites that are currently active.

Return type
List[Invite]

await create_template(*, name, description=None)
This function is a coroutine.

Creates a template for the guild.

You must have the manage_guild permission to do this.

New in version 1.7.

Parameters
name (str) – The name of the template.

description (Optional[str]) – The description of the template.

await create_integration(*, type, id)
This function is a coroutine.

Attaches an integration to the guild.

You must have the manage_guild permission to do this.

New in version 1.4.

Parameters
type (str) – The integration type (e.g. Twitch).

id (int) – The integration ID.

Raises
Forbidden – You do not have permission to create the integration.

HTTPException – The account could not be found.

await integrations()
This function is a coroutine.

Returns a list of all integrations attached to the guild.

You must have the manage_guild permission to do this.

New in version 1.4.

Raises
Forbidden – You do not have permission to create the integration.

HTTPException – Fetching the integrations failed.

Returns
The list of integrations that are attached to the guild.

Return type
List[Integration]

await fetch_emojis()
This function is a coroutine.

Retrieves all custom Emojis from the guild.


This method is an API call. For general usage, consider emojis instead.

Raises
HTTPException – An error occurred fetching the emojis.

Returns
The retrieved emojis.

Return type
List[Emoji]

await fetch_emoji(emoji_id)
This function is a coroutine.

Retrieves a custom Emoji from the guild.


This method is an API call. For general usage, consider iterating over emojis instead.

Parameters
emoji_id (int) – The emoji’s ID.

Raises
NotFound – The emoji requested could not be found.

HTTPException – An error occurred fetching the emoji.

Returns
The retrieved emoji.

Return type
Emoji

await create_custom_emoji(*, name, image, roles=None, reason=None)
This function is a coroutine.

Creates a custom Emoji for the guild.

There is currently a limit of 50 static and animated emojis respectively per guild, unless the guild has the MORE_EMOJI feature which extends the limit to 200.

You must have the manage_emojis permission to do this.

Parameters
name (str) – The emoji name. Must be at least 2 characters.

image (bytes) – The bytes-like object representing the image data to use. Only JPG, PNG and GIF images are supported.

roles (Optional[List[Role]]) – A list of Roles that can use this emoji. Leave empty to make it available to everyone.

reason (Optional[str]) – The reason for creating this emoji. Shows up on the audit log.

Raises
Forbidden – You are not allowed to create emojis.

HTTPException – An error occurred creating an emoji.

Returns
The created emoji.

Return type
Emoji

await fetch_roles()
This function is a coroutine.

Retrieves all Role that the guild has.


This method is an API call. For general usage, consider roles instead.

New in version 1.3.

Raises
HTTPException – Retrieving the roles failed.

Returns
All roles in the guild.

Return type
List[Role]

await create_role(*, reason=None, **fields)
This function is a coroutine.

Creates a Role for the guild.

All fields are optional.

You must have the manage_roles permission to do this.

Changed in version 1.6: Can now pass int to colour keyword-only parameter.

Parameters
name (str) – The role name. Defaults to ‘new role’.

permissions (Permissions) – The permissions to have. Defaults to no permissions.

colour (Union[Colour, int]) – The colour for the role. Defaults to Colour.default(). This is aliased to color as well.

hoist (bool) – Indicates if the role should be shown separately in the member list. Defaults to False.

mentionable (bool) – Indicates if the role should be mentionable by others. Defaults to False.

reason (Optional[str]) – The reason for creating this role. Shows up on the audit log.

Raises
Forbidden – You do not have permissions to create the role.

HTTPException – Creating the role failed.

InvalidArgument – An invalid keyword argument was given.

Returns
The newly created role.

Return type
Role

await edit_role_positions(positions, *, reason=None)
This function is a coroutine.

Bulk edits a list of Role in the guild.

You must have the manage_roles permission to do this.

New in version 1.4.

Example:

content_copy
positions = {
    bots_role: 1, # penultimate role
    tester_role: 2,
    admin_role: 6
}

await guild.edit_role_positions(positions=positions)
Parameters
positions – A dict of Role to int to change the positions of each given role.

reason (Optional[str]) – The reason for editing the role positions. Shows up on the audit log.

Raises
Forbidden – You do not have permissions to move the roles.

HTTPException – Moving the roles failed.

InvalidArgument – An invalid keyword argument was given.

Returns
A list of all the roles in the guild.

Return type
List[Role]

await kick(user, *, reason=None)
This function is a coroutine.

Kicks a user from the guild.

The user must meet the abc.Snowflake abc.

You must have the kick_members permission to do this.

Parameters
user (abc.Snowflake) – The user to kick from their guild.

reason (Optional[str]) – The reason the user got kicked.

Raises
Forbidden – You do not have the proper permissions to kick.

HTTPException – Kicking failed.

await ban(user, *, reason=None, delete_message_days=1)
This function is a coroutine.

Bans a user from the guild.

The user must meet the abc.Snowflake abc.

You must have the ban_members permission to do this.

Parameters
user (abc.Snowflake) – The user to ban from their guild.

delete_message_days (int) – The number of days worth of messages to delete from the user in the guild. The minimum is 0 and the maximum is 7.

reason (Optional[str]) – The reason the user got banned.

Raises
Forbidden – You do not have the proper permissions to ban.

HTTPException – Banning failed.

await unban(user, *, reason=None)
This function is a coroutine.

Unbans a user from the guild.

The user must meet the abc.Snowflake abc.

You must have the ban_members permission to do this.

Parameters
user (abc.Snowflake) – The user to unban.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

Raises
Forbidden – You do not have the proper permissions to unban.

HTTPException – Unbanning failed.

await vanity_invite()
This function is a coroutine.

Returns the guild’s special vanity invite.

The guild must have VANITY_URL in features.

You must have the manage_guild permission to use this as well.

Raises
Forbidden – You do not have the proper permissions to get this.

HTTPException – Retrieving the vanity invite failed.

Returns
The special vanity invite.

Return type
Invite

ack()
This function is a coroutine.

Marks every message in this guild as read.

The user must not be a bot user.

Deprecated since version 1.7.

Raises
HTTPException – Acking failed.

ClientException – You must not be a bot user.

await widget()
This function is a coroutine.

Returns the widget of the guild.


The guild must have the widget enabled to get this information.

Raises
Forbidden – The widget for this guild is disabled.

HTTPException – Retrieving the widget failed.

Returns
The guild’s widget.

Return type
Widget

await chunk(*, cache=True)
This function is a coroutine.

Requests all members that belong to this guild. In order to use this, Intents.members() must be enabled.

This is a websocket operation and can be slow.

New in version 1.5.

Parameters
cache (bool) – Whether to cache the members as well.

Raises
ClientException – The members intent is not enabled.

await query_members(query=None, *, limit=5, user_ids=None, presences=False, cache=True)
This function is a coroutine.

Request members that belong to this guild whose username starts with the query given.

This is a websocket operation and can be slow.

New in version 1.3.

Parameters
query (Optional[str]) – The string that the username’s start with.

limit (int) – The maximum number of members to send back. This must be a number between 5 and 100.

presences (bool) –

Whether to request for presences to be provided. This defaults to False.

New in version 1.6.

cache (bool) – Whether to cache the members internally. This makes operations such as get_member() work for those that matched.

user_ids (Optional[List[int]]) –

List of user IDs to search for. If the user ID is not in the guild then it won’t be returned.

New in version 1.4.

Raises
asyncio.TimeoutError – The query timed out waiting for the members.

ValueError – Invalid parameters were passed to the function

ClientException – The presences intent is not enabled.

Returns
The list of members that have matched the query.

Return type
List[Member]

await change_voice_state(*, channel, self_mute=False, self_deaf=False)
This function is a coroutine.

Changes client’s voice state in the guild.

New in version 1.4.

Parameters
channel (Optional[VoiceChannel]) – Channel the client wants to join. Use None to disconnect.

self_mute (bool) – Indicates if the client should be self-muted.

self_deaf (bool) – Indicates if the client should be self-deafened.

class discord.BanEntry
A namedtuple which represents a ban returned from bans().

reason
The reason this user was banned.

Type
Optional[str]

user
The User that was banned.

Type
User

Integration
class discord.Integration
Represents a guild integration.

New in version 1.4.

id
The integration ID.

Type
int

name
The integration name.

Type
str

guild
The guild of the integration.

Type
Guild

type
The integration type (i.e. Twitch).

Type
str

enabled
Whether the integration is currently enabled.

Type
bool

syncing
Where the integration is currently syncing.

Type
bool

role
The role which the integration uses for subscribers.

Type
Role

enable_emoticons
Whether emoticons should be synced for this integration (currently twitch only).

Type
Optional[bool]

expire_behaviour
The behaviour of expiring subscribers. Aliased to expire_behavior as well.

Type
ExpireBehaviour

expire_grace_period
The grace period (in days) for expiring subscribers.

Type
int

user
The user for the integration.

Type
User

account
The integration account information.

Type
IntegrationAccount

synced_at
When the integration was last synced.

Type
datetime.datetime

await edit(**fields)
This function is a coroutine.

Edits the integration.

You must have the manage_guild permission to do this.

Parameters
expire_behaviour (ExpireBehaviour) – The behaviour when an integration subscription lapses. Aliased to expire_behavior as well.

expire_grace_period (int) – The period (in days) where the integration will ignore lapsed subscriptions.

enable_emoticons (bool) – Where emoticons should be synced for this integration (currently twitch only).

Raises
Forbidden – You do not have permission to edit the integration.

HTTPException – Editing the guild failed.

InvalidArgument – expire_behaviour did not receive a ExpireBehaviour.

await sync()
This function is a coroutine.

Syncs the integration.

You must have the manage_guild permission to do this.

Raises
Forbidden – You do not have permission to sync the integration.

HTTPException – Syncing the integration failed.

await delete()
This function is a coroutine.

Deletes the integration.

You must have the manage_guild permission to do this.

Raises
Forbidden – You do not have permission to delete the integration.

HTTPException – Deleting the integration failed.

class discord.IntegrationAccount
Represents an integration account.

New in version 1.4.

id
The account ID.

Type
int

name
The account name.

Type
str

Member
class discord.Member
Attributes
activities
activity
avatar
avatar_url
bot
color
colour
created_at
default_avatar
default_avatar_url
desktop_status
discriminator
display_name
dm_channel
guild
guild_permissions
id
joined_at
mention
mobile_status
mutual_guilds
name
nick
pending
premium_since
public_flags
raw_status
relationship
roles
status
system
top_role
voice
web_status
Methods
add_roles
avatar_url_as
ban
block
create_dm
edit
fetch_message
history
is_avatar_animated
is_blocked
is_friend
is_on_mobile
kick
mentioned_in
move_to
mutual_friends
permissions_in
pins
profile
remove_friend
remove_roles
request_to_speak
send
send_friend_request
trigger_typing
typing
unban
unblock
Represents a Discord member to a Guild.

This implements a lot of the functionality of User.

x == y
Checks if two members are equal. Note that this works with User instances too.

x != y
Checks if two members are not equal. Note that this works with User instances too.

hash(x)
Returns the member’s hash.

str(x)
Returns the member’s name with the discriminator.

joined_at
A datetime object that specifies the date and time in UTC that the member joined the guild. If the member left and rejoined the guild, this will be the latest date. In certain cases, this can be None.

Type
Optional[datetime.datetime]

activities
The activities that the user is currently doing.


Due to a Discord API limitation, a user’s Spotify activity may not appear if they are listening to a song with a title longer than 128 characters. See GH-1738 for more information.

Type
Tuple[Union[BaseActivity, Spotify]]

guild
The guild that the member belongs to.

Type
Guild

nick
The guild specific nickname of the user.

Type
Optional[str]

pending
Whether the member is pending member verification.

New in version 1.6.

Type
bool

premium_since
A datetime object that specifies the date and time in UTC when the member used their Nitro boost on the guild, if available. This could be None.

Type
Optional[datetime.datetime]

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

Examples

Usage

content_copy
counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

content_copy
messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

Parameters
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time. When using this argument, the maximum limit is 101. Note that if the limit is an even number then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

Raises
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

Yields
Message – The message with the message data parsed.

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.


This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

content_copy
async with channel.typing():
    # do expensive stuff here
    await channel.send('done!')
raw_status
The member’s overall status as a string value.

New in version 1.5.

Type
str

status
The member’s overall status. If the value is unknown, then it will be a str instead.

Type
Status

mobile_status
The member’s status on a mobile device, if applicable.

Type
Status

desktop_status
The member’s status on the desktop client, if applicable.

Type
Status

web_status
The member’s status on the web client, if applicable.

Type
Status

is_on_mobile()
bool: A helper function that determines if a member is active on a mobile device.

colour
A property that returns a colour denoting the rendered colour for the member. If the default colour is the one rendered then an instance of Colour.default() is returned.

There is an alias for this named color.

Type
Colour

color
A property that returns a color denoting the rendered color for the member. If the default color is the one rendered then an instance of Colour.default() is returned.

There is an alias for this named colour.

Type
Colour

roles
A list of Role that the member belongs to. Note that the first element of this list is always the default ‘@everyone’ role.

These roles are sorted by their position in the role hierarchy.

Type
List[Role]

mention
Returns a string that allows you to mention the member.

Type
str

display_name
Returns the user’s display name.

For regular users this is just their username, but if they have a guild specific nickname then that is returned instead.

Type
str

activity
Returns the primary activity the user is currently doing. Could be None if no activity is being done.


Due to a Discord API limitation, this may be None if the user is listening to a song on Spotify with a title longer than 128 characters. See GH-1738 for more information.


A user may have multiple activities, these can be accessed under activities.

Type
Union[BaseActivity, Spotify]

mentioned_in(message)
Checks if the member is mentioned in the specified message.

Parameters
message (Message) – The message to check if you’re mentioned in.

Returns
Indicates if the member is mentioned in the message.

Return type
bool

permissions_in(channel)
An alias for abc.GuildChannel.permissions_for().

Basically equivalent to:

content_copy
channel.permissions_for(self)
Parameters
channel (abc.GuildChannel) – The channel to check your permissions for.

Returns
The resolved permissions for the member.

Return type
Permissions

top_role
Returns the member’s highest role.

This is useful for figuring where a member stands in the role hierarchy chain.

Type
Role

guild_permissions
Returns the member’s guild permissions.

This only takes into consideration the guild permissions and not most of the implied permissions or any of the channel permission overwrites. For 100% accurate permission calculation, please use either permissions_in() or abc.GuildChannel.permissions_for().

This does take into consideration guild ownership and the administrator implication.

Type
Permissions

voice
Returns the member’s current voice state.

Type
Optional[VoiceState]

await ban(**kwargs)
This function is a coroutine.

Bans this member. Equivalent to Guild.ban().

await unban(*, reason=None)
This function is a coroutine.

Unbans this member. Equivalent to Guild.unban().

await kick(*, reason=None)
This function is a coroutine.

Kicks this member. Equivalent to Guild.kick().

await edit(*, reason=None, **fields)
This function is a coroutine.

Edits the member’s data.

Depending on the parameter passed, this requires different permissions listed below:

Parameter

Permission

nick

Permissions.manage_nicknames

mute

Permissions.mute_members

deafen

Permissions.deafen_members

roles

Permissions.manage_roles

voice_channel

Permissions.move_members

All parameters are optional.

Changed in version 1.1: Can now pass None to voice_channel to kick a member from voice.

Parameters
nick (Optional[str]) – The member’s new nickname. Use None to remove the nickname.

mute (bool) – Indicates if the member should be guild muted or un-muted.

deafen (bool) – Indicates if the member should be guild deafened or un-deafened.

suppress (bool) –

Indicates if the member should be suppressed in stage channels.

New in version 1.7.

roles (Optional[List[Role]]) – The member’s new list of roles. This replaces the roles.

voice_channel (Optional[VoiceChannel]) – The voice channel to move the member to. Pass None to kick them from voice.

reason (Optional[str]) – The reason for editing this member. Shows up on the audit log.

Raises
Forbidden – You do not have the proper permissions to the action requested.

HTTPException – The operation failed.

await request_to_speak()
This function is a coroutine.

Request to speak in the connected channel.

Only applies to stage channels.


Requesting members that are not the client is equivalent to edit providing suppress as False.

New in version 1.7.

Raises
Forbidden – You do not have the proper permissions to the action requested.

HTTPException – The operation failed.

await move_to(channel, *, reason=None)
This function is a coroutine.

Moves a member to a new voice channel (they must be connected first).

You must have the move_members permission to use this.

This raises the same exceptions as edit().

Changed in version 1.1: Can now pass None to kick a member from voice.

Parameters
channel (Optional[VoiceChannel]) – The new voice channel to move the member to. Pass None to kick them from voice.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

await add_roles(*roles, reason=None, atomic=True)
This function is a coroutine.

Gives the member a number of Roles.

You must have the manage_roles permission to use this, and the added Roles must appear lower in the list of roles than the highest role of the member.

Parameters
*roles (abc.Snowflake) – An argument list of abc.Snowflake representing a Role to give to the member.

reason (Optional[str]) – The reason for adding these roles. Shows up on the audit log.

atomic (bool) – Whether to atomically add roles. This will ensure that multiple operations will always be applied regardless of the current state of the cache.

Raises
Forbidden – You do not have permissions to add these roles.

HTTPException – Adding roles failed.

avatar
Equivalent to User.avatar

avatar_url
Equivalent to User.avatar_url

avatar_url_as(*, format=None, static_format='webp', size=1024)
Returns an Asset for the avatar the user has.

If the user does not have a traditional avatar, an asset for the default avatar is returned instead.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’, ‘png’ or ‘gif’, and ‘gif’ is only valid for animated avatars. The size must be a power of 2 between 16 and 4096.

Parameters
format (Optional[str]) – The format to attempt to convert the avatar to. If the format is None, then it is automatically detected into either ‘gif’ or static_format depending on the avatar being animated or not.

static_format (Optional[str]) – Format to attempt to convert only non-animated avatars to. Defaults to ‘webp’

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or static_format, or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

block()
This function is a coroutine.

Blocks the user.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Raises
Forbidden – Not allowed to block this user.

HTTPException – Blocking the user failed.

bot
Equivalent to User.bot

await create_dm()
This function is a coroutine.

Creates a DMChannel with this user.

This should be rarely called, as this is done transparently for most people.

Returns
The channel that was created.

Return type
DMChannel

created_at
Equivalent to User.created_at

default_avatar
Equivalent to User.default_avatar

default_avatar_url
Equivalent to User.default_avatar_url

discriminator
Equivalent to User.discriminator

dm_channel
Equivalent to User.dm_channel

await fetch_message(id)
This function is a coroutine.

Retrieves a single Message from the destination.

This can only be used by bot accounts.

Parameters
id (int) – The message ID to look for.

Raises
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

Returns
The message asked for.

Return type
Message

id
Equivalent to User.id

is_avatar_animated()
bool: Indicates if the user has an animated avatar.

is_blocked()
bool: Checks if the user is blocked.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

is_friend()
bool: Checks if the user is your friend.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

mutual_friends()
This function is a coroutine.

Gets all mutual friends of this user.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Raises
Forbidden – Not allowed to get mutual friends of this user.

HTTPException – Getting mutual friends failed.

Returns
The users that are mutual friends.

Return type
List[User]

mutual_guilds
Equivalent to User.mutual_guilds

name
Equivalent to User.name

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.


Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

Raises
HTTPException – Retrieving the pinned messages failed.

Returns
The messages that are currently pinned.

Return type
List[Message]

profile()
This function is a coroutine.

Gets the user’s profile.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Raises
Forbidden – Not allowed to fetch profiles.

HTTPException – Fetching the profile failed.

Returns
The profile of the user.

Return type
Profile

public_flags
Equivalent to User.public_flags

relationship
Equivalent to User.relationship

remove_friend()
This function is a coroutine.

Removes the user as a friend.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Raises
Forbidden – Not allowed to remove this user as a friend.

HTTPException – Removing the user as a friend failed.

await remove_roles(*roles, reason=None, atomic=True)
This function is a coroutine.

Removes Roles from this member.

You must have the manage_roles permission to use this, and the removed Roles must appear lower in the list of roles than the highest role of the member.

Parameters
*roles (abc.Snowflake) – An argument list of abc.Snowflake representing a Role to remove from the member.

reason (Optional[str]) – The reason for removing these roles. Shows up on the audit log.

atomic (bool) – Whether to atomically remove roles. This will ensure that multiple operations will always be applied regardless of the current state of the cache.

Raises
Forbidden – You do not have permissions to remove these roles.

HTTPException – Removing the roles failed.

await send(content=None, *, tts=False, embed=None, file=None, files=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

If the embed parameter is provided, it must be of type Embed and it must be a rich embed type.

Parameters
content (str) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

Raises
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or the reference object is not a Message or MessageReference.

Returns
The message that was sent.

Return type
Message

send_friend_request()
This function is a coroutine.

Sends the user a friend request.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Raises
Forbidden – Not allowed to send a friend request to the user.

HTTPException – Sending the friend request failed.

system
Equivalent to User.system

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

unblock()
This function is a coroutine.

Unblocks the user.

Deprecated since version 1.7.


This can only be used by non-bot accounts.

Raises
Forbidden – Not allowed to unblock this user.

HTTPException – Unblocking the user failed.

Spotify
class discord.Spotify
Attributes
album
album_cover_url
artist
artists
color
colour
created_at
duration
end
name
party_id
start
title
track_id
type
Represents a Spotify listening activity from Discord. This is a special case of Activity that makes it easier to work with the Spotify integration.

x == y
Checks if two activities are equal.

x != y
Checks if two activities are not equal.

hash(x)
Returns the activity’s hash.

str(x)
Returns the string ‘Spotify’.

type
Returns the activity’s type. This is for compatibility with Activity.

It always returns ActivityType.listening.

Type
ActivityType

created_at
When the user started listening in UTC.

New in version 1.3.

Type
Optional[datetime.datetime]

colour
Returns the Spotify integration colour, as a Colour.

There is an alias for this named color

Type
Colour

color
Returns the Spotify integration colour, as a Colour.

There is an alias for this named colour

Type
Colour

name
The activity’s name. This will always return “Spotify”.

Type
str

title
The title of the song being played.

Type
str

artists
The artists of the song being played.

Type
List[str]

artist
The artist of the song being played.

This does not attempt to split the artist information into multiple artists. Useful if there’s only a single artist.

Type
str

album
The album that the song being played belongs to.

Type
str

album_cover_url
The album cover image URL from Spotify’s CDN.

Type
str

track_id
The track ID used by Spotify to identify this song.

Type
str

start
When the user started playing this song in UTC.

Type
datetime.datetime

end
When the user will stop playing this song in UTC.

Type
datetime.datetime

duration
The duration of the song being played.

Type
datetime.timedelta

party_id
The party ID of the listening party.

Type
str

VoiceState
class discord.VoiceState
Attributes
afk
channel
deaf
mute
requested_to_speak_at
self_deaf
self_mute
self_stream
self_video
suppress
Represents a Discord user’s voice state.

deaf
Indicates if the user is currently deafened by the guild.

Type
bool

mute
Indicates if the user is currently muted by the guild.

Type
bool

self_mute
Indicates if the user is currently muted by their own accord.

Type
bool

self_deaf
Indicates if the user is currently deafened by their own accord.

Type
bool

self_stream
Indicates if the user is currently streaming via ‘Go Live’ feature.

New in version 1.3.

Type
bool

self_video
Indicates if the user is currently broadcasting video.

Type
bool

suppress
Indicates if the user is suppressed from speaking.

Only applies to stage channels.

New in version 1.7.

Type
bool

requested_to_speak_at
A datetime object that specifies the date and time in UTC that the member requested to speak. It will be None if they are not requesting to speak anymore or have been accepted to speak.

Only applicable to stage channels.

New in version 1.7.

Type
Optional[datetime.datetime]

afk
Indicates if the user is currently in the AFK channel in the guild.

Type
bool

channel
The voice channel that the user is currently connected to. None if the user is not currently in a voice channel.

Type
Optional[Union[VoiceChannel, StageChannel]]

Emoji
class discord.Emoji
Attributes
animated
available
created_at
guild
guild_id
id
managed
name
require_colons
roles
url
user
Methods
delete
edit
is_usable
url_as
Represents a custom emoji.

Depending on the way this object was created, some of the attributes can have a value of None.

x == y
Checks if two emoji are the same.

x != y
Checks if two emoji are not the same.

hash(x)
Return the emoji’s hash.

iter(x)
Returns an iterator of (field, value) pairs. This allows this class to be used as an iterable in list/dict/etc constructions.

str(x)
Returns the emoji rendered for discord.

name
The name of the emoji.

Type
str

id
The emoji’s ID.

Type
int

require_colons
If colons are required to use this emoji in the client (:PJSalt: vs PJSalt).

Type
bool

animated
Whether an emoji is animated or not.

Type
bool

managed
If this emoji is managed by a Twitch integration.

Type
bool

guild_id
The guild ID the emoji belongs to.

Type
int

available
Whether the emoji is available for use.

Type
bool

user
The user that created the emoji. This can only be retrieved using Guild.fetch_emoji() and having the manage_emojis permission.

Type
Optional[User]

created_at
Returns the emoji’s creation time in UTC.

Type
datetime.datetime

url
Returns the asset of the emoji.

This is equivalent to calling url_as() with the default parameters (i.e. png/gif detection).

Type
Asset

roles
A list of roles that is allowed to use this emoji.

If roles is empty, the emoji is unrestricted.

Type
List[Role]

guild
The guild this emoji belongs to.

Type
Guild

url_as(*, format=None, static_format='png')
Returns an Asset for the emoji’s url.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’, ‘png’ or ‘gif’. ‘gif’ is only valid for animated emojis.

New in version 1.6.

Parameters
format (Optional[str]) – The format to attempt to convert the emojis to. If the format is None, then it is automatically detected as either ‘gif’ or static_format, depending on whether the emoji is animated or not.

static_format (Optional[str]) – Format to attempt to convert only non-animated emoji’s to. Defaults to ‘png’

Raises
InvalidArgument – Bad image format passed to format or static_format.

Returns
The resulting CDN asset.

Return type
Asset

is_usable()
bool: Whether the bot can use this emoji.

New in version 1.3.

await delete(*, reason=None)
This function is a coroutine.

Deletes the custom emoji.

You must have manage_emojis permission to do this.

Parameters
reason (Optional[str]) – The reason for deleting this emoji. Shows up on the audit log.

Raises
Forbidden – You are not allowed to delete emojis.

HTTPException – An error occurred deleting the emoji.

await edit(*, name=None, roles=None, reason=None)
This function is a coroutine.

Edits the custom emoji.

You must have manage_emojis permission to do this.

Parameters
name (str) – The new emoji name.

roles (Optional[list[Role]]) – A list of Roles that can use this emoji. Leave empty to make it available to everyone.

reason (Optional[str]) – The reason for editing this emoji. Shows up on the audit log.

Raises
Forbidden – You are not allowed to edit emojis.

HTTPException – An error occurred editing the emoji.

PartialEmoji
class discord.PartialEmoji
Attributes
animated
created_at
id
name
url
Methods
is_custom_emoji
is_unicode_emoji
url_as
Represents a “partial” emoji.

This model will be given in two scenarios:

“Raw” data events such as on_raw_reaction_add()

Custom emoji that the bot cannot see from e.g. Message.reactions

x == y
Checks if two emoji are the same.

x != y
Checks if two emoji are not the same.

hash(x)
Return the emoji’s hash.

str(x)
Returns the emoji rendered for discord.

name
The custom emoji name, if applicable, or the unicode codepoint of the non-custom emoji. This can be None if the emoji got deleted (e.g. removing a reaction with a deleted emoji).

Type
Optional[str]

animated
Whether the emoji is animated or not.

Type
bool

id
The ID of the custom emoji, if applicable.

Type
Optional[int]

is_custom_emoji()
bool: Checks if this is a custom non-Unicode emoji.

is_unicode_emoji()
bool: Checks if this is a Unicode emoji.

created_at
Returns the emoji’s creation time in UTC, or None if Unicode emoji.

New in version 1.6.

Type
Optional[datetime.datetime]

url
Returns the asset of the emoji, if it is custom.

This is equivalent to calling url_as() with the default parameters (i.e. png/gif detection).

Type
Asset

url_as(*, format=None, static_format='png')
Returns an Asset for the emoji’s url, if it is custom.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’, ‘png’ or ‘gif’. ‘gif’ is only valid for animated emojis.

New in version 1.7.

Parameters
format (Optional[str]) – The format to attempt to convert the emojis to. If the format is None, then it is automatically detected as either ‘gif’ or static_format, depending on whether the emoji is animated or not.

static_format (Optional[str]) – Format to attempt to convert only non-animated emoji’s to. Defaults to ‘png’

Raises
InvalidArgument – Bad image format passed to format or static_format.

Returns
The resulting CDN asset.

Return type
Asset

Role
class discord.Role
Attributes
color
colour
created_at
guild
hoist
id
managed
members
mention
mentionable
name
permissions
position
tags
Methods
delete
edit
is_bot_managed
is_default
is_integration
is_premium_subscriber
Represents a Discord role in a Guild.

x == y
Checks if two roles are equal.

x != y
Checks if two roles are not equal.

x > y
Checks if a role is higher than another in the hierarchy.

x < y
Checks if a role is lower than another in the hierarchy.

x >= y
Checks if a role is higher or equal to another in the hierarchy.

x <= y
Checks if a role is lower or equal to another in the hierarchy.

hash(x)
Return the role’s hash.

str(x)
Returns the role’s name.

id
The ID for the role.

Type
int

name
The name of the role.

Type
str

guild
The guild the role belongs to.

Type
Guild

hoist
Indicates if the role will be displayed separately from other members.

Type
bool

position
The position of the role. This number is usually positive. The bottom role has a position of 0.

Type
int

managed
Indicates if the role is managed by the guild through some form of integrations such as Twitch.

Type
bool

mentionable
Indicates if the role can be mentioned by users.

Type
bool

tags
The role tags associated with this role.

Type
Optional[RoleTags]

is_default()
bool: Checks if the role is the default role.

is_bot_managed()
bool: Whether the role is associated with a bot.

New in version 1.6.

is_premium_subscriber()
bool: Whether the role is the premium subscriber, AKA “boost”, role for the guild.

New in version 1.6.

is_integration()
bool: Whether the role is managed by an integration.

New in version 1.6.

permissions
Returns the role’s permissions.

Type
Permissions

colour
Returns the role colour. An alias exists under color.

Type
Colour

color
Returns the role color. An alias exists under colour.

Type
Colour

created_at
Returns the role’s creation time in UTC.

Type
datetime.datetime

mention
Returns a string that allows you to mention a role.

Type
str

members
Returns all the members with this role.

Type
List[Member]

await edit(*, reason=None, **fields)
This function is a coroutine.

Edits the role.

You must have the manage_roles permission to use this.

All fields are optional.

Changed in version 1.4: Can now pass int to colour keyword-only parameter.

Parameters
name (str) – The new role name to change to.

permissions (Permissions) – The new permissions to change to.

colour (Union[Colour, int]) – The new colour to change to. (aliased to color as well)

hoist (bool) – Indicates if the role should be shown separately in the member list.

mentionable (bool) – Indicates if the role should be mentionable by others.

position (int) – The new role’s position. This must be below your top role’s position or it will fail.

reason (Optional[str]) – The reason for editing this role. Shows up on the audit log.

Raises
Forbidden – You do not have permissions to change the role.

HTTPException – Editing the role failed.

InvalidArgument – An invalid position was given or the default role was asked to be moved.

await delete(*, reason=None)
This function is a coroutine.

Deletes the role.

You must have the manage_roles permission to use this.

Parameters
reason (Optional[str]) – The reason for deleting this role. Shows up on the audit log.

Raises
Forbidden – You do not have permissions to delete the role.

HTTPException – Deleting the role failed.

RoleTags
class discord.RoleTags
Attributes
bot_id
integration_id
Methods
is_bot_managed
is_integration
is_premium_subscriber
Represents tags on a role.

A role tag is a piece of extra information attached to a managed role that gives it context for the reason the role is managed.

While this can be accessed, a useful interface is also provided in the Role and Guild classes as well.

New in version 1.6.

bot_id
The bot’s user ID that manages this role.

Type
Optional[int]

integration_id
The integration ID that manages the role.

Type
Optional[int]

is_bot_managed()
bool: Whether the role is associated with a bot.

is_premium_subscriber()
bool: Whether the role is the premium subscriber, AKA “boost”, role for the guild.

is_integration()
bool: Whether the role is managed by an integration.

TextChannel
class discord.TextChannel
Attributes
category
category_id
changed_roles
created_at
guild
id
last_message
last_message_id
members
mention
name
overwrites
permissions_synced
position
slowmode_delay
topic
type
Methods
clone
create_invite
create_webhook
delete
delete_messages
edit
fetch_message
follow
get_partial_message
history
invites
is_news
is_nsfw
move
overwrites_for
permissions_for
pins
purge
send
set_permissions
trigger_typing
typing
webhooks
Represents a Discord guild text channel.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the channel’s hash.

str(x)
Returns the channel’s name.

name
The channel name.

Type
str

guild
The guild the channel belongs to.

Type
Guild

id
The channel ID.

Type
int

category_id
The category channel ID this channel belongs to, if applicable.

Type
Optional[int]

topic
The channel’s topic. None if it doesn’t exist.

Type
Optional[str]

position
The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0.

Type
int

last_message_id
The last message ID of the message sent to this channel. It may not point to an existing or valid message.

Type
Optional[int]

slowmode_delay
The number of seconds a member must wait between sending messages in this channel. A value of 0 denotes that it is disabled. Bots and users with manage_channels or manage_messages bypass slowmode.

Type
int

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

Examples

Usage

content_copy
counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

content_copy
messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

Parameters
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time. When using this argument, the maximum limit is 101. Note that if the limit is an even number then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

Raises
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

Yields
Message – The message with the message data parsed.

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.


This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

content_copy
async with channel.typing():
    # do expensive stuff here
    await channel.send('done!')
type
The channel’s Discord type.

Type
ChannelType

permissions_for(member)
Handles permission resolution for the current Member.

This function takes into consideration the following cases:

Guild owner

Guild roles

Channel overrides

Member overrides

Parameters
member (Member) – The member to resolve permissions for.

Returns
The resolved permissions for the member.

Return type
Permissions

members
Returns all members that can see this channel.

Type
List[Member]

is_nsfw()
bool: Checks if the channel is NSFW.

is_news()
bool: Checks if the channel is a news channel.

last_message
Fetches the last message from this channel in cache.

The message might not be valid or point to an existing message.


For a slightly more reliable method of fetching the last message, consider using either history() or fetch_message() with the last_message_id attribute.

Returns
The last message in this channel or None if not found.

Return type
Optional[Message]

await edit(*, reason=None, **options)
This function is a coroutine.

Edits the channel.

You must have the manage_channels permission to use this.

Changed in version 1.3: The overwrites keyword-only parameter was added.

Changed in version 1.4: The type keyword-only parameter was added.

Parameters
name (str) – The new channel name.

topic (str) – The new channel’s topic.

position (int) – The new channel’s position.

nsfw (bool) – To mark the channel as NSFW or not.

sync_permissions (bool) – Whether to sync permissions with the channel’s new or pre-existing category. Defaults to False.

category (Optional[CategoryChannel]) – The new category for this channel. Can be None to remove the category.

slowmode_delay (int) – Specifies the slowmode rate limit for user in this channel, in seconds. A value of 0 disables slowmode. The maximum value possible is 21600.

type (ChannelType) – Change the type of this text channel. Currently, only conversion between ChannelType.text and ChannelType.news is supported. This is only available to guilds that contain NEWS in Guild.features.

reason (Optional[str]) – The reason for editing this channel. Shows up on the audit log.

overwrites (dict) – A dict of target (either a role or a member) to PermissionOverwrite to apply to the channel.

Raises
InvalidArgument – If position is less than 0 or greater than the number of channels, or if the permission overwrite information is not in proper form.

Forbidden – You do not have permissions to edit the channel.

HTTPException – Editing the channel failed.

await clone(*, name=None, reason=None)
This function is a coroutine.

Clones this channel. This creates a channel with the same properties as this channel.

You must have the manage_channels permission to do this.

New in version 1.1.

Parameters
name (Optional[str]) – The name of the new channel. If not provided, defaults to this channel name.

reason (Optional[str]) – The reason for cloning this channel. Shows up on the audit log.

Raises
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

Returns
The channel that was created.

Return type
abc.GuildChannel

await delete_messages(messages)
This function is a coroutine.

Deletes a list of messages. This is similar to Message.delete() except it bulk deletes multiple messages.

As a special case, if the number of messages is 0, then nothing is done. If the number of messages is 1 then single message delete is done. If it’s more than two, then bulk delete is used.

You cannot bulk delete more than 100 messages or messages that are older than 14 days old.

You must have the manage_messages permission to use this.

Usable only by bot accounts.

Parameters
messages (Iterable[abc.Snowflake]) – An iterable of messages denoting which ones to bulk delete.

Raises
ClientException – The number of messages to delete was more than 100.

Forbidden – You do not have proper permissions to delete the messages or you’re not using a bot account.

NotFound – If single delete, then the message was already deleted.

HTTPException – Deleting the messages failed.

await purge(*, limit=100, check=None, before=None, after=None, around=None, oldest_first=False, bulk=True)
This function is a coroutine.

Purges a list of messages that meet the criteria given by the predicate check. If a check is not provided then all messages are deleted without discrimination.

You must have the manage_messages permission to delete messages even if they are your own (unless you are a user account). The read_message_history permission is also needed to retrieve message history.

Internally, this employs a different number of strategies depending on the conditions met such as if a bulk delete is possible or if the account is a user bot or not.

Examples

Deleting bot’s messages

content_copy
def is_me(m):
    return m.author == client.user

deleted = await channel.purge(limit=100, check=is_me)
await channel.send('Deleted {} message(s)'.format(len(deleted)))
Parameters
limit (Optional[int]) – The number of messages to search through. This is not the number of messages that will be deleted, though it can be.

check (Callable[[Message], bool]) – The function used to check if a message should be deleted. It must take a Message as its sole parameter.

before (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as before in history().

after (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as after in history().

around (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as around in history().

oldest_first (Optional[bool]) – Same as oldest_first in history().

bulk (bool) – If True, use bulk delete. Setting this to False is useful for mass-deleting a bot’s own messages without Permissions.manage_messages. When True, will fall back to single delete if current account is a user bot (now deprecated), or if messages are older than two weeks.

Raises
Forbidden – You do not have proper permissions to do the actions required.

HTTPException – Purging the messages failed.

Returns
The list of messages that were deleted.

Return type
List[Message]

await webhooks()
This function is a coroutine.

Gets the list of webhooks from this channel.

Requires manage_webhooks permissions.

Raises
Forbidden – You don’t have permissions to get the webhooks.

Returns
The webhooks for this channel.

Return type
List[Webhook]

await create_webhook(*, name, avatar=None, reason=None)
This function is a coroutine.

Creates a webhook for this channel.

Requires manage_webhooks permissions.

Changed in version 1.1: Added the reason keyword-only parameter.

Parameters
name (str) – The webhook’s name.

avatar (Optional[bytes]) – A bytes-like object representing the webhook’s default avatar. This operates similarly to edit().

reason (Optional[str]) – The reason for creating this webhook. Shows up in the audit logs.

Raises
HTTPException – Creating the webhook failed.

Forbidden – You do not have permissions to create a webhook.

Returns
The created webhook.

Return type
Webhook

await follow(*, destination, reason=None)
Follows a channel using a webhook.

Only news channels can be followed.


The webhook returned will not provide a token to do webhook actions, as Discord does not provide it.

New in version 1.3.

Parameters
destination (TextChannel) – The channel you would like to follow from.

reason (Optional[str]) –

The reason for following the channel. Shows up on the destination guild’s audit log.

New in version 1.4.

Raises
HTTPException – Following the channel failed.

Forbidden – You do not have the permissions to create a webhook.

Returns
The created webhook.

Return type
Webhook

get_partial_message(message_id)
Creates a PartialMessage from the message ID.

This is useful if you want to work with a message and only have its ID without doing an unnecessary API call.

New in version 1.6.

Parameters
message_id (int) – The message ID to create a partial message for.

Returns
The partial message.

Return type
PartialMessage

category
The category this channel belongs to.

If there is no category then this is None.

Type
Optional[CategoryChannel]

changed_roles
Returns a list of roles that have been overridden from their default values in the roles attribute.

Type
List[Role]

await create_invite(*, reason=None, **fields)
This function is a coroutine.

Creates an instant invite from a text or voice channel.

You must have the create_instant_invite permission to do this.

Parameters
max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

Raises
HTTPException – Invite creation failed.

NotFound – The channel that was passed is a category or an invalid channel.

Returns
The invite that was created.

Return type
Invite

created_at
Returns the channel’s creation time in UTC.

Type
datetime.datetime

await delete(*, reason=None)
This function is a coroutine.

Deletes the channel.

You must have manage_channels permission to use this.

Parameters
reason (Optional[str]) – The reason for deleting this channel. Shows up on the audit log.

Raises
Forbidden – You do not have proper permissions to delete the channel.

NotFound – The channel was not found or was already deleted.

HTTPException – Deleting the channel failed.

await fetch_message(id)
This function is a coroutine.

Retrieves a single Message from the destination.

This can only be used by bot accounts.

Parameters
id (int) – The message ID to look for.

Raises
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

Returns
The message asked for.

Return type
Message

await invites()
This function is a coroutine.

Returns a list of all active instant invites from this channel.

You must have manage_channels to get this information.

Raises
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

Returns
The list of invites that are currently active.

Return type
List[Invite]

mention
The string that allows you to mention the channel.

Type
str

await move(**kwargs)
This function is a coroutine.

A rich interface to help move a channel relative to other channels.

If exact position movement is required, edit() should be used instead.

You must have the manage_channels permission to do this.


Voice channels will always be sorted below text channels. This is a Discord limitation.

New in version 1.7.

Parameters
beginning (bool) – Whether to move the channel to the beginning of the channel list (or category if given). This is mutually exclusive with end, before, and after.

end (bool) – Whether to move the channel to the end of the channel list (or category if given). This is mutually exclusive with beginning, before, and after.

before (Snowflake) – The channel that should be before our current channel. This is mutually exclusive with beginning, end, and after.

after (Snowflake) – The channel that should be after our current channel. This is mutually exclusive with beginning, end, and before.

offset (int) – The number of channels to offset the move by. For example, an offset of 2 with beginning=True would move it 2 after the beginning. A positive number moves it below while a negative number moves it above. Note that this number is relative and computed after the beginning, end, before, and after parameters.

category (Optional[Snowflake]) – The category to move this channel under. If None is given then it moves it out of the category. This parameter is ignored if moving a category channel.

sync_permissions (bool) – Whether to sync the permissions with the category (if given).

reason (str) – The reason for the move.

Raises
InvalidArgument – An invalid position was given or a bad mix of arguments were passed.

Forbidden – You do not have permissions to move the channel.

HTTPException – Moving the channel failed.

overwrites
Returns all of the channel’s overwrites.

This is returned as a dictionary where the key contains the target which can be either a Role or a Member and the value is the overwrite as a PermissionOverwrite.

Returns
The channel’s permission overwrites.

Return type
Mapping[Union[Role, Member], PermissionOverwrite]

overwrites_for(obj)
Returns the channel-specific overwrites for a member or a role.

Parameters
obj (Union[Role, User]) – The role or user denoting whose overwrite to get.

Returns
The permission overwrites for this object.

Return type
PermissionOverwrite

permissions_synced
Whether or not the permissions for this channel are synced with the category it belongs to.

If there is no category then this is False.

New in version 1.3.

Type
bool

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.


Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

Raises
HTTPException – Retrieving the pinned messages failed.

Returns
The messages that are currently pinned.

Return type
List[Message]

await send(content=None, *, tts=False, embed=None, file=None, files=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

If the embed parameter is provided, it must be of type Embed and it must be a rich embed type.

Parameters
content (str) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

Raises
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or the reference object is not a Message or MessageReference.

Returns
The message that was sent.

Return type
Message

await set_permissions(target, *, overwrite=see - below, reason=None, **permissions)
This function is a coroutine.

Sets the channel specific permission overwrites for a target in the channel.

The target parameter should either be a Member or a Role that belongs to guild.

The overwrite parameter, if given, must either be None or PermissionOverwrite. For convenience, you can pass in keyword arguments denoting Permissions attributes. If this is done, then you cannot mix the keyword arguments with the overwrite parameter.

If the overwrite parameter is None, then the permission overwrites are deleted.

You must have the manage_roles permission to use this.

Examples

Setting allow and deny:

content_copy
await message.channel.set_permissions(message.author, read_messages=True,
                                                      send_messages=False)
Deleting overwrites

content_copy
await channel.set_permissions(member, overwrite=None)
Using PermissionOverwrite

content_copy
overwrite = discord.PermissionOverwrite()
overwrite.send_messages = False
overwrite.read_messages = True
await channel.set_permissions(member, overwrite=overwrite)
Parameters
target (Union[Member, Role]) – The member or role to overwrite permissions for.

overwrite (Optional[PermissionOverwrite]) – The permissions to allow and deny to the target, or None to delete the overwrite.

**permissions – A keyword argument list of permissions to set for ease of use. Cannot be mixed with overwrite.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

Raises
Forbidden – You do not have permissions to edit channel specific permissions.

HTTPException – Editing channel specific permissions failed.

NotFound – The role or member being edited is not part of the guild.

InvalidArgument – The overwrite parameter invalid or the target type was not Role or Member.

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

StoreChannel
class discord.StoreChannel
Attributes
category
category_id
changed_roles
created_at
guild
id
mention
name
overwrites
permissions_synced
position
type
Methods
clone
create_invite
delete
edit
invites
is_nsfw
move
overwrites_for
permissions_for
set_permissions
Represents a Discord guild store channel.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the channel’s hash.

str(x)
Returns the channel’s name.

name
The channel name.

Type
str

guild
The guild the channel belongs to.

Type
Guild

id
The channel ID.

Type
int

category_id
The category channel ID this channel belongs to.

Type
int

position
The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0.

Type
int

type
The channel’s Discord type.

Type
ChannelType

permissions_for(member)
Handles permission resolution for the current Member.

This function takes into consideration the following cases:

Guild owner

Guild roles

Channel overrides

Member overrides

Parameters
member (Member) – The member to resolve permissions for.

Returns
The resolved permissions for the member.

Return type
Permissions

is_nsfw()
bool: Checks if the channel is NSFW.

await clone(*, name=None, reason=None)
This function is a coroutine.

Clones this channel. This creates a channel with the same properties as this channel.

You must have the manage_channels permission to do this.

New in version 1.1.

Parameters
name (Optional[str]) – The name of the new channel. If not provided, defaults to this channel name.

reason (Optional[str]) – The reason for cloning this channel. Shows up on the audit log.

Raises
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

Returns
The channel that was created.

Return type
abc.GuildChannel

await edit(*, reason=None, **options)
This function is a coroutine.

Edits the channel.

You must have the manage_channels permission to use this.

Parameters
name (str) – The new channel name.

position (int) – The new channel’s position.

nsfw (bool) – To mark the channel as NSFW or not.

sync_permissions (bool) – Whether to sync permissions with the channel’s new or pre-existing category. Defaults to False.

category (Optional[CategoryChannel]) – The new category for this channel. Can be None to remove the category.

reason (Optional[str]) – The reason for editing this channel. Shows up on the audit log.

overwrites (dict) –

A dict of target (either a role or a member) to PermissionOverwrite to apply to the channel.

New in version 1.3.

Raises
InvalidArgument – If position is less than 0 or greater than the number of channels, or if the permission overwrite information is not in proper form.

Forbidden – You do not have permissions to edit the channel.

HTTPException – Editing the channel failed.

category
The category this channel belongs to.

If there is no category then this is None.

Type
Optional[CategoryChannel]

changed_roles
Returns a list of roles that have been overridden from their default values in the roles attribute.

Type
List[Role]

await create_invite(*, reason=None, **fields)
This function is a coroutine.

Creates an instant invite from a text or voice channel.

You must have the create_instant_invite permission to do this.

Parameters
max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

Raises
HTTPException – Invite creation failed.

NotFound – The channel that was passed is a category or an invalid channel.

Returns
The invite that was created.

Return type
Invite

created_at
Returns the channel’s creation time in UTC.

Type
datetime.datetime

await delete(*, reason=None)
This function is a coroutine.

Deletes the channel.

You must have manage_channels permission to use this.

Parameters
reason (Optional[str]) – The reason for deleting this channel. Shows up on the audit log.

Raises
Forbidden – You do not have proper permissions to delete the channel.

NotFound – The channel was not found or was already deleted.

HTTPException – Deleting the channel failed.

await invites()
This function is a coroutine.

Returns a list of all active instant invites from this channel.

You must have manage_channels to get this information.

Raises
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

Returns
The list of invites that are currently active.

Return type
List[Invite]

mention
The string that allows you to mention the channel.

Type
str

await move(**kwargs)
This function is a coroutine.

A rich interface to help move a channel relative to other channels.

If exact position movement is required, edit() should be used instead.

You must have the manage_channels permission to do this.


Voice channels will always be sorted below text channels. This is a Discord limitation.

New in version 1.7.

Parameters
beginning (bool) – Whether to move the channel to the beginning of the channel list (or category if given). This is mutually exclusive with end, before, and after.

end (bool) – Whether to move the channel to the end of the channel list (or category if given). This is mutually exclusive with beginning, before, and after.

before (Snowflake) – The channel that should be before our current channel. This is mutually exclusive with beginning, end, and after.

after (Snowflake) – The channel that should be after our current channel. This is mutually exclusive with beginning, end, and before.

offset (int) – The number of channels to offset the move by. For example, an offset of 2 with beginning=True would move it 2 after the beginning. A positive number moves it below while a negative number moves it above. Note that this number is relative and computed after the beginning, end, before, and after parameters.

category (Optional[Snowflake]) – The category to move this channel under. If None is given then it moves it out of the category. This parameter is ignored if moving a category channel.

sync_permissions (bool) – Whether to sync the permissions with the category (if given).

reason (str) – The reason for the move.

Raises
InvalidArgument – An invalid position was given or a bad mix of arguments were passed.

Forbidden – You do not have permissions to move the channel.

HTTPException – Moving the channel failed.

overwrites
Returns all of the channel’s overwrites.

This is returned as a dictionary where the key contains the target which can be either a Role or a Member and the value is the overwrite as a PermissionOverwrite.

Returns
The channel’s permission overwrites.

Return type
Mapping[Union[Role, Member], PermissionOverwrite]

overwrites_for(obj)
Returns the channel-specific overwrites for a member or a role.

Parameters
obj (Union[Role, User]) – The role or user denoting whose overwrite to get.

Returns
The permission overwrites for this object.

Return type
PermissionOverwrite

permissions_synced
Whether or not the permissions for this channel are synced with the category it belongs to.

If there is no category then this is False.

New in version 1.3.

Type
bool

await set_permissions(target, *, overwrite=see - below, reason=None, **permissions)
This function is a coroutine.

Sets the channel specific permission overwrites for a target in the channel.

The target parameter should either be a Member or a Role that belongs to guild.

The overwrite parameter, if given, must either be None or PermissionOverwrite. For convenience, you can pass in keyword arguments denoting Permissions attributes. If this is done, then you cannot mix the keyword arguments with the overwrite parameter.

If the overwrite parameter is None, then the permission overwrites are deleted.

You must have the manage_roles permission to use this.

Examples

Setting allow and deny:

content_copy
await message.channel.set_permissions(message.author, read_messages=True,
                                                      send_messages=False)
Deleting overwrites

content_copy
await channel.set_permissions(member, overwrite=None)
Using PermissionOverwrite

content_copy
overwrite = discord.PermissionOverwrite()
overwrite.send_messages = False
overwrite.read_messages = True
await channel.set_permissions(member, overwrite=overwrite)
Parameters
target (Union[Member, Role]) – The member or role to overwrite permissions for.

overwrite (Optional[PermissionOverwrite]) – The permissions to allow and deny to the target, or None to delete the overwrite.

**permissions – A keyword argument list of permissions to set for ease of use. Cannot be mixed with overwrite.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

Raises
Forbidden – You do not have permissions to edit channel specific permissions.

HTTPException – Editing channel specific permissions failed.

NotFound – The role or member being edited is not part of the guild.

InvalidArgument – The overwrite parameter invalid or the target type was not Role or Member.

VoiceChannel
class discord.VoiceChannel
Attributes
bitrate
category
category_id
changed_roles
created_at
guild
id
members
mention
name
overwrites
permissions_synced
position
rtc_region
type
user_limit
voice_states
Methods
clone
connect
create_invite
delete
edit
invites
move
overwrites_for
permissions_for
set_permissions
Represents a Discord guild voice channel.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the channel’s hash.

str(x)
Returns the channel’s name.

name
The channel name.

Type
str

guild
The guild the channel belongs to.

Type
Guild

id
The channel ID.

Type
int

category_id
The category channel ID this channel belongs to, if applicable.

Type
Optional[int]

position
The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0.

Type
int

bitrate
The channel’s preferred audio bitrate in bits per second.

Type
int

user_limit
The channel’s limit for number of members that can be in a voice channel.

Type
int

rtc_region
The region for the voice channel’s voice communication. A value of None indicates automatic voice region detection.

New in version 1.7.

Type
Optional[VoiceRegion]

type
The channel’s Discord type.

Type
ChannelType

await clone(*, name=None, reason=None)
This function is a coroutine.

Clones this channel. This creates a channel with the same properties as this channel.

You must have the manage_channels permission to do this.

New in version 1.1.

Parameters
name (Optional[str]) – The name of the new channel. If not provided, defaults to this channel name.

reason (Optional[str]) – The reason for cloning this channel. Shows up on the audit log.

Raises
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

Returns
The channel that was created.

Return type
abc.GuildChannel

await edit(*, reason=None, **options)
This function is a coroutine.

Edits the channel.

You must have the manage_channels permission to use this.

Changed in version 1.3: The overwrites keyword-only parameter was added.

Parameters
name (str) – The new channel’s name.

bitrate (int) – The new channel’s bitrate.

user_limit (int) – The new channel’s user limit.

position (int) – The new channel’s position.

sync_permissions (bool) – Whether to sync permissions with the channel’s new or pre-existing category. Defaults to False.

category (Optional[CategoryChannel]) – The new category for this channel. Can be None to remove the category.

reason (Optional[str]) – The reason for editing this channel. Shows up on the audit log.

overwrites (dict) – A dict of target (either a role or a member) to PermissionOverwrite to apply to the channel.

rtc_region (Optional[VoiceRegion]) –

The new region for the voice channel’s voice communication. A value of None indicates automatic voice region detection.

New in version 1.7.

Raises
InvalidArgument – If the permission overwrite information is not in proper form.

Forbidden – You do not have permissions to edit the channel.

HTTPException – Editing the channel failed.

category
The category this channel belongs to.

If there is no category then this is None.

Type
Optional[CategoryChannel]

changed_roles
Returns a list of roles that have been overridden from their default values in the roles attribute.

Type
List[Role]

await connect(*, timeout=60.0, reconnect=True, cls=<class 'discord.voice_client.VoiceClient'>)
This function is a coroutine.

Connects to voice and creates a VoiceClient to establish your connection to the voice server.

Parameters
timeout (float) – The timeout in seconds to wait for the voice endpoint.

reconnect (bool) – Whether the bot should automatically attempt a reconnect if a part of the handshake fails or the gateway goes down.

cls (Type[VoiceProtocol]) – A type that subclasses VoiceProtocol to connect with. Defaults to VoiceClient.

Raises
asyncio.TimeoutError – Could not connect to the voice channel in time.

ClientException – You are already connected to a voice channel.

OpusNotLoaded – The opus library has not been loaded.

Returns
A voice client that is fully connected to the voice server.

Return type
VoiceProtocol

await create_invite(*, reason=None, **fields)
This function is a coroutine.

Creates an instant invite from a text or voice channel.

You must have the create_instant_invite permission to do this.

Parameters
max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

Raises
HTTPException – Invite creation failed.

NotFound – The channel that was passed is a category or an invalid channel.

Returns
The invite that was created.

Return type
Invite

created_at
Returns the channel’s creation time in UTC.

Type
datetime.datetime

await delete(*, reason=None)
This function is a coroutine.

Deletes the channel.

You must have manage_channels permission to use this.

Parameters
reason (Optional[str]) – The reason for deleting this channel. Shows up on the audit log.

Raises
Forbidden – You do not have proper permissions to delete the channel.

NotFound – The channel was not found or was already deleted.

HTTPException – Deleting the channel failed.

await invites()
This function is a coroutine.

Returns a list of all active instant invites from this channel.

You must have manage_channels to get this information.

Raises
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

Returns
The list of invites that are currently active.

Return type
List[Invite]

members
Returns all members that are currently inside this voice channel.

Type
List[Member]

mention
The string that allows you to mention the channel.

Type
str

await move(**kwargs)
This function is a coroutine.

A rich interface to help move a channel relative to other channels.

If exact position movement is required, edit() should be used instead.

You must have the manage_channels permission to do this.


Voice channels will always be sorted below text channels. This is a Discord limitation.

New in version 1.7.

Parameters
beginning (bool) – Whether to move the channel to the beginning of the channel list (or category if given). This is mutually exclusive with end, before, and after.

end (bool) – Whether to move the channel to the end of the channel list (or category if given). This is mutually exclusive with beginning, before, and after.

before (Snowflake) – The channel that should be before our current channel. This is mutually exclusive with beginning, end, and after.

after (Snowflake) – The channel that should be after our current channel. This is mutually exclusive with beginning, end, and before.

offset (int) – The number of channels to offset the move by. For example, an offset of 2 with beginning=True would move it 2 after the beginning. A positive number moves it below while a negative number moves it above. Note that this number is relative and computed after the beginning, end, before, and after parameters.

category (Optional[Snowflake]) – The category to move this channel under. If None is given then it moves it out of the category. This parameter is ignored if moving a category channel.

sync_permissions (bool) – Whether to sync the permissions with the category (if given).

reason (str) – The reason for the move.

Raises
InvalidArgument – An invalid position was given or a bad mix of arguments were passed.

Forbidden – You do not have permissions to move the channel.

HTTPException – Moving the channel failed.

overwrites
Returns all of the channel’s overwrites.

This is returned as a dictionary where the key contains the target which can be either a Role or a Member and the value is the overwrite as a PermissionOverwrite.

Returns
The channel’s permission overwrites.

Return type
Mapping[Union[Role, Member], PermissionOverwrite]

overwrites_for(obj)
Returns the channel-specific overwrites for a member or a role.

Parameters
obj (Union[Role, User]) – The role or user denoting whose overwrite to get.

Returns
The permission overwrites for this object.

Return type
PermissionOverwrite

permissions_for(member)
Handles permission resolution for the current Member.

This function takes into consideration the following cases:

Guild owner

Guild roles

Channel overrides

Member overrides

Parameters
member (Member) – The member to resolve permissions for.

Returns
The resolved permissions for the member.

Return type
Permissions

permissions_synced
Whether or not the permissions for this channel are synced with the category it belongs to.

If there is no category then this is False.

New in version 1.3.

Type
bool

await set_permissions(target, *, overwrite=see - below, reason=None, **permissions)
This function is a coroutine.

Sets the channel specific permission overwrites for a target in the channel.

The target parameter should either be a Member or a Role that belongs to guild.

The overwrite parameter, if given, must either be None or PermissionOverwrite. For convenience, you can pass in keyword arguments denoting Permissions attributes. If this is done, then you cannot mix the keyword arguments with the overwrite parameter.

If the overwrite parameter is None, then the permission overwrites are deleted.

You must have the manage_roles permission to use this.

Examples

Setting allow and deny:

content_copy
await message.channel.set_permissions(message.author, read_messages=True,
                                                      send_messages=False)
Deleting overwrites

content_copy
await channel.set_permissions(member, overwrite=None)
Using PermissionOverwrite

content_copy
overwrite = discord.PermissionOverwrite()
overwrite.send_messages = False
overwrite.read_messages = True
await channel.set_permissions(member, overwrite=overwrite)
Parameters
target (Union[Member, Role]) – The member or role to overwrite permissions for.

overwrite (Optional[PermissionOverwrite]) – The permissions to allow and deny to the target, or None to delete the overwrite.

**permissions – A keyword argument list of permissions to set for ease of use. Cannot be mixed with overwrite.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

Raises
Forbidden – You do not have permissions to edit channel specific permissions.

HTTPException – Editing channel specific permissions failed.

NotFound – The role or member being edited is not part of the guild.

InvalidArgument – The overwrite parameter invalid or the target type was not Role or Member.

voice_states
Returns a mapping of member IDs who have voice states in this channel.

New in version 1.3.


This function is intentionally low level to replace members when the member cache is unavailable.

Returns
The mapping of member ID to a voice state.

Return type
Mapping[int, VoiceState]

StageChannel
class discord.StageChannel
Attributes
bitrate
category
category_id
changed_roles
created_at
guild
id
members
mention
name
overwrites
permissions_synced
position
requesting_to_speak
rtc_region
topic
type
user_limit
voice_states
Methods
clone
connect
create_invite
delete
edit
invites
move
overwrites_for
permissions_for
set_permissions
Represents a Discord guild stage channel.

New in version 1.7.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the channel’s hash.

str(x)
Returns the channel’s name.

name
The channel name.

Type
str

guild
The guild the channel belongs to.

Type
Guild

id
The channel ID.

Type
int

topic
The channel’s topic. None if it isn’t set.

Type
Optional[str]

category_id
The category channel ID this channel belongs to, if applicable.

Type
Optional[int]

position
The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0.

Type
int

bitrate
The channel’s preferred audio bitrate in bits per second.

Type
int

user_limit
The channel’s limit for number of members that can be in a stage channel.

Type
int

rtc_region
The region for the stage channel’s voice communication. A value of None indicates automatic voice region detection.

Type
Optional[VoiceRegion]

requesting_to_speak
A list of members who are requesting to speak in the stage channel.

Type
List[Member]

type
The channel’s Discord type.

Type
ChannelType

await clone(*, name=None, reason=None)
This function is a coroutine.

Clones this channel. This creates a channel with the same properties as this channel.

You must have the manage_channels permission to do this.

New in version 1.1.

Parameters
name (Optional[str]) – The name of the new channel. If not provided, defaults to this channel name.

reason (Optional[str]) – The reason for cloning this channel. Shows up on the audit log.

Raises
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

Returns
The channel that was created.

Return type
abc.GuildChannel

await edit(*, reason=None, **options)
This function is a coroutine.

Edits the channel.

You must have the manage_channels permission to use this.

Parameters
name (str) – The new channel’s name.

topic (str) – The new channel’s topic.

position (int) – The new channel’s position.

sync_permissions (bool) – Whether to sync permissions with the channel’s new or pre-existing category. Defaults to False.

category (Optional[CategoryChannel]) – The new category for this channel. Can be None to remove the category.

reason (Optional[str]) – The reason for editing this channel. Shows up on the audit log.

overwrites (dict) – A dict of target (either a role or a member) to PermissionOverwrite to apply to the channel.

rtc_region (Optional[VoiceRegion]) – The new region for the stage channel’s voice communication. A value of None indicates automatic voice region detection.

Raises
InvalidArgument – If the permission overwrite information is not in proper form.

Forbidden – You do not have permissions to edit the channel.

HTTPException – Editing the channel failed.

category
The category this channel belongs to.

If there is no category then this is None.

Type
Optional[CategoryChannel]

changed_roles
Returns a list of roles that have been overridden from their default values in the roles attribute.

Type
List[Role]

await connect(*, timeout=60.0, reconnect=True, cls=<class 'discord.voice_client.VoiceClient'>)
This function is a coroutine.

Connects to voice and creates a VoiceClient to establish your connection to the voice server.

Parameters
timeout (float) – The timeout in seconds to wait for the voice endpoint.

reconnect (bool) – Whether the bot should automatically attempt a reconnect if a part of the handshake fails or the gateway goes down.

cls (Type[VoiceProtocol]) – A type that subclasses VoiceProtocol to connect with. Defaults to VoiceClient.

Raises
asyncio.TimeoutError – Could not connect to the voice channel in time.

ClientException – You are already connected to a voice channel.

OpusNotLoaded – The opus library has not been loaded.

Returns
A voice client that is fully connected to the voice server.

Return type
VoiceProtocol

await create_invite(*, reason=None, **fields)
This function is a coroutine.

Creates an instant invite from a text or voice channel.

You must have the create_instant_invite permission to do this.

Parameters
max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

Raises
HTTPException – Invite creation failed.

NotFound – The channel that was passed is a category or an invalid channel.

Returns
The invite that was created.

Return type
Invite

created_at
Returns the channel’s creation time in UTC.

Type
datetime.datetime

await delete(*, reason=None)
This function is a coroutine.

Deletes the channel.

You must have manage_channels permission to use this.

Parameters
reason (Optional[str]) – The reason for deleting this channel. Shows up on the audit log.

Raises
Forbidden – You do not have proper permissions to delete the channel.

NotFound – The channel was not found or was already deleted.

HTTPException – Deleting the channel failed.

await invites()
This function is a coroutine.

Returns a list of all active instant invites from this channel.

You must have manage_channels to get this information.

Raises
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

Returns
The list of invites that are currently active.

Return type
List[Invite]

members
Returns all members that are currently inside this voice channel.

Type
List[Member]

mention
The string that allows you to mention the channel.

Type
str

await move(**kwargs)
This function is a coroutine.

A rich interface to help move a channel relative to other channels.

If exact position movement is required, edit() should be used instead.

You must have the manage_channels permission to do this.


Voice channels will always be sorted below text channels. This is a Discord limitation.

New in version 1.7.

Parameters
beginning (bool) – Whether to move the channel to the beginning of the channel list (or category if given). This is mutually exclusive with end, before, and after.

end (bool) – Whether to move the channel to the end of the channel list (or category if given). This is mutually exclusive with beginning, before, and after.

before (Snowflake) – The channel that should be before our current channel. This is mutually exclusive with beginning, end, and after.

after (Snowflake) – The channel that should be after our current channel. This is mutually exclusive with beginning, end, and before.

offset (int) – The number of channels to offset the move by. For example, an offset of 2 with beginning=True would move it 2 after the beginning. A positive number moves it below while a negative number moves it above. Note that this number is relative and computed after the beginning, end, before, and after parameters.

category (Optional[Snowflake]) – The category to move this channel under. If None is given then it moves it out of the category. This parameter is ignored if moving a category channel.

sync_permissions (bool) – Whether to sync the permissions with the category (if given).

reason (str) – The reason for the move.

Raises
InvalidArgument – An invalid position was given or a bad mix of arguments were passed.

Forbidden – You do not have permissions to move the channel.

HTTPException – Moving the channel failed.

overwrites
Returns all of the channel’s overwrites.

This is returned as a dictionary where the key contains the target which can be either a Role or a Member and the value is the overwrite as a PermissionOverwrite.

Returns
The channel’s permission overwrites.

Return type
Mapping[Union[Role, Member], PermissionOverwrite]

overwrites_for(obj)
Returns the channel-specific overwrites for a member or a role.

Parameters
obj (Union[Role, User]) – The role or user denoting whose overwrite to get.

Returns
The permission overwrites for this object.

Return type
PermissionOverwrite

permissions_for(member)
Handles permission resolution for the current Member.

This function takes into consideration the following cases:

Guild owner

Guild roles

Channel overrides

Member overrides

Parameters
member (Member) – The member to resolve permissions for.

Returns
The resolved permissions for the member.

Return type
Permissions

permissions_synced
Whether or not the permissions for this channel are synced with the category it belongs to.

If there is no category then this is False.

New in version 1.3.

Type
bool

await set_permissions(target, *, overwrite=see - below, reason=None, **permissions)
This function is a coroutine.

Sets the channel specific permission overwrites for a target in the channel.

The target parameter should either be a Member or a Role that belongs to guild.

The overwrite parameter, if given, must either be None or PermissionOverwrite. For convenience, you can pass in keyword arguments denoting Permissions attributes. If this is done, then you cannot mix the keyword arguments with the overwrite parameter.

If the overwrite parameter is None, then the permission overwrites are deleted.

You must have the manage_roles permission to use this.

Examples

Setting allow and deny:

content_copy
await message.channel.set_permissions(message.author, read_messages=True,
                                                      send_messages=False)
Deleting overwrites

content_copy
await channel.set_permissions(member, overwrite=None)
Using PermissionOverwrite

content_copy
overwrite = discord.PermissionOverwrite()
overwrite.send_messages = False
overwrite.read_messages = True
await channel.set_permissions(member, overwrite=overwrite)
Parameters
target (Union[Member, Role]) – The member or role to overwrite permissions for.

overwrite (Optional[PermissionOverwrite]) – The permissions to allow and deny to the target, or None to delete the overwrite.

**permissions – A keyword argument list of permissions to set for ease of use. Cannot be mixed with overwrite.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

Raises
Forbidden – You do not have permissions to edit channel specific permissions.

HTTPException – Editing channel specific permissions failed.

NotFound – The role or member being edited is not part of the guild.

InvalidArgument – The overwrite parameter invalid or the target type was not Role or Member.

voice_states
Returns a mapping of member IDs who have voice states in this channel.

New in version 1.3.


This function is intentionally low level to replace members when the member cache is unavailable.

Returns
The mapping of member ID to a voice state.

Return type
Mapping[int, VoiceState]

CategoryChannel
class discord.CategoryChannel
Attributes
category
changed_roles
channels
created_at
guild
id
mention
name
overwrites
permissions_synced
position
stage_channels
text_channels
type
voice_channels
Methods
clone
create_invite
create_stage_channel
create_text_channel
create_voice_channel
delete
edit
invites
is_nsfw
move
overwrites_for
permissions_for
set_permissions
Represents a Discord channel category.

These are useful to group channels to logical compartments.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the category’s hash.

str(x)
Returns the category’s name.

name
The category name.

Type
str

guild
The guild the category belongs to.

Type
Guild

id
The category channel ID.

Type
int

position
The position in the category list. This is a number that starts at 0. e.g. the top category is position 0.

Type
int

type
The channel’s Discord type.

Type
ChannelType

is_nsfw()
bool: Checks if the category is NSFW.

await clone(*, name=None, reason=None)
This function is a coroutine.

Clones this channel. This creates a channel with the same properties as this channel.

You must have the manage_channels permission to do this.

New in version 1.1.

Parameters
name (Optional[str]) – The name of the new channel. If not provided, defaults to this channel name.

reason (Optional[str]) – The reason for cloning this channel. Shows up on the audit log.

Raises
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

Returns
The channel that was created.

Return type
abc.GuildChannel

await edit(*, reason=None, **options)
This function is a coroutine.

Edits the channel.

You must have the manage_channels permission to use this.

Changed in version 1.3: The overwrites keyword-only parameter was added.

Parameters
name (str) – The new category’s name.

position (int) – The new category’s position.

nsfw (bool) – To mark the category as NSFW or not.

reason (Optional[str]) – The reason for editing this category. Shows up on the audit log.

overwrites (dict) – A dict of target (either a role or a member) to PermissionOverwrite to apply to the channel.

Raises
InvalidArgument – If position is less than 0 or greater than the number of categories.

Forbidden – You do not have permissions to edit the category.

HTTPException – Editing the category failed.

await move(**kwargs)
This function is a coroutine.

A rich interface to help move a channel relative to other channels.

If exact position movement is required, edit() should be used instead.

You must have the manage_channels permission to do this.


Voice channels will always be sorted below text channels. This is a Discord limitation.

New in version 1.7.

Parameters
beginning (bool) – Whether to move the channel to the beginning of the channel list (or category if given). This is mutually exclusive with end, before, and after.

end (bool) – Whether to move the channel to the end of the channel list (or category if given). This is mutually exclusive with beginning, before, and after.

before (Snowflake) – The channel that should be before our current channel. This is mutually exclusive with beginning, end, and after.

after (Snowflake) – The channel that should be after our current channel. This is mutually exclusive with beginning, end, and before.

offset (int) – The number of channels to offset the move by. For example, an offset of 2 with beginning=True would move it 2 after the beginning. A positive number moves it below while a negative number moves it above. Note that this number is relative and computed after the beginning, end, before, and after parameters.

category (Optional[Snowflake]) – The category to move this channel under. If None is given then it moves it out of the category. This parameter is ignored if moving a category channel.

sync_permissions (bool) – Whether to sync the permissions with the category (if given).

reason (str) – The reason for the move.

Raises
InvalidArgument – An invalid position was given or a bad mix of arguments were passed.

Forbidden – You do not have permissions to move the channel.

HTTPException – Moving the channel failed.

channels
Returns the channels that are under this category.

These are sorted by the official Discord UI, which places voice channels below the text channels.

Type
List[abc.GuildChannel]

text_channels
Returns the text channels that are under this category.

Type
List[TextChannel]

voice_channels
Returns the voice channels that are under this category.

Type
List[VoiceChannel]

stage_channels
Returns the voice channels that are under this category.

New in version 1.7.

Type
List[StageChannel]

await create_text_channel(name, *, overwrites=None, reason=None, **options)
This function is a coroutine.

A shortcut method to Guild.create_text_channel() to create a TextChannel in the category.

Returns
The channel that was just created.

Return type
TextChannel

await create_voice_channel(name, *, overwrites=None, reason=None, **options)
This function is a coroutine.

A shortcut method to Guild.create_voice_channel() to create a VoiceChannel in the category.

Returns
The channel that was just created.

Return type
VoiceChannel

await create_stage_channel(name, *, overwrites=None, reason=None, **options)
This function is a coroutine.

A shortcut method to Guild.create_stage_channel() to create a StageChannel in the category.

New in version 1.7.

Returns
The channel that was just created.

Return type
StageChannel

category
The category this channel belongs to.

If there is no category then this is None.

Type
Optional[CategoryChannel]

changed_roles
Returns a list of roles that have been overridden from their default values in the roles attribute.

Type
List[Role]

await create_invite(*, reason=None, **fields)
This function is a coroutine.

Creates an instant invite from a text or voice channel.

You must have the create_instant_invite permission to do this.

Parameters
max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

Raises
HTTPException – Invite creation failed.

NotFound – The channel that was passed is a category or an invalid channel.

Returns
The invite that was created.

Return type
Invite

created_at
Returns the channel’s creation time in UTC.

Type
datetime.datetime

await delete(*, reason=None)
This function is a coroutine.

Deletes the channel.

You must have manage_channels permission to use this.

Parameters
reason (Optional[str]) – The reason for deleting this channel. Shows up on the audit log.

Raises
Forbidden – You do not have proper permissions to delete the channel.

NotFound – The channel was not found or was already deleted.

HTTPException – Deleting the channel failed.

await invites()
This function is a coroutine.

Returns a list of all active instant invites from this channel.

You must have manage_channels to get this information.

Raises
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

Returns
The list of invites that are currently active.

Return type
List[Invite]

mention
The string that allows you to mention the channel.

Type
str

overwrites
Returns all of the channel’s overwrites.

This is returned as a dictionary where the key contains the target which can be either a Role or a Member and the value is the overwrite as a PermissionOverwrite.

Returns
The channel’s permission overwrites.

Return type
Mapping[Union[Role, Member], PermissionOverwrite]

overwrites_for(obj)
Returns the channel-specific overwrites for a member or a role.

Parameters
obj (Union[Role, User]) – The role or user denoting whose overwrite to get.

Returns
The permission overwrites for this object.

Return type
PermissionOverwrite

permissions_for(member)
Handles permission resolution for the current Member.

This function takes into consideration the following cases:

Guild owner

Guild roles

Channel overrides

Member overrides

Parameters
member (Member) – The member to resolve permissions for.

Returns
The resolved permissions for the member.

Return type
Permissions

permissions_synced
Whether or not the permissions for this channel are synced with the category it belongs to.

If there is no category then this is False.

New in version 1.3.

Type
bool

await set_permissions(target, *, overwrite=see - below, reason=None, **permissions)
This function is a coroutine.

Sets the channel specific permission overwrites for a target in the channel.

The target parameter should either be a Member or a Role that belongs to guild.

The overwrite parameter, if given, must either be None or PermissionOverwrite. For convenience, you can pass in keyword arguments denoting Permissions attributes. If this is done, then you cannot mix the keyword arguments with the overwrite parameter.

If the overwrite parameter is None, then the permission overwrites are deleted.

You must have the manage_roles permission to use this.

Examples

Setting allow and deny:

content_copy
await message.channel.set_permissions(message.author, read_messages=True,
                                                      send_messages=False)
Deleting overwrites

content_copy
await channel.set_permissions(member, overwrite=None)
Using PermissionOverwrite

content_copy
overwrite = discord.PermissionOverwrite()
overwrite.send_messages = False
overwrite.read_messages = True
await channel.set_permissions(member, overwrite=overwrite)
Parameters
target (Union[Member, Role]) – The member or role to overwrite permissions for.

overwrite (Optional[PermissionOverwrite]) – The permissions to allow and deny to the target, or None to delete the overwrite.

**permissions – A keyword argument list of permissions to set for ease of use. Cannot be mixed with overwrite.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

Raises
Forbidden – You do not have permissions to edit channel specific permissions.

HTTPException – Editing channel specific permissions failed.

NotFound – The role or member being edited is not part of the guild.

InvalidArgument – The overwrite parameter invalid or the target type was not Role or Member.

DMChannel
class discord.DMChannel
Attributes
created_at
id
me
recipient
type
Methods
fetch_message
get_partial_message
history
permissions_for
pins
send
trigger_typing
typing
Represents a Discord direct message channel.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the channel’s hash.

str(x)
Returns a string representation of the channel

recipient
The user you are participating with in the direct message channel.

Type
User

me
The user presenting yourself.

Type
ClientUser

id
The direct message channel ID.

Type
int

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

Examples

Usage

content_copy
counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

content_copy
messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

Parameters
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time. When using this argument, the maximum limit is 101. Note that if the limit is an even number then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

Raises
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

Yields
Message – The message with the message data parsed.

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.


This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

content_copy
async with channel.typing():
    # do expensive stuff here
    await channel.send('done!')
type
The channel’s Discord type.

Type
ChannelType

created_at
Returns the direct message channel’s creation time in UTC.

Type
datetime.datetime

permissions_for(user=None)
Handles permission resolution for a User.

This function is there for compatibility with other channel types.

Actual direct messages do not really have the concept of permissions.

This returns all the Text related permissions set to True except:

send_tts_messages: You cannot send TTS messages in a DM.

manage_messages: You cannot delete others messages in a DM.

Parameters
user (User) – The user to check permissions for. This parameter is ignored but kept for compatibility.

Returns
The resolved permissions.

Return type
Permissions

get_partial_message(message_id)
Creates a PartialMessage from the message ID.

This is useful if you want to work with a message and only have its ID without doing an unnecessary API call.

New in version 1.6.

Parameters
message_id (int) – The message ID to create a partial message for.

Returns
The partial message.

Return type
PartialMessage

await fetch_message(id)
This function is a coroutine.

Retrieves a single Message from the destination.

This can only be used by bot accounts.

Parameters
id (int) – The message ID to look for.

Raises
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

Returns
The message asked for.

Return type
Message

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.


Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

Raises
HTTPException – Retrieving the pinned messages failed.

Returns
The messages that are currently pinned.

Return type
List[Message]

await send(content=None, *, tts=False, embed=None, file=None, files=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

If the embed parameter is provided, it must be of type Embed and it must be a rich embed type.

Parameters
content (str) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

Raises
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or the reference object is not a Message or MessageReference.

Returns
The message that was sent.

Return type
Message

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

GroupChannel
class discord.GroupChannel
Attributes
created_at
icon
icon_url
id
me
name
owner
recipients
type
Methods
add_recipients
edit
fetch_message
history
icon_url_as
leave
permissions_for
pins
remove_recipients
send
trigger_typing
typing
Represents a Discord group channel.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the channel’s hash.

str(x)
Returns a string representation of the channel

recipients
The users you are participating with in the group channel.

Type
List[User]

me
The user presenting yourself.

Type
ClientUser

id
The group channel ID.

Type
int

owner
The user that owns the group channel.

Type
User

icon
The group channel’s icon hash if provided.

Type
Optional[str]

name
The group channel’s name if provided.

Type
Optional[str]

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

Examples

Usage

content_copy
counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

content_copy
messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

Parameters
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a date is provided it must be a timezone-naive datetime representing UTC time. When using this argument, the maximum limit is 101. Note that if the limit is an even number then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

Raises
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

Yields
Message – The message with the message data parsed.

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.


This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

content_copy
async with channel.typing():
    # do expensive stuff here
    await channel.send('done!')
type
The channel’s Discord type.

Type
ChannelType

icon_url
Returns the channel’s icon asset if available.

This is equivalent to calling icon_url_as() with the default parameters (‘webp’ format and a size of 1024).

Type
Asset

icon_url_as(*, format='webp', size=1024)
Returns an Asset for the icon the channel has.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’ or ‘png’. The size must be a power of 2 between 16 and 4096.

New in version 2.0.

Parameters
format (str) – The format to attempt to convert the icon to. Defaults to ‘webp’.

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

created_at
Returns the channel’s creation time in UTC.

Type
datetime.datetime

permissions_for(user)
Handles permission resolution for a User.

This function is there for compatibility with other channel types.

Actual direct messages do not really have the concept of permissions.

This returns all the Text related permissions set to True except:

send_tts_messages: You cannot send TTS messages in a DM.

manage_messages: You cannot delete others messages in a DM.

This also checks the kick_members permission if the user is the owner.

Parameters
user (User) – The user to check permissions for.

Returns
The resolved permissions for the user.

Return type
Permissions

await add_recipients(*recipients)
This function is a coroutine.

Adds recipients to this group.

A group can only have a maximum of 10 members. Attempting to add more ends up in an exception. To add a recipient to the group, you must have a relationship with the user of type RelationshipType.friend.

Deprecated since version 1.7.

Parameters
*recipients (User) – An argument list of users to add to this group.

Raises
HTTPException – Adding a recipient to this group failed.

await remove_recipients(*recipients)
This function is a coroutine.

Removes recipients from this group.

Deprecated since version 1.7.

Parameters
*recipients (User) – An argument list of users to remove from this group.

Raises
HTTPException – Removing a recipient from this group failed.

await edit(**fields)
This function is a coroutine.

Edits the group.

Deprecated since version 1.7.

Parameters
name (Optional[str]) – The new name to change the group to. Could be None to remove the name.

icon (Optional[bytes]) – A bytes-like object representing the new icon. Could be None to remove the icon.

Raises
HTTPException – Editing the group failed.

await leave()
This function is a coroutine.

Leave the group.

If you are the only one in the group, this deletes it as well.

Raises
HTTPException – Leaving the group failed.

await fetch_message(id)
This function is a coroutine.

Retrieves a single Message from the destination.

This can only be used by bot accounts.

Parameters
id (int) – The message ID to look for.

Raises
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

Returns
The message asked for.

Return type
Message

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.


Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

Raises
HTTPException – Retrieving the pinned messages failed.

Returns
The messages that are currently pinned.

Return type
List[Message]

await send(content=None, *, tts=False, embed=None, file=None, files=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

If the embed parameter is provided, it must be of type Embed and it must be a rich embed type.

Parameters
content (str) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

Raises
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or the reference object is not a Message or MessageReference.

Returns
The message that was sent.

Return type
Message

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

PartialInviteGuild
class discord.PartialInviteGuild
Attributes
banner
banner_url
created_at
description
features
icon
icon_url
id
name
splash
splash_url
verification_level
Methods
banner_url_as
icon_url_as
is_icon_animated
splash_url_as
Represents a “partial” invite guild.

This model will be given when the user is not part of the guild the Invite resolves to.

x == y
Checks if two partial guilds are the same.

x != y
Checks if two partial guilds are not the same.

hash(x)
Return the partial guild’s hash.

str(x)
Returns the partial guild’s name.

name
The partial guild’s name.

Type
str

id
The partial guild’s ID.

Type
int

verification_level
The partial guild’s verification level.

Type
VerificationLevel

features
A list of features the guild has. See Guild.features for more information.

Type
List[str]

icon
The partial guild’s icon.

Type
Optional[str]

banner
The partial guild’s banner.

Type
Optional[str]

splash
The partial guild’s invite splash.

Type
Optional[str]

description
The partial guild’s description.

Type
Optional[str]

created_at
Returns the guild’s creation time in UTC.

Type
datetime.datetime

icon_url
Returns the guild’s icon asset.

Type
Asset

is_icon_animated()
bool: Returns True if the guild has an animated icon.

New in version 1.4.

icon_url_as(*, format=None, static_format='webp', size=1024)
The same operation as Guild.icon_url_as().

Returns
The resulting CDN asset.

Return type
Asset

banner_url
Returns the guild’s banner asset.

Type
Asset

banner_url_as(*, format='webp', size=2048)
The same operation as Guild.banner_url_as().

Returns
The resulting CDN asset.

Return type
Asset

splash_url
Returns the guild’s invite splash asset.

Type
Asset

splash_url_as(*, format='webp', size=2048)
The same operation as Guild.splash_url_as().

Returns
The resulting CDN asset.

Return type
Asset

PartialInviteChannel
class discord.PartialInviteChannel
Attributes
created_at
id
mention
name
type
Represents a “partial” invite channel.

This model will be given when the user is not part of the guild the Invite resolves to.

x == y
Checks if two partial channels are the same.

x != y
Checks if two partial channels are not the same.

hash(x)
Return the partial channel’s hash.

str(x)
Returns the partial channel’s name.

name
The partial channel’s name.

Type
str

id
The partial channel’s ID.

Type
int

type
The partial channel’s type.

Type
ChannelType

mention
The string that allows you to mention the channel.

Type
str

created_at
Returns the channel’s creation time in UTC.

Type
datetime.datetime

Invite
class discord.Invite
Attributes
approximate_member_count
approximate_presence_count
channel
code
created_at
guild
id
inviter
max_age
max_uses
revoked
temporary
url
uses
Methods
delete
Represents a Discord Guild or abc.GuildChannel invite.

Depending on the way this object was created, some of the attributes can have a value of None.

x == y
Checks if two invites are equal.

x != y
Checks if two invites are not equal.

hash(x)
Returns the invite hash.

str(x)
Returns the invite URL.

The following table illustrates what methods will obtain the attributes:

Attribute

Method

max_age

abc.GuildChannel.invites(), Guild.invites()

max_uses

abc.GuildChannel.invites(), Guild.invites()

created_at

abc.GuildChannel.invites(), Guild.invites()

temporary

abc.GuildChannel.invites(), Guild.invites()

uses

abc.GuildChannel.invites(), Guild.invites()

approximate_member_count

Client.fetch_invite()

approximate_presence_count

Client.fetch_invite()

If it’s not in the table above then it is available by all methods.

max_age
How long the before the invite expires in seconds. A value of 0 indicates that it doesn’t expire.

Type
int

code
The URL fragment used for the invite.

Type
str

guild
The guild the invite is for. Can be None if it’s from a group direct message.

Type
Optional[Union[Guild, Object, PartialInviteGuild]]

revoked
Indicates if the invite has been revoked.

Type
bool

created_at
A datetime object denoting the time the invite was created.

Type
datetime.datetime

temporary
Indicates that the invite grants temporary membership. If True, members who joined via this invite will be kicked upon disconnect.

Type
bool

uses
How many times the invite has been used.

Type
int

max_uses
How many times the invite can be used. A value of 0 indicates that it has unlimited uses.

Type
int

inviter
The user who created the invite.

Type
User

approximate_member_count
The approximate number of members in the guild.

Type
Optional[int]

approximate_presence_count
The approximate number of members currently active in the guild. This includes idle, dnd, online, and invisible members. Offline members are excluded.

Type
Optional[int]

channel
The channel the invite is for.

Type
Union[abc.GuildChannel, Object, PartialInviteChannel]

id
Returns the proper code portion of the invite.

Type
str

url
A property that retrieves the invite URL.

Type
str

await delete(*, reason=None)
This function is a coroutine.

Revokes the instant invite.

You must have the manage_channels permission to do this.

Parameters
reason (Optional[str]) – The reason for deleting this invite. Shows up on the audit log.

Raises
Forbidden – You do not have permissions to revoke invites.

NotFound – The invite is invalid or expired.

HTTPException – Revoking the invite failed.

Template
class discord.Template
Attributes
code
created_at
creator
description
name
source_guild
updated_at
uses
Methods
create_guild
delete
edit
sync
Represents a Discord template.

New in version 1.4.

code
The template code.

Type
str

uses
How many times the template has been used.

Type
int

name
The name of the template.

Type
str

description
The description of the template.

Type
str

creator
The creator of the template.

Type
User

created_at
When the template was created.

Type
datetime.datetime

updated_at
When the template was last updated (referred to as “last synced” in the client).

Type
datetime.datetime

source_guild
The source guild.

Type
Guild

await create_guild(name, region=None, icon=None)
This function is a coroutine.

Creates a Guild using the template.

Bot accounts in more than 10 guilds are not allowed to create guilds.

Parameters
name (str) – The name of the guild.

region (VoiceRegion) – The region for the voice communication server. Defaults to VoiceRegion.us_west.

icon (bytes) – The bytes-like object representing the icon. See ClientUser.edit() for more details on what is expected.

Raises
HTTPException – Guild creation failed.

InvalidArgument – Invalid icon image format given. Must be PNG or JPG.

Returns
The guild created. This is not the same guild that is added to cache.

Return type
Guild

await sync()
This function is a coroutine.

Sync the template to the guild’s current state.

You must have the manage_guild permission in the source guild to do this.

New in version 1.7.

Raises
HTTPException – Editing the template failed.

Forbidden – You don’t have permissions to edit the template.

NotFound – This template does not exist.

await edit(**kwargs)
This function is a coroutine.

Edit the template metadata.

You must have the manage_guild permission in the source guild to do this.

New in version 1.7.

Parameters
name (Optional[str]) – The template’s new name.

description (Optional[str]) – The template’s description.

Raises
HTTPException – Editing the template failed.

Forbidden – You don’t have permissions to edit the template.

NotFound – This template does not exist.

await delete()
This function is a coroutine.

Delete the template.

You must have the manage_guild permission in the source guild to do this.

New in version 1.7.

Raises
HTTPException – Editing the template failed.

Forbidden – You don’t have permissions to edit the template.

NotFound – This template does not exist.

WidgetChannel
class discord.WidgetChannel
Attributes
created_at
id
mention
name
position
Represents a “partial” widget channel.

x == y
Checks if two partial channels are the same.

x != y
Checks if two partial channels are not the same.

hash(x)
Return the partial channel’s hash.

str(x)
Returns the partial channel’s name.

id
The channel’s ID.

Type
int

name
The channel’s name.

Type
str

position
The channel’s position

Type
int

mention
The string that allows you to mention the channel.

Type
str

created_at
Returns the channel’s creation time in UTC.

Type
datetime.datetime

WidgetMember
class discord.WidgetMember
Attributes
activity
avatar
avatar_url
bot
color
colour
connected_channel
created_at
deafened
default_avatar
default_avatar_url
discriminator
display_name
id
mention
muted
name
nick
public_flags
status
suppress
Methods
avatar_url_as
is_avatar_animated
mentioned_in
permissions_in
Represents a “partial” member of the widget’s guild.

x == y
Checks if two widget members are the same.

x != y
Checks if two widget members are not the same.

hash(x)
Return the widget member’s hash.

str(x)
Returns the widget member’s name#discriminator.

id
The member’s ID.

Type
int

name
The member’s username.

Type
str

discriminator
The member’s discriminator.

Type
str

bot
Whether the member is a bot.

Type
bool

status
The member’s status.

Type
Status

nick
The member’s nickname.

Type
Optional[str]

avatar
The member’s avatar hash.

Type
Optional[str]

activity
The member’s activity.

Type
Optional[Union[BaseActivity, Spotify]]

deafened
Whether the member is currently deafened.

Type
Optional[bool]

muted
Whether the member is currently muted.

Type
Optional[bool]

suppress
Whether the member is currently being suppressed.

Type
Optional[bool]

connected_channel
Which channel the member is connected to.

Type
Optional[VoiceChannel]

display_name
Returns the member’s display name.

Type
str

avatar_url
Returns an Asset for the avatar the user has.

If the user does not have a traditional avatar, an asset for the default avatar is returned instead.

This is equivalent to calling avatar_url_as() with the default parameters (i.e. webp/gif detection and a size of 1024).

Type
Asset

avatar_url_as(*, format=None, static_format='webp', size=1024)
Returns an Asset for the avatar the user has.

If the user does not have a traditional avatar, an asset for the default avatar is returned instead.

The format must be one of ‘webp’, ‘jpeg’, ‘jpg’, ‘png’ or ‘gif’, and ‘gif’ is only valid for animated avatars. The size must be a power of 2 between 16 and 4096.

Parameters
format (Optional[str]) – The format to attempt to convert the avatar to. If the format is None, then it is automatically detected into either ‘gif’ or static_format depending on the avatar being animated or not.

static_format (Optional[str]) – Format to attempt to convert only non-animated avatars to. Defaults to ‘webp’

size (int) – The size of the image to display.

Raises
InvalidArgument – Bad image format passed to format or static_format, or invalid size.

Returns
The resulting CDN asset.

Return type
Asset

color
A property that returns a color denoting the rendered color for the user. This always returns Colour.default().

There is an alias for this named colour.

Type
Colour

colour
A property that returns a colour denoting the rendered colour for the user. This always returns Colour.default().

There is an alias for this named color.

Type
Colour

created_at
Returns the user’s creation time in UTC.

This is when the user’s Discord account was created.

Type
datetime.datetime

default_avatar
Returns the default avatar for a given user. This is calculated by the user’s discriminator.

Type
DefaultAvatar

default_avatar_url
Returns a URL for a user’s default avatar.

Type
Asset

is_avatar_animated()
bool: Indicates if the user has an animated avatar.

mention
Returns a string that allows you to mention the given user.

Type
str

mentioned_in(message)
Checks if the user is mentioned in the specified message.

Parameters
message (Message) – The message to check if you’re mentioned in.

Returns
Indicates if the user is mentioned in the message.

Return type
bool

permissions_in(channel)
An alias for abc.GuildChannel.permissions_for().

Basically equivalent to:

content_copy
channel.permissions_for(self)
Parameters
channel (abc.GuildChannel) – The channel to check your permissions for.

public_flags
The publicly available flags the user has.

Type
PublicUserFlags

Widget
class discord.Widget
Attributes
channels
created_at
id
invite_url
json_url
members
name
Methods
fetch_invite
Represents a Guild widget.

x == y
Checks if two widgets are the same.

x != y
Checks if two widgets are not the same.

str(x)
Returns the widget’s JSON URL.

id
The guild’s ID.

Type
int

name
The guild’s name.

Type
str

channels
The accessible voice channels in the guild.

Type
Optional[List[WidgetChannel]]

members
The online members in the server. Offline members do not appear in the widget.


Due to a Discord limitation, if this data is available the users will be “anonymized” with linear IDs and discriminator information being incorrect. Likewise, the number of members retrieved is capped.

Type
Optional[List[Member]]

created_at
Returns the member’s creation time in UTC.

Type
datetime.datetime

json_url
The JSON URL of the widget.

Type
str

invite_url
The invite URL for the guild, if available.

Type
Optional[str]

await fetch_invite(*, with_counts=True)
This function is a coroutine.

Retrieves an Invite from a invite URL or ID. This is the same as Client.fetch_invite(); the invite code is abstracted away.

Parameters
with_counts (bool) – Whether to include count information in the invite. This fills the Invite.approximate_member_count and Invite.approximate_presence_count fields.

Returns
The invite from the URL/ID.

Return type
Invite

Sticker
class discord.Sticker
Attributes
created_at
description
format
id
image
image_url
name
pack_id
preview_image
tags
Methods
image_url_as
Represents a sticker.

New in version 1.6.

str(x)
Returns the name of the sticker.

x == y
Checks if the sticker is equal to another sticker.

x != y
Checks if the sticker is not equal to another sticker.

name
The sticker’s name.

Type
str

id
The id of the sticker.

Type
int

description
The description of the sticker.

Type
str

pack_id
The id of the sticker’s pack.

Type
int

format
The format for the sticker’s image.

Type
StickerType

image
The sticker’s image.

Type
str

tags
A list of tags for the sticker.

Type
List[str]

preview_image
The sticker’s preview asset hash.

Type
Optional[str]

created_at
Returns the sticker’s creation time in UTC as a naive datetime.

Type
datetime.datetime

image_url
Returns an Asset for the sticker’s image.


This will return None if the format is StickerType.lottie.

Returns
The resulting CDN asset.

Return type
Optional[Asset]

image_url_as(*, size=1024)
Optionally returns an Asset for the sticker’s image.

The size must be a power of 2 between 16 and 4096.


This will return None if the format is StickerType.lottie.

Parameters
size (int) – The size of the image to display.

Raises
InvalidArgument – Invalid size.

Returns
The resulting CDN asset or None.

Return type
Optional[Asset]

RawMessageDeleteEvent
class discord.RawMessageDeleteEvent
Attributes
cached_message
channel_id
guild_id
message_id
Represents the event payload for a on_raw_message_delete() event.

channel_id
The channel ID where the deletion took place.

Type
int

guild_id
The guild ID where the deletion took place, if applicable.

Type
Optional[int]

message_id
The message ID that got deleted.

Type
int

cached_message
The cached message, if found in the internal message cache.

Type
Optional[Message]

RawBulkMessageDeleteEvent
class discord.RawBulkMessageDeleteEvent
Attributes
cached_messages
channel_id
guild_id
message_ids
Represents the event payload for a on_raw_bulk_message_delete() event.

message_ids
A set of the message IDs that were deleted.

Type
Set[int]

channel_id
The channel ID where the message got deleted.

Type
int

guild_id
The guild ID where the message got deleted, if applicable.

Type
Optional[int]

cached_messages
The cached messages, if found in the internal message cache.

Type
List[Message]

RawMessageUpdateEvent
class discord.RawMessageUpdateEvent
Attributes
cached_message
channel_id
data
guild_id
message_id
Represents the payload for a on_raw_message_edit() event.

message_id
The message ID that got updated.

Type
int

channel_id
The channel ID where the update took place.

New in version 1.3.

Type
int

guild_id
The guild ID where the message got updated, if applicable.

New in version 1.7.

Type
Optional[int]

data
The raw data given by the gateway

Type
dict

cached_message
The cached message, if found in the internal message cache. Represents the message before it is modified by the data in RawMessageUpdateEvent.data.

Type
Optional[Message]

RawReactionActionEvent
class discord.RawReactionActionEvent
Attributes
channel_id
emoji
event_type
guild_id
member
message_id
user_id
Represents the payload for a on_raw_reaction_add() or on_raw_reaction_remove() event.

message_id
The message ID that got or lost a reaction.

Type
int

user_id
The user ID who added the reaction or whose reaction was removed.

Type
int

channel_id
The channel ID where the reaction got added or removed.

Type
int

guild_id
The guild ID where the reaction got added or removed, if applicable.

Type
Optional[int]

emoji
The custom or unicode emoji being used.

Type
PartialEmoji

member
The member who added the reaction. Only available if event_type is REACTION_ADD and the reaction is inside a guild.

New in version 1.3.

Type
Optional[Member]

event_type
The event type that triggered this action. Can be REACTION_ADD for reaction addition or REACTION_REMOVE for reaction removal.

New in version 1.3.

Type
str

RawReactionClearEvent
class discord.RawReactionClearEvent
Attributes
channel_id
guild_id
message_id
Represents the payload for a on_raw_reaction_clear() event.

message_id
The message ID that got its reactions cleared.

Type
int

channel_id
The channel ID where the reactions got cleared.

Type
int

guild_id
The guild ID where the reactions got cleared.

Type
Optional[int]

RawReactionClearEmojiEvent
class discord.RawReactionClearEmojiEvent
Attributes
channel_id
emoji
guild_id
message_id
Represents the payload for a on_raw_reaction_clear_emoji() event.

New in version 1.3.

message_id
The message ID that got its reactions cleared.

Type
int

channel_id
The channel ID where the reactions got cleared.

Type
int

guild_id
The guild ID where the reactions got cleared.

Type
Optional[int]

emoji
The custom or unicode emoji being removed.

Type
PartialEmoji

Data Classes
Some classes are just there to be data containers, this lists them.

Unlike models you are allowed to create most of these yourself, even if they can also be used to hold attributes.

Nearly all classes here have __slots__ defined which means that it is impossible to have dynamic attributes to the data classes.

The only exception to this rule is abc.Snowflake, which is made with dynamic attributes in mind.

Object
class discord.Object(id)
Attributes
created_at
id
Represents a generic Discord object.

The purpose of this class is to allow you to create ‘miniature’ versions of data classes if you want to pass in just an ID. Most functions that take in a specific data class with an ID can also take in this class as a substitute instead. Note that even though this is the case, not all objects (if any) actually inherit from this class.

There are also some cases where some websocket events are received in strange order and when such events happened you would receive this class rather than the actual data class. These cases are extremely rare.

x == y
Checks if two objects are equal.

x != y
Checks if two objects are not equal.

hash(x)
Returns the object’s hash.

id
The ID of the object.

Type
int

created_at
Returns the snowflake’s creation time in UTC.

Type
datetime.datetime

Embed
class discord.Embed(**kwargs)
Attributes
Empty
author
colour
description
fields
footer
image
provider
thumbnail
timestamp
title
type
url
video
Methods
Embed.from_dict
add_field
clear_fields
copy
insert_field_at
remove_author
remove_field
set_author
set_field_at
set_footer
set_image
set_thumbnail
to_dict
Represents a Discord embed.

len(x)
Returns the total size of the embed. Useful for checking if it’s within the 6000 character limit.

Certain properties return an EmbedProxy, a type that acts similar to a regular dict except using dotted access, e.g. embed.author.icon_url. If the attribute is invalid or empty, then a special sentinel value is returned, Embed.Empty.

For ease of use, all parameters that expect a str are implicitly casted to str for you.

title
The title of the embed. This can be set during initialisation.

Type
str

type
The type of embed. Usually “rich”. This can be set during initialisation. Possible strings for embed types can be found on discord’s api docs

Type
str

description
The description of the embed. This can be set during initialisation.

Type
str

url
The URL of the embed. This can be set during initialisation.

Type
str

timestamp
The timestamp of the embed content. This could be a naive or aware datetime.

Type
datetime.datetime

colour
The colour code of the embed. Aliased to color as well. This can be set during initialisation.

Type
Union[Colour, int]

Empty
A special sentinel value used by EmbedProxy and this class to denote that the value or attribute is empty.

classmethod from_dict(data)
Converts a dict to a Embed provided it is in the format that Discord expects it to be in.

You can find out about this format in the official Discord documentation.

Parameters
data (dict) – The dictionary to convert into an embed.

copy()
Returns a shallow copy of the embed.

footer
Returns an EmbedProxy denoting the footer contents.

See set_footer() for possible values you can access.

If the attribute has no value then Empty is returned.

Type
Union[EmbedProxy, Empty]

set_footer(*, text=Embed.Empty, icon_url=Embed.Empty)
Sets the footer for the embed content.

This function returns the class instance to allow for fluent-style chaining.

Parameters
text (str) – The footer text.

icon_url (str) – The URL of the footer icon. Only HTTP(S) is supported.

image
Returns an EmbedProxy denoting the image contents.

Possible attributes you can access are:

url

proxy_url

width

height

If the attribute has no value then Empty is returned.

Type
Union[EmbedProxy, Empty]

set_image(*, url)
Sets the image for the embed content.

This function returns the class instance to allow for fluent-style chaining.

Changed in version 1.4: Passing Empty removes the image.

Parameters
url (str) – The source URL for the image. Only HTTP(S) is supported.

thumbnail
Returns an EmbedProxy denoting the thumbnail contents.

Possible attributes you can access are:

url

proxy_url

width

height

If the attribute has no value then Empty is returned.

Type
Union[EmbedProxy, Empty]

set_thumbnail(*, url)
Sets the thumbnail for the embed content.

This function returns the class instance to allow for fluent-style chaining.

Changed in version 1.4: Passing Empty removes the thumbnail.

Parameters
url (str) – The source URL for the thumbnail. Only HTTP(S) is supported.

video
Returns an EmbedProxy denoting the video contents.

Possible attributes include:

url for the video URL.

height for the video height.

width for the video width.

If the attribute has no value then Empty is returned.

Type
Union[EmbedProxy, Empty]

provider
Returns an EmbedProxy denoting the provider contents.

The only attributes that might be accessed are name and url.

If the attribute has no value then Empty is returned.

Type
Union[EmbedProxy, Empty]

author
Returns an EmbedProxy denoting the author contents.

See set_author() for possible values you can access.

If the attribute has no value then Empty is returned.

Type
Union[EmbedProxy, Empty]

set_author(*, name, url=Embed.Empty, icon_url=Embed.Empty)
Sets the author for the embed content.

This function returns the class instance to allow for fluent-style chaining.

Parameters
name (str) – The name of the author.

url (str) – The URL for the author.

icon_url (str) – The URL of the author icon. Only HTTP(S) is supported.

remove_author()
Clears embed’s author information.

This function returns the class instance to allow for fluent-style chaining.

New in version 1.4.

fields
Returns a list of EmbedProxy denoting the field contents.

See add_field() for possible values you can access.

If the attribute has no value then Empty is returned.

Type
List[Union[EmbedProxy, Empty]]

add_field(*, name, value, inline=True)
Adds a field to the embed object.

This function returns the class instance to allow for fluent-style chaining.

Parameters
name (str) – The name of the field.

value (str) – The value of the field.

inline (bool) – Whether the field should be displayed inline.

insert_field_at(index, *, name, value, inline=True)
Inserts a field before a specified index to the embed.

This function returns the class instance to allow for fluent-style chaining.

New in version 1.2.

Parameters
index (int) – The index of where to insert the field.

name (str) – The name of the field.

value (str) – The value of the field.

inline (bool) – Whether the field should be displayed inline.

clear_fields()
Removes all fields from this embed.

remove_field(index)
Removes a field at a specified index.

If the index is invalid or out of bounds then the error is silently swallowed.


When deleting a field by index, the index of the other fields shift to fill the gap just like a regular list.

Parameters
index (int) – The index of the field to remove.

set_field_at(index, *, name, value, inline=True)
Modifies a field to the embed object.

The index must point to a valid pre-existing field.

This function returns the class instance to allow for fluent-style chaining.

Parameters
index (int) – The index of the field to modify.

name (str) – The name of the field.

value (str) – The value of the field.

inline (bool) – Whether the field should be displayed inline.

Raises
IndexError – An invalid index was provided.

to_dict()
Converts this embed object into a dict.

AllowedMentions
class discord.AllowedMentions(*, everyone=True, users=True, roles=True, replied_user=True)
Attributes
everyone
replied_user
roles
users
Methods
AllowedMentions.all
AllowedMentions.none
A class that represents what mentions are allowed in a message.

This class can be set during Client initialisation to apply to every message sent. It can also be applied on a per message basis via abc.Messageable.send() for more fine-grained control.

everyone
Whether to allow everyone and here mentions. Defaults to True.

Type
bool

users
Controls the users being mentioned. If True (the default) then users are mentioned based on the message content. If False then users are not mentioned at all. If a list of abc.Snowflake is given then only the users provided will be mentioned, provided those users are in the message content.

Type
Union[bool, List[abc.Snowflake]]

roles
Controls the roles being mentioned. If True (the default) then roles are mentioned based on the message content. If False then roles are not mentioned at all. If a list of abc.Snowflake is given then only the roles provided will be mentioned, provided those roles are in the message content.

Type
Union[bool, List[abc.Snowflake]]

replied_user
Whether to mention the author of the message being replied to. Defaults to True.

New in version 1.6.

Type
bool

classmethod all()
A factory method that returns a AllowedMentions with all fields explicitly set to True

New in version 1.5.

classmethod none()
A factory method that returns a AllowedMentions with all fields set to False

New in version 1.5.

MessageReference
class discord.MessageReference(*, message_id, channel_id, guild_id=None, fail_if_not_exists=True)
Attributes
cached_message
channel_id
fail_if_not_exists
guild_id
jump_url
message_id
resolved
Methods
MessageReference.from_message
Represents a reference to a Message.

New in version 1.5.

Changed in version 1.6: This class can now be constructed by users.

message_id
The id of the message referenced.

Type
Optional[int]

channel_id
The channel id of the message referenced.

Type
int

guild_id
The guild id of the message referenced.

Type
Optional[int]

fail_if_not_exists
Whether replying to the referenced message should raise HTTPException if the message no longer exists or Discord could not fetch the message.

New in version 1.7.

Type
bool

resolved
The message that this reference resolved to. If this is None then the original message was not fetched either due to the Discord API not attempting to resolve it or it not being available at the time of creation. If the message was resolved at a prior point but has since been deleted then this will be of type DeletedReferencedMessage.

Currently, this is mainly the replied to message when a user replies to a message.

New in version 1.6.

Type
Optional[Union[Message, DeletedReferencedMessage]]

classmethod from_message(message, *, fail_if_not_exists=True)
Creates a MessageReference from an existing Message.

New in version 1.6.

Parameters
message (Message) – The message to be converted into a reference.

fail_if_not_exists (bool) –

Whether replying to the referenced message should raise HTTPException if the message no longer exists or Discord could not fetch the message.

New in version 1.7.

Returns
A reference to the message.

Return type
MessageReference

cached_message
The cached message, if found in the internal message cache.

Type
Optional[Message]

jump_url
Returns a URL that allows the client to jump to the referenced message.

New in version 1.7.

Type
str

PartialMessage
class discord.PartialMessage(*, channel, id)
Attributes
channel
created_at
guild
id
jump_url
Methods
add_reaction
clear_reaction
clear_reactions
delete
edit
fetch
pin
publish
remove_reaction
reply
to_reference
unpin
Represents a partial message to aid with working messages when only a message and channel ID are present.

There are two ways to construct this class. The first one is through the constructor itself, and the second is via TextChannel.get_partial_message() or DMChannel.get_partial_message().

Note that this class is trimmed down and has no rich attributes.

New in version 1.6.

x == y
Checks if two partial messages are equal.

x != y
Checks if two partial messages are not equal.

hash(x)
Returns the partial message’s hash.

channel
The channel associated with this partial message.

Type
Union[TextChannel, DMChannel]

id
The message ID.

Type
int

created_at
The partial message’s creation time in UTC.

Type
datetime.datetime

guild
The guild that the partial message belongs to, if applicable.

Type
Optional[Guild]

await fetch()
This function is a coroutine.

Fetches the partial message to a full Message.

Raises
NotFound – The message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

Returns
The full message.

Return type
Message

await edit(**fields)
This function is a coroutine.

Edits the message.

The content must be able to be transformed into a string via str(content).

Changed in version 1.7: discord.Message is returned instead of None if an edit took place.

Parameters
content (Optional[str]) – The new content to replace the message with. Could be None to remove the content.

embed (Optional[Embed]) – The new embed to replace the original with. Could be None to remove the embed.

suppress (bool) – Whether to suppress embeds for the message. This removes all the embeds if set to True. If set to False this brings the embeds back if they were suppressed. Using this parameter requires manage_messages.

delete_after (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message we just edited. If the deletion fails, then it is silently ignored.

allowed_mentions (Optional[AllowedMentions]) – Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

Raises
NotFound – The message was not found.

HTTPException – Editing the message failed.

Forbidden – Tried to suppress a message without permissions or edited a message’s content or embed that isn’t yours.

Returns
The message that was edited.

Return type
Optional[Message]

await add_reaction(emoji)
This function is a coroutine.

Add a reaction to the message.

The emoji may be a unicode emoji or a custom guild Emoji.

You must have the read_message_history permission to use this. If nobody else has reacted to the message using this emoji, the add_reactions permission is required.

Parameters
emoji (Union[Emoji, Reaction, PartialEmoji, str]) – The emoji to react with.

Raises
HTTPException – Adding the reaction failed.

Forbidden – You do not have the proper permissions to react to the message.

NotFound – The emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

await clear_reaction(emoji)
This function is a coroutine.

Clears a specific reaction from the message.

The emoji may be a unicode emoji or a custom guild Emoji.

You need the manage_messages permission to use this.

New in version 1.3.

Parameters
emoji (Union[Emoji, Reaction, PartialEmoji, str]) – The emoji to clear.

Raises
HTTPException – Clearing the reaction failed.

Forbidden – You do not have the proper permissions to clear the reaction.

NotFound – The emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

await clear_reactions()
This function is a coroutine.

Removes all the reactions from the message.

You need the manage_messages permission to use this.

Raises
HTTPException – Removing the reactions failed.

Forbidden – You do not have the proper permissions to remove all the reactions.

await delete(*, delay=None)
This function is a coroutine.

Deletes the message.

Your own messages could be deleted without any proper permissions. However to delete other people’s messages, you need the manage_messages permission.

Changed in version 1.1: Added the new delay keyword-only parameter.

Parameters
delay (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message. If the deletion fails then it is silently ignored.

Raises
Forbidden – You do not have proper permissions to delete the message.

NotFound – The message was deleted already

HTTPException – Deleting the message failed.

jump_url
Returns a URL that allows the client to jump to this message.

Type
str

await pin(*, reason=None)
This function is a coroutine.

Pins the message.

You must have the manage_messages permission to do this in a non-private channel context.

Parameters
reason (Optional[str]) –

The reason for pinning the message. Shows up on the audit log.

New in version 1.4.

Raises
Forbidden – You do not have permissions to pin the message.

NotFound – The message or channel was not found or deleted.

HTTPException – Pinning the message failed, probably due to the channel having more than 50 pinned messages.

await publish()
This function is a coroutine.

Publishes this message to your announcement channel.

You must have the send_messages permission to do this.

If the message is not your own then the manage_messages permission is also needed.

Raises
Forbidden – You do not have the proper permissions to publish this message.

HTTPException – Publishing the message failed.

await remove_reaction(emoji, member)
This function is a coroutine.

Remove a reaction by the member from the message.

The emoji may be a unicode emoji or a custom guild Emoji.

If the reaction is not your own (i.e. member parameter is not you) then the manage_messages permission is needed.

The member parameter must represent a member and meet the abc.Snowflake abc.

Parameters
emoji (Union[Emoji, Reaction, PartialEmoji, str]) – The emoji to remove.

member (abc.Snowflake) – The member for which to remove the reaction.

Raises
HTTPException – Removing the reaction failed.

Forbidden – You do not have the proper permissions to remove the reaction.

NotFound – The member or emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

await reply(content=None, **kwargs)
This function is a coroutine.

A shortcut method to abc.Messageable.send() to reply to the Message.

New in version 1.6.

Raises
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size or you specified both file and files.

Returns
The message that was sent.

Return type
Message

to_reference(*, fail_if_not_exists=True)
Creates a MessageReference from the current message.

New in version 1.6.

Parameters
fail_if_not_exists (bool) –

Whether replying using the message reference should raise HTTPException if the message no longer exists or Discord could not fetch the message.

New in version 1.7.

Returns
The reference to this message.

Return type
MessageReference

await unpin(*, reason=None)
This function is a coroutine.

Unpins the message.

You must have the manage_messages permission to do this in a non-private channel context.

Parameters
reason (Optional[str]) –

The reason for unpinning the message. Shows up on the audit log.

New in version 1.4.

Raises
Forbidden – You do not have permissions to unpin the message.

NotFound – The message or channel was not found or deleted.

HTTPException – Unpinning the message failed.

Intents
class discord.Intents(**kwargs)
Attributes
bans
dm_messages
dm_reactions
dm_typing
emojis
guild_messages
guild_reactions
guild_typing
guilds
integrations
invites
members
messages
presences
reactions
typing
value
voice_states
webhooks
Methods
Intents.all
Intents.default
Intents.none
Wraps up a Discord gateway intent flag.

Similar to Permissions, the properties provided are two way. You can set and retrieve individual bits using the properties as if they were regular bools.

To construct an object you can pass keyword arguments denoting the flags to enable or disable.

This is used to disable certain gateway features that are unnecessary to run your bot. To make use of this, it is passed to the intents keyword argument of Client.

New in version 1.5.

x == y
Checks if two flags are equal.

x != y
Checks if two flags are not equal.

hash(x)
Return the flag’s hash.

iter(x)
Returns an iterator of (name, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs.

value
The raw value. You should query flags via the properties rather than using this raw value.

Type
int

classmethod all()
A factory method that creates a Intents with everything enabled.

classmethod none()
A factory method that creates a Intents with everything disabled.

classmethod default()
A factory method that creates a Intents with everything enabled except presences and members.

guilds
Whether guild related events are enabled.

This corresponds to the following events:

on_guild_join()

on_guild_remove()

on_guild_available()

on_guild_unavailable()

on_guild_channel_update()

on_guild_channel_create()

on_guild_channel_delete()

on_guild_channel_pins_update()

This also corresponds to the following attributes and classes in terms of cache:

Client.guilds

Guild and all its attributes.

Client.get_channel()

Client.get_all_channels()

It is highly advisable to leave this intent enabled for your bot to function.

Type
bool

members
Whether guild member related events are enabled.

This corresponds to the following events:

on_member_join()

on_member_remove()

on_member_update() (nickname, roles)

on_user_update()

This also corresponds to the following attributes and classes in terms of cache:

Client.get_all_members()

Guild.chunk()

Guild.fetch_members()

Guild.get_member()

Guild.members

Member.roles

Member.nick

Member.premium_since

User.name

User.avatar (User.avatar_url and User.avatar_url_as())

User.discriminator

For more information go to the member intent documentation.


Currently, this requires opting in explicitly via the developer portal as well. Bots in over 100 guilds will need to apply to Discord for verification.

Type
bool

bans
Whether guild ban related events are enabled.

This corresponds to the following events:

on_member_ban()

on_member_unban()

This does not correspond to any attributes or classes in the library in terms of cache.

Type
bool

emojis
Whether guild emoji related events are enabled.

This corresponds to the following events:

on_guild_emojis_update()

This also corresponds to the following attributes and classes in terms of cache:

Emoji

Client.get_emoji()

Client.emojis()

Guild.emojis

Type
bool

integrations
Whether guild integration related events are enabled.

This corresponds to the following events:

on_guild_integrations_update()

This does not correspond to any attributes or classes in the library in terms of cache.

Type
bool

webhooks
Whether guild webhook related events are enabled.

This corresponds to the following events:

on_webhooks_update()

This does not correspond to any attributes or classes in the library in terms of cache.

Type
bool

invites
Whether guild invite related events are enabled.

This corresponds to the following events:

on_invite_create()

on_invite_delete()

This does not correspond to any attributes or classes in the library in terms of cache.

Type
bool

voice_states
Whether guild voice state related events are enabled.

This corresponds to the following events:

on_voice_state_update()

This also corresponds to the following attributes and classes in terms of cache:

VoiceChannel.members

VoiceChannel.voice_states

Member.voice

Type
bool

presences
Whether guild presence related events are enabled.

This corresponds to the following events:

on_member_update() (activities, status)

This also corresponds to the following attributes and classes in terms of cache:

Member.activities

Member.status

Member.raw_status

For more information go to the presence intent documentation.


Currently, this requires opting in explicitly via the developer portal as well. Bots in over 100 guilds will need to apply to Discord for verification.

Type
bool

messages
Whether guild and direct message related events are enabled.

This is a shortcut to set or get both guild_messages and dm_messages.

This corresponds to the following events:

on_message() (both guilds and DMs)

on_message_edit() (both guilds and DMs)

on_message_delete() (both guilds and DMs)

on_raw_message_delete() (both guilds and DMs)

on_raw_message_edit() (both guilds and DMs)

on_private_channel_create()

This also corresponds to the following attributes and classes in terms of cache:

Message

Client.cached_messages

Note that due to an implicit relationship this also corresponds to the following events:

on_reaction_add() (both guilds and DMs)

on_reaction_remove() (both guilds and DMs)

on_reaction_clear() (both guilds and DMs)

Type
bool

guild_messages
Whether guild message related events are enabled.

See also dm_messages for DMs or messages for both.

This corresponds to the following events:

on_message() (only for guilds)

on_message_edit() (only for guilds)

on_message_delete() (only for guilds)

on_raw_message_delete() (only for guilds)

on_raw_message_edit() (only for guilds)

This also corresponds to the following attributes and classes in terms of cache:

Message

Client.cached_messages (only for guilds)

Note that due to an implicit relationship this also corresponds to the following events:

on_reaction_add() (only for guilds)

on_reaction_remove() (only for guilds)

on_reaction_clear() (only for guilds)

Type
bool

dm_messages
Whether direct message related events are enabled.

See also guild_messages for guilds or messages for both.

This corresponds to the following events:

on_message() (only for DMs)

on_message_edit() (only for DMs)

on_message_delete() (only for DMs)

on_raw_message_delete() (only for DMs)

on_raw_message_edit() (only for DMs)

on_private_channel_create()

This also corresponds to the following attributes and classes in terms of cache:

Message

Client.cached_messages (only for DMs)

Note that due to an implicit relationship this also corresponds to the following events:

on_reaction_add() (only for DMs)

on_reaction_remove() (only for DMs)

on_reaction_clear() (only for DMs)

Type
bool

reactions
Whether guild and direct message reaction related events are enabled.

This is a shortcut to set or get both guild_reactions and dm_reactions.

This corresponds to the following events:

on_reaction_add() (both guilds and DMs)

on_reaction_remove() (both guilds and DMs)

on_reaction_clear() (both guilds and DMs)

on_raw_reaction_add() (both guilds and DMs)

on_raw_reaction_remove() (both guilds and DMs)

on_raw_reaction_clear() (both guilds and DMs)

This also corresponds to the following attributes and classes in terms of cache:

Message.reactions (both guild and DM messages)

Type
bool

guild_reactions
Whether guild message reaction related events are enabled.

See also dm_reactions for DMs or reactions for both.

This corresponds to the following events:

on_reaction_add() (only for guilds)

on_reaction_remove() (only for guilds)

on_reaction_clear() (only for guilds)

on_raw_reaction_add() (only for guilds)

on_raw_reaction_remove() (only for guilds)

on_raw_reaction_clear() (only for guilds)

This also corresponds to the following attributes and classes in terms of cache:

Message.reactions (only for guild messages)

Type
bool

dm_reactions
Whether direct message reaction related events are enabled.

See also guild_reactions for guilds or reactions for both.

This corresponds to the following events:

on_reaction_add() (only for DMs)

on_reaction_remove() (only for DMs)

on_reaction_clear() (only for DMs)

on_raw_reaction_add() (only for DMs)

on_raw_reaction_remove() (only for DMs)

on_raw_reaction_clear() (only for DMs)

This also corresponds to the following attributes and classes in terms of cache:

Message.reactions (only for DM messages)

Type
bool

typing
Whether guild and direct message typing related events are enabled.

This is a shortcut to set or get both guild_typing and dm_typing.

This corresponds to the following events:

on_typing() (both guilds and DMs)

This does not correspond to any attributes or classes in the library in terms of cache.

Type
bool

guild_typing
Whether guild and direct message typing related events are enabled.

See also dm_typing for DMs or typing for both.

This corresponds to the following events:

on_typing() (only for guilds)

This does not correspond to any attributes or classes in the library in terms of cache.

Type
bool

dm_typing
Whether guild and direct message typing related events are enabled.

See also guild_typing for guilds or typing for both.

This corresponds to the following events:

on_typing() (only for DMs)

This does not correspond to any attributes or classes in the library in terms of cache.

Type
bool

MemberCacheFlags
class discord.MemberCacheFlags(**kwargs)
Attributes
joined
online
value
voice
Methods
MemberCacheFlags.all
MemberCacheFlags.from_intents
MemberCacheFlags.none
Controls the library’s cache policy when it comes to members.

This allows for finer grained control over what members are cached. Note that the bot’s own member is always cached. This class is passed to the member_cache_flags parameter in Client.

Due to a quirk in how Discord works, in order to ensure proper cleanup of cache resources it is recommended to have Intents.members enabled. Otherwise the library cannot know when a member leaves a guild and is thus unable to cleanup after itself.

To construct an object you can pass keyword arguments denoting the flags to enable or disable.

The default value is all flags enabled.

New in version 1.5.

x == y
Checks if two flags are equal.

x != y
Checks if two flags are not equal.

hash(x)
Return the flag’s hash.

iter(x)
Returns an iterator of (name, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs.

value
The raw value. You should query flags via the properties rather than using this raw value.

Type
int

classmethod all()
A factory method that creates a MemberCacheFlags with everything enabled.

classmethod none()
A factory method that creates a MemberCacheFlags with everything disabled.

online
Whether to cache members with a status.

For example, members that are part of the initial GUILD_CREATE or become online at a later point. This requires Intents.presences.

Members that go offline are no longer cached.

Type
bool

voice
Whether to cache members that are in voice.

This requires Intents.voice_states.

Members that leave voice are no longer cached.

Type
bool

joined
Whether to cache members that joined the guild or are chunked as part of the initial log in flow.

This requires Intents.members.

Members that leave the guild are no longer cached.

Type
bool

classmethod from_intents(intents)
A factory method that creates a MemberCacheFlags based on the currently selected Intents.

Parameters
intents (Intents) – The intents to select from.

Returns
The resulting member cache flags.

Return type
MemberCacheFlags

File
class discord.File(fp, filename=None, *, spoiler=False)
Attributes
filename
fp
spoiler
A parameter object used for abc.Messageable.send() for sending file objects.


File objects are single use and are not meant to be reused in multiple abc.Messageable.send()s.

fp
A file-like object opened in binary mode and read mode or a filename representing a file in the hard drive to open.


If the file-like object passed is opened via open then the modes ‘rb’ should be used.

To pass binary data, consider usage of io.BytesIO.

Type
Union[str, io.BufferedIOBase]

filename
The filename to display when uploading to Discord. If this is not given then it defaults to fp.name or if fp is a string then the filename will default to the string given.

Type
Optional[str]

spoiler
Whether the attachment is a spoiler.

Type
bool

Colour
class discord.Colour(value)
Attributes
b
g
r
value
Methods
Colour.blue
Colour.blurple
Colour.dark_blue
Colour.dark_gold
Colour.dark_gray
Colour.dark_green
Colour.dark_grey
Colour.dark_magenta
Colour.dark_orange
Colour.dark_purple
Colour.dark_red
Colour.dark_teal
Colour.dark_theme
Colour.darker_gray
Colour.darker_grey
Colour.default
Colour.from_hsv
Colour.from_rgb
Colour.gold
Colour.green
Colour.greyple
Colour.light_gray
Colour.light_grey
Colour.lighter_gray
Colour.lighter_grey
Colour.magenta
Colour.orange
Colour.purple
Colour.random
Colour.red
Colour.teal
to_rgb
Represents a Discord role colour. This class is similar to a (red, green, blue) tuple.

There is an alias for this called Color.

x == y
Checks if two colours are equal.

x != y
Checks if two colours are not equal.

hash(x)
Return the colour’s hash.

str(x)
Returns the hex format for the colour.

value
The raw integer colour value.

Type
int

r
Returns the red component of the colour.

Type
int

g
Returns the green component of the colour.

Type
int

b
Returns the blue component of the colour.

Type
int

to_rgb()
Tuple[int, int, int]: Returns an (r, g, b) tuple representing the colour.

classmethod from_rgb(r, g, b)
Constructs a Colour from an RGB tuple.

classmethod from_hsv(h, s, v)
Constructs a Colour from an HSV tuple.

classmethod default()
A factory method that returns a Colour with a value of 0.

classmethod random(*, seed=None)
A factory method that returns a Colour with a random hue.


The random algorithm works by choosing a colour with a random hue but with maxed out saturation and value.

New in version 1.6.

Parameters
seed (Optional[Union[int, str, float, bytes, bytearray]]) –

The seed to initialize the RNG with. If None is passed the default RNG is used.

New in version 1.7.

classmethod teal()
A factory method that returns a Colour with a value of 0x1abc9c.

classmethod dark_teal()
A factory method that returns a Colour with a value of 0x11806a.

classmethod green()
A factory method that returns a Colour with a value of 0x2ecc71.

classmethod dark_green()
A factory method that returns a Colour with a value of 0x1f8b4c.

classmethod blue()
A factory method that returns a Colour with a value of 0x3498db.

classmethod dark_blue()
A factory method that returns a Colour with a value of 0x206694.

classmethod purple()
A factory method that returns a Colour with a value of 0x9b59b6.

classmethod dark_purple()
A factory method that returns a Colour with a value of 0x71368a.

classmethod magenta()
A factory method that returns a Colour with a value of 0xe91e63.

classmethod dark_magenta()
A factory method that returns a Colour with a value of 0xad1457.

classmethod gold()
A factory method that returns a Colour with a value of 0xf1c40f.

classmethod dark_gold()
A factory method that returns a Colour with a value of 0xc27c0e.

classmethod orange()
A factory method that returns a Colour with a value of 0xe67e22.

classmethod dark_orange()
A factory method that returns a Colour with a value of 0xa84300.

classmethod red()
A factory method that returns a Colour with a value of 0xe74c3c.

classmethod dark_red()
A factory method that returns a Colour with a value of 0x992d22.

classmethod lighter_grey()
A factory method that returns a Colour with a value of 0x95a5a6.

classmethod lighter_gray()
A factory method that returns a Colour with a value of 0x95a5a6.

classmethod dark_grey()
A factory method that returns a Colour with a value of 0x607d8b.

classmethod dark_gray()
A factory method that returns a Colour with a value of 0x607d8b.

classmethod light_grey()
A factory method that returns a Colour with a value of 0x979c9f.

classmethod light_gray()
A factory method that returns a Colour with a value of 0x979c9f.

classmethod darker_grey()
A factory method that returns a Colour with a value of 0x546e7a.

classmethod darker_gray()
A factory method that returns a Colour with a value of 0x546e7a.

classmethod blurple()
A factory method that returns a Colour with a value of 0x7289da.

classmethod greyple()
A factory method that returns a Colour with a value of 0x99aab5.

classmethod dark_theme()
A factory method that returns a Colour with a value of 0x36393F. This will appear transparent on Discord’s dark theme.

New in version 1.5.

BaseActivity
class discord.BaseActivity(**kwargs)
Attributes
created_at
The base activity that all user-settable activities inherit from. A user-settable activity is one that can be used in Client.change_presence().

The following types currently count as user-settable:

Activity

Game

Streaming

CustomActivity

Note that although these types are considered user-settable by the library, Discord typically ignores certain combinations of activity depending on what is currently set. This behaviour may change in the future so there are no guarantees on whether Discord will actually let you set these types.

New in version 1.3.

created_at
When the user started doing this activity in UTC.

New in version 1.3.

Type
Optional[datetime.datetime]

Activity
class discord.Activity(**kwargs)
Attributes
application_id
assets
details
emoji
end
large_image_text
large_image_url
name
party
small_image_text
small_image_url
start
state
timestamps
type
url
Represents an activity in Discord.

This could be an activity such as streaming, playing, listening or watching.

For memory optimisation purposes, some activities are offered in slimmed down versions:

Game

Streaming

application_id
The application ID of the game.

Type
int

name
The name of the activity.

Type
str

url
A stream URL that the activity could be doing.

Type
str

type
The type of activity currently being done.

Type
ActivityType

state
The user’s current state. For example, “In Game”.

Type
str

details
The detail of the user’s current activity.

Type
str

timestamps
A dictionary of timestamps. It contains the following optional keys:

start: Corresponds to when the user started doing the activity in milliseconds since Unix epoch.

end: Corresponds to when the user will finish doing the activity in milliseconds since Unix epoch.

Type
dict

assets
A dictionary representing the images and their hover text of an activity. It contains the following optional keys:

large_image: A string representing the ID for the large image asset.

large_text: A string representing the text when hovering over the large image asset.

small_image: A string representing the ID for the small image asset.

small_text: A string representing the text when hovering over the small image asset.

Type
dict

party
A dictionary representing the activity party. It contains the following optional keys:

id: A string representing the party ID.

size: A list of up to two integer elements denoting (current_size, maximum_size).

Type
dict

emoji
The emoji that belongs to this activity.

Type
Optional[PartialEmoji]

start
When the user started doing this activity in UTC, if applicable.

Type
Optional[datetime.datetime]

end
When the user will stop doing this activity in UTC, if applicable.

Type
Optional[datetime.datetime]

large_image_url
Returns a URL pointing to the large image asset of this activity if applicable.

Type
Optional[str]

small_image_url
Returns a URL pointing to the small image asset of this activity if applicable.

Type
Optional[str]

large_image_text
Returns the large image asset hover text of this activity if applicable.

Type
Optional[str]

small_image_text
Returns the small image asset hover text of this activity if applicable.

Type
Optional[str]

Game
class discord.Game(name, **extra)
Attributes
end
name
start
type
A slimmed down version of Activity that represents a Discord game.

This is typically displayed via Playing on the official Discord client.

x == y
Checks if two games are equal.

x != y
Checks if two games are not equal.

hash(x)
Returns the game’s hash.

str(x)
Returns the game’s name.

Parameters
name (str) – The game’s name.

start (Optional[datetime.datetime]) – A naive UTC timestamp representing when the game started. Keyword-only parameter. Ignored for bots.

end (Optional[datetime.datetime]) – A naive UTC timestamp representing when the game ends. Keyword-only parameter. Ignored for bots.

name
The game’s name.

Type
str

type
Returns the game’s type. This is for compatibility with Activity.

It always returns ActivityType.playing.

Type
ActivityType

start
When the user started playing this game in UTC, if applicable.

Type
Optional[datetime.datetime]

end
When the user will stop playing this game in UTC, if applicable.

Type
Optional[datetime.datetime]

Streaming
class discord.Streaming(*, name, url, **extra)
Attributes
assets
details
game
name
platform
twitch_name
type
url
A slimmed down version of Activity that represents a Discord streaming status.

This is typically displayed via Streaming on the official Discord client.

x == y
Checks if two streams are equal.

x != y
Checks if two streams are not equal.

hash(x)
Returns the stream’s hash.

str(x)
Returns the stream’s name.

platform
Where the user is streaming from (ie. YouTube, Twitch).

New in version 1.3.

Type
str

name
The stream’s name.

Type
Optional[str]

details
An alias for name

Type
Optional[str]

game
The game being streamed.

New in version 1.3.

Type
Optional[str]

url
The stream’s URL.

Type
str

assets
A dictionary comprising of similar keys than those in Activity.assets.

Type
dict

type
Returns the game’s type. This is for compatibility with Activity.

It always returns ActivityType.streaming.

Type
ActivityType

twitch_name
If provided, the twitch name of the user streaming.

This corresponds to the large_image key of the Streaming.assets dictionary if it starts with twitch:. Typically set by the Discord client.

Type
Optional[str]

CustomActivity
class discord.CustomActivity(name, *, emoji=None, **extra)
Attributes
emoji
name
type
Represents a Custom activity from Discord.

x == y
Checks if two activities are equal.

x != y
Checks if two activities are not equal.

hash(x)
Returns the activity’s hash.

str(x)
Returns the custom status text.

New in version 1.3.

name
The custom activity’s name.

Type
Optional[str]

emoji
The emoji to pass to the activity, if any.

Type
Optional[PartialEmoji]

type
Returns the activity’s type. This is for compatibility with Activity.

It always returns ActivityType.custom.

Type
ActivityType

Permissions
class discord.Permissions(permissions=0, **kwargs)
Attributes
add_reactions
administrator
attach_files
ban_members
change_nickname
connect
create_instant_invite
deafen_members
embed_links
external_emojis
kick_members
manage_channels
manage_emojis
manage_guild
manage_messages
manage_nicknames
manage_permissions
manage_roles
manage_webhooks
mention_everyone
move_members
mute_members
priority_speaker
read_message_history
read_messages
request_to_speak
send_messages
send_tts_messages
speak
stream
use_external_emojis
use_slash_commands
use_voice_activation
value
view_audit_log
view_channel
view_guild_insights
Methods
Permissions.advanced
Permissions.all
Permissions.all_channel
Permissions.general
Permissions.membership
Permissions.none
Permissions.stage
Permissions.stage_moderator
Permissions.text
Permissions.voice
is_strict_subset
is_strict_superset
is_subset
is_superset
update
Wraps up the Discord permission value.

The properties provided are two way. You can set and retrieve individual bits using the properties as if they were regular bools. This allows you to edit permissions.

Changed in version 1.3: You can now use keyword arguments to initialize Permissions similar to update().

x == y
Checks if two permissions are equal.

x != y
Checks if two permissions are not equal.

x <= y
Checks if a permission is a subset of another permission.

x >= y
Checks if a permission is a superset of another permission.

x < y
Checks if a permission is a strict subset of another permission.

x > y
Checks if a permission is a strict superset of another permission.

hash(x)
Return the permission’s hash.

iter(x)
Returns an iterator of (perm, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs. Note that aliases are not shown.

value
The raw value. This value is a bit array field of a 53-bit integer representing the currently available permissions. You should query permissions via the properties rather than using this raw value.

Type
int

is_subset(other)
Returns True if self has the same or fewer permissions as other.

is_superset(other)
Returns True if self has the same or more permissions as other.

is_strict_subset(other)
Returns True if the permissions on other are a strict subset of those on self.

is_strict_superset(other)
Returns True if the permissions on other are a strict superset of those on self.

classmethod none()
A factory method that creates a Permissions with all permissions set to False.

classmethod all()
A factory method that creates a Permissions with all permissions set to True.

classmethod all_channel()
A Permissions with all channel-specific permissions set to True and the guild-specific ones set to False. The guild-specific permissions are currently:

manage_emojis

view_audit_log

view_guild_insights

manage_guild

change_nickname

manage_nicknames

kick_members

ban_members

administrator

Changed in version 1.7: Added stream, priority_speaker and use_slash_commands permissions.

classmethod general()
A factory method that creates a Permissions with all “General” permissions from the official Discord UI set to True.

Changed in version 1.7: Permission read_messages is now included in the general permissions, but permissions administrator, create_instant_invite, kick_members, ban_members, change_nickname and manage_nicknames are no longer part of the general permissions.

classmethod membership()
A factory method that creates a Permissions with all “Membership” permissions from the official Discord UI set to True.

New in version 1.7.

classmethod text()
A factory method that creates a Permissions with all “Text” permissions from the official Discord UI set to True.

Changed in version 1.7: Permission read_messages is no longer part of the text permissions. Added use_slash_commands permission.

classmethod voice()
A factory method that creates a Permissions with all “Voice” permissions from the official Discord UI set to True.

classmethod stage()
A factory method that creates a Permissions with all “Stage Channel” permissions from the official Discord UI set to True.

New in version 1.7.

classmethod stage_moderator()
A factory method that creates a Permissions with all “Stage Moderator” permissions from the official Discord UI set to True.

New in version 1.7.

classmethod advanced()
A factory method that creates a Permissions with all “Advanced” permissions from the official Discord UI set to True.

New in version 1.7.

update(**kwargs)
Bulk updates this permission object.

Allows you to set multiple attributes by using keyword arguments. The names must be equivalent to the properties listed. Extraneous key/value pairs will be silently ignored.

Parameters
**kwargs – A list of key/value pairs to bulk update permissions with.

create_instant_invite
Returns True if the user can create instant invites.

Type
bool

kick_members
Returns True if the user can kick users from the guild.

Type
bool

ban_members
Returns True if a user can ban users from the guild.

Type
bool

administrator
Returns True if a user is an administrator. This role overrides all other permissions.

This also bypasses all channel-specific overrides.

Type
bool

manage_channels
Returns True if a user can edit, delete, or create channels in the guild.

This also corresponds to the “Manage Channel” channel-specific override.

Type
bool

manage_guild
Returns True if a user can edit guild properties.

Type
bool

add_reactions
Returns True if a user can add reactions to messages.

Type
bool

view_audit_log
Returns True if a user can view the guild’s audit log.

Type
bool

priority_speaker
Returns True if a user can be more easily heard while talking.

Type
bool

stream
Returns True if a user can stream in a voice channel.

Type
bool

read_messages
Returns True if a user can read messages from all or specific text channels.

Type
bool

view_channel
An alias for read_messages.

New in version 1.3.

Type
bool

send_messages
Returns True if a user can send messages from all or specific text channels.

Type
bool

send_tts_messages
Returns True if a user can send TTS messages from all or specific text channels.

Type
bool

manage_messages
Returns True if a user can delete or pin messages in a text channel.


Note that there are currently no ways to edit other people’s messages.

Type
bool

embed_links
Returns True if a user’s messages will automatically be embedded by Discord.

Type
bool

attach_files
Returns True if a user can send files in their messages.

Type
bool

read_message_history
Returns True if a user can read a text channel’s previous messages.

Type
bool

mention_everyone
Returns True if a user’s @everyone or @here will mention everyone in the text channel.

Type
bool

external_emojis
Returns True if a user can use emojis from other guilds.

Type
bool

use_external_emojis
An alias for external_emojis.

New in version 1.3.

Type
bool

view_guild_insights
Returns True if a user can view the guild’s insights.

New in version 1.3.

Type
bool

connect
Returns True if a user can connect to a voice channel.

Type
bool

speak
Returns True if a user can speak in a voice channel.

Type
bool

mute_members
Returns True if a user can mute other users.

Type
bool

deafen_members
Returns True if a user can deafen other users.

Type
bool

move_members
Returns True if a user can move users between other voice channels.

Type
bool

use_voice_activation
Returns True if a user can use voice activation in voice channels.

Type
bool

change_nickname
Returns True if a user can change their nickname in the guild.

Type
bool

manage_nicknames
Returns True if a user can change other user’s nickname in the guild.

Type
bool

manage_roles
Returns True if a user can create or edit roles less than their role’s position.

This also corresponds to the “Manage Permissions” channel-specific override.

Type
bool

manage_permissions
An alias for manage_roles.

New in version 1.3.

Type
bool

manage_webhooks
Returns True if a user can create, edit, or delete webhooks.

Type
bool

manage_emojis
Returns True if a user can create, edit, or delete emojis.

Type
bool

use_slash_commands
Returns True if a user can use slash commands.

New in version 1.7.

Type
bool

request_to_speak
Returns True if a user can request to speak in a stage channel.

New in version 1.7.

Type
bool

PermissionOverwrite
class discord.PermissionOverwrite(**kwargs)
Methods
PermissionOverwrite.from_pair
is_empty
pair
update
A type that is used to represent a channel specific permission.

Unlike a regular Permissions, the default value of a permission is equivalent to None and not False. Setting a value to False is explicitly denying that permission, while setting a value to True is explicitly allowing that permission.

The values supported by this are the same as Permissions with the added possibility of it being set to None.

x == y
Checks if two overwrites are equal.

x != y
Checks if two overwrites are not equal.

iter(x)
Returns an iterator of (perm, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs. Note that aliases are not shown.

Parameters
**kwargs – Set the value of permissions by their name.

pair()
Tuple[Permissions, Permissions]: Returns the (allow, deny) pair from this overwrite.

classmethod from_pair(allow, deny)
Creates an overwrite from an allow/deny pair of Permissions.

is_empty()
Checks if the permission overwrite is currently empty.

An empty permission overwrite is one that has no overwrites set to True or False.

Returns
Indicates if the overwrite is empty.

Return type
bool

update(**kwargs)
Bulk updates this permission overwrite object.

Allows you to set multiple attributes by using keyword arguments. The names must be equivalent to the properties listed. Extraneous key/value pairs will be silently ignored.

Parameters
**kwargs – A list of key/value pairs to bulk update with.

ShardInfo
class discord.ShardInfo
Attributes
id
latency
shard_count
Methods
connect
disconnect
is_closed
is_ws_ratelimited
reconnect
A class that gives information and control over a specific shard.

You can retrieve this object via AutoShardedClient.get_shard() or AutoShardedClient.shards.

New in version 1.4.

id
The shard ID for this shard.

Type
int

shard_count
The shard count for this cluster. If this is None then the bot has not started yet.

Type
Optional[int]

is_closed()
bool: Whether the shard connection is currently closed.

await disconnect()
This function is a coroutine.

Disconnects a shard. When this is called, the shard connection will no longer be open.

If the shard is already disconnected this does nothing.

await reconnect()
This function is a coroutine.

Disconnects and then connects the shard again.

await connect()
This function is a coroutine.

Connects a shard. If the shard is already connected this does nothing.

latency
Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds for this shard.

Type
float

is_ws_ratelimited()
bool: Whether the websocket is currently rate limited.

This can be useful to know when deciding whether you should query members using HTTP or via the gateway.

New in version 1.6.

SystemChannelFlags
class discord.SystemChannelFlags
Attributes
join_notifications
premium_subscriptions
value
Wraps up a Discord system channel flag value.

Similar to Permissions, the properties provided are two way. You can set and retrieve individual bits using the properties as if they were regular bools. This allows you to edit the system flags easily.

To construct an object you can pass keyword arguments denoting the flags to enable or disable.

x == y
Checks if two flags are equal.

x != y
Checks if two flags are not equal.

hash(x)
Return the flag’s hash.

iter(x)
Returns an iterator of (name, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs.

value
The raw value. This value is a bit array field of a 53-bit integer representing the currently available flags. You should query flags via the properties rather than using this raw value.

Type
int

join_notifications
Returns True if the system channel is used for member join notifications.

Type
bool

premium_subscriptions
Returns True if the system channel is used for Nitro boosting notifications.

Type
bool

MessageFlags
class discord.MessageFlags
Attributes
crossposted
is_crossposted
source_message_deleted
suppress_embeds
urgent
value
Wraps up a Discord Message flag value.

See SystemChannelFlags.

x == y
Checks if two flags are equal.

x != y
Checks if two flags are not equal.

hash(x)
Return the flag’s hash.

iter(x)
Returns an iterator of (name, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs.

New in version 1.3.

value
The raw value. This value is a bit array field of a 53-bit integer representing the currently available flags. You should query flags via the properties rather than using this raw value.

Type
int

crossposted
Returns True if the message is the original crossposted message.

Type
bool

is_crossposted
Returns True if the message was crossposted from another channel.

Type
bool

suppress_embeds
Returns True if the message’s embeds have been suppressed.

Type
bool

source_message_deleted
Returns True if the source message for this crosspost has been deleted.

Type
bool

urgent
Returns True if the source message is an urgent message.

An urgent message is one sent by Discord Trust and Safety.

Type
bool

PublicUserFlags
class discord.PublicUserFlags
Attributes
bug_hunter
bug_hunter_level_2
early_supporter
early_verified_bot_developer
hypesquad
hypesquad_balance
hypesquad_bravery
hypesquad_brilliance
partner
staff
system
team_user
value
verified_bot
verified_bot_developer
Methods
all
Wraps up the Discord User Public flags.

x == y
Checks if two PublicUserFlags are equal.

x != y
Checks if two PublicUserFlags are not equal.

hash(x)
Return the flag’s hash.

iter(x)
Returns an iterator of (name, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs. Note that aliases are not shown.

New in version 1.4.

value
The raw value. This value is a bit array field of a 53-bit integer representing the currently available flags. You should query flags via the properties rather than using this raw value.

Type
int

staff
Returns True if the user is a Discord Employee.

Type
bool

partner
Returns True if the user is a Discord Partner.

Type
bool

hypesquad
Returns True if the user is a HypeSquad Events member.

Type
bool

bug_hunter
Returns True if the user is a Bug Hunter

Type
bool

hypesquad_bravery
Returns True if the user is a HypeSquad Bravery member.

Type
bool

hypesquad_brilliance
Returns True if the user is a HypeSquad Brilliance member.

Type
bool

hypesquad_balance
Returns True if the user is a HypeSquad Balance member.

Type
bool

early_supporter
Returns True if the user is an Early Supporter.

Type
bool

team_user
Returns True if the user is a Team User.

Type
bool

system
Returns True if the user is a system user (i.e. represents Discord officially).

Type
bool

bug_hunter_level_2
Returns True if the user is a Bug Hunter Level 2

Type
bool

verified_bot
Returns True if the user is a Verified Bot.

Type
bool

verified_bot_developer
Returns True if the user is an Early Verified Bot Developer.

Type
bool

early_verified_bot_developer
An alias for verified_bot_developer.

New in version 1.5.

Type
bool

all()
List[UserFlags]: Returns all public flags the user has.

Exceptions
The following exceptions are thrown by the library.

exception discord.DiscordException
Base exception class for discord.py

Ideally speaking, this could be caught to handle any exceptions thrown from this library.

exception discord.ClientException
Exception that’s thrown when an operation in the Client fails.

These are usually for exceptions that happened due to user input.

exception discord.LoginFailure
Exception that’s thrown when the Client.login() function fails to log you in from improper credentials or some other misc. failure.

exception discord.NoMoreItems
Exception that is thrown when an async iteration operation has no more items.

exception discord.HTTPException(response, message)
Exception that’s thrown when an HTTP request operation fails.

response
The response of the failed HTTP request. This is an instance of aiohttp.ClientResponse. In some cases this could also be a requests.Response.

Type
aiohttp.ClientResponse

text
The text of the error. Could be an empty string.

Type
str

status
The status code of the HTTP request.

Type
int

code
The Discord specific error code for the failure.

Type
int

exception discord.Forbidden(response, message)
Exception that’s thrown for when status code 403 occurs.

Subclass of HTTPException

exception discord.NotFound(response, message)
Exception that’s thrown for when status code 404 occurs.

Subclass of HTTPException

exception discord.DiscordServerError(response, message)
Exception that’s thrown for when a 500 range status code occurs.

Subclass of HTTPException.

New in version 1.5.

exception discord.InvalidData
Exception that’s raised when the library encounters unknown or invalid data from Discord.

exception discord.InvalidArgument
Exception that’s thrown when an argument to a function is invalid some way (e.g. wrong value or wrong type).

This could be considered the analogous of ValueError and TypeError except inherited from ClientException and thus DiscordException.

exception discord.GatewayNotFound
An exception that is usually thrown when the gateway hub for the Client websocket is not found.

exception discord.ConnectionClosed(socket, *, shard_id, code=None)
Exception that’s thrown when the gateway connection is closed for reasons that could not be handled internally.

code
The close code of the websocket.

Type
int

reason
The reason provided for the closure.

Type
str

shard_id
The shard ID that got closed if applicable.

Type
Optional[int]

exception discord.PrivilegedIntentsRequired(shard_id)
Exception that’s thrown when the gateway is requesting privileged intents but they’re not ticked in the developer page yet.

Go to https://discord.com/developers/applications/ and enable the intents that are required. Currently these are as follows:

Intents.members

Intents.presences

shard_id
The shard ID that got closed if applicable.

Type
Optional[int]

exception discord.opus.OpusError(code)
An exception that is thrown for libopus related errors.

code
The error code returned.

Type
int

exception discord.opus.OpusNotLoaded
An exception that is thrown for when libopus is not loaded.

Louis was here.
You really thought you would find something here, huh? Too easy.